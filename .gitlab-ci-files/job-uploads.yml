#################################################
# iOS
#################################################


job-ios-upload:

  stage: deploy
  tags: [ "deploy" ]

  only:
    variables:
      - $DEPLOY_RUN_IOS
      - $NIGHTLY_MASTER

  dependencies:
    - job-ios-xcode

  script:
    - scp build-ios/linphone-sdk-*.zip $DEPLOY_SERVER:$DEPLOY_SNAPSHOTS_ROOT_DIRECTORY/ios/
    - pod repo remove linphone-sdk || true
    - pod repo add linphone-sdk git@gitlab.linphone.org:BC/public/podspec.git $CI_COMMIT_REF_NAME
    - pod repo push linphone-sdk build-ios/linphone-sdk.podspec --skip-import-validation --local-only --verbose
    - cd ~/.cocoapods/repos/linphone-sdk && git push origin $CI_COMMIT_REF_NAME && cd -
    - pod repo remove linphone-sdk


#################################################
# Android
#################################################

job-android-upload:

  stage: deploy
  tags: [ "docker-android" ]
  image: gitlab.linphone.org:4567/bc/public/linphone-sdk/bc-dev-android:r17c

  only:
    variables:
      - $DEPLOY_RUN_ANDROID
      - $NIGHTLY_MASTER

  variables:
    CCACHE_SIZE: 4G
    CMAKE_GENERATOR: Ninja
    ADDITIONAL_BUILD_OPTIONS: -j$MAKEFILE_JOBS
    GIT_STRATEGY: clone
    GRADLE_OPTIONS: -i

  dependencies:
    - job-android-ninja-r17c

  before_script:
    - eval $(ssh-agent -s)
    - echo "$DEPLOY_USER_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    - echo -e "Host gitlab.linphone.org\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - echo -e "Host linphone.org\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    
# Currently we can't use artifact to upload this so we rebuild all android project

  script:
    - git config --global user.email "gitlab@belledonne-communications.com"
    - git config --global user.name "Gitlab"
    - mkdir -p build
    - cd build
    - echo $CMAKE_GENERATOR
    - echo $DEFAULT_LINUX_CMAKE_OPTION
    - echo $CMAKE_OPTIONS
    - cmake .. -G "$CMAKE_GENERATOR" -DLINPHONESDK_PLATFORM=Android -DLINPHONESDK_ANDROID_ARCHS="arm64, armv7, x86_64, x86" $DEFAULT_LINUX_CMAKE_OPTIONS $CMAKE_OPTIONS
    - echo $ADDITIONAL_BUILD_OPTIONS
    - cmake --build . --target sdk -- $ADDITIONAL_BUILD_OPTIONS
    - rsync -ave ssh --exclude "*.aar" --exclude "*.jar" $ANDROID_MAVEN_URL maven_repository
    - echo $GRADLE_OPTIONS
    - ../cmake/Android/gradlew publish $GRADLE_OPTIONS
    - rsync -ave ssh ./maven_repository/* $ANDROID_MAVEN_URL

  after_script:
    - rm -rf ~/.ssh || true

job-android-upload-no-video:

  extends: job-android-upload

  variables:
    CMAKE_OPTIONS: -DENABLE_VIDEO=NO
    GRADLE_OPTIONS: -Pno-video -i


job-android-upload-legacy:

  extends: job-android-upload
  
  variables:
    CMAKE_OPTIONS: -DENABLE_JAVA_WRAPPER=NO
    GRADLE_OPTIONS: -Plegacy-wrapper -i
    
#################################################
# Macosx
#################################################


job-macosx-upload:

  stage: deploy
  tags: [ "deploy" ]

  only:
    variables:
      - $DEPLOY_RUN_MACOSX
      - $NIGHTLY_MASTER

  dependencies:
    - job-macosx-xcode

  script:
    - scp build-desktop/linphone-sdk-*.zip $DEPLOY_SERVER:$DEPLOY_SNAPSHOTS_ROOT_DIRECTORY/macosx/
    - pod repo remove linphone-sdk-macosx || true
    - pod repo add linphone-sdk-macosx git@gitlab.linphone.org:BC/public/podspec-macos.git $CI_COMMIT_REF_NAME
    - pod repo push linphone-sdk-macosx build-desktop/linphone-sdk.podspec --skip-import-validation --local-only --verbose
    - cd ~/.cocoapods/repos/linphone-sdk-macosx && git push origin $CI_COMMIT_REF_NAME && cd -
    - pod repo remove linphone-sdk-macosx
    
job-debian-doc-upload:
  stage: deploy
  tags: [ "deploy" ]

  only:
    variables:
      - $NIGHTLY_MASTER
    
  dependencies:
    - job-debian9-ninja-clang

  script:
    - cd linphone
    #getting the version number to push the right version of the doc
    - LINPHONE_VERSION=$(git describe | sed -e 's/-.*//g')
    #using rsync with following options : verbose, keeping symbolic links, and copy recursively
    - echo "Linphone version =" $LINPHONE_VERSION
    - rsync -rlv ../build-desktop/linphone-sdk/desktop/share/doc/linphone/$LINPHONE_VERSION/* $DEPLOY_SERVER:$DEPLOY_SNAPSHOTS_ROOT_DIRECTORY/docs/liblinphone/multilang


job-test-report-upload:
  stage: deploy
  tags: [ "deploy" ]
    
  dependencies:
    - test-liblinphone-centos7-schedule
    - test-liblinphone-centos7-mr
  
  except:
    - $DEPLOY_RUN_MACOSX
    - $DEPLOY_RUN_ANDROID
    - $DEPLOY_RUN_IOS
    - $PACKAGE_RUN_WINDOWS


  script:
    #getting the version number for each submodule and writing it in environment.properties file
    #this file will be parsed by allure and will help to display additionnal information in the web view
    #git -C allows to run a git command in the given folder without moving"
    - BCTOOLBOX_VERSION=$(git -C bctoolbox describe)
    - ORTP_VERSION=$(git -C ortp describe)
    - BCG729_VERSION=$(git -C bcg729 describe)
    - BELCARD_VERSION=$(git -C belcard describe)
    - BELR_VERSION=$(git -C belr describe)
    - BZRTP_VERSION=$(git -C bzrtp describe)
    - CMAKE_BUILDER_VERSION=$(git -C cmake-builder describe)
    - BCUNIT_VERSION=$(git -C bcunit describe)
    - BELLESIP_VERSION=$(git -C belle-sip describe)
    - LIME_VERSION=$(git -C lime describe)
    - LINPHONE_VERSION=$(git -C linphone describe)
    - MS2_VERSION=$(git -C mediastreamer2 describe)
    - SDK_VERSION=$(git describe)
    - BRANCH=$CI_COMMIT_REF_NAME
    - ESCAPED_BRANCH=$(echo $BRANCH | tr / _)    
    - PARENT_BRANCH=$(echo $(git log --pretty=oneline  --pretty=format:%D -n 1 HEAD~1 | awk -F ", " '{print $1}' | awk -F "origin/" '{print $2}'))
    - cd results
    - echo BRANCH=$BRANCH | tee -a environment.properties
    - echo SDK_VERSION=$SDK_VERSION | tee -a environment.properties
    - echo BCTOOLBOX_VERSION=$BCTOOLBOX_VERSION | tee -a environment.properties
    - echo ORTP_VERSION=$ORTP_VERSION | tee -a environment.properties
    - echo BCG729_VERSION=$BCG729_VERSION | tee -a environment.properties
    - echo BELCARD_VERSION=$BELCARD_VERSION | tee -a environment.properties
    - echo BELR_VERSION=$BELR_VERSION | tee -a environment.properties
    - echo BZRTP_VERSION=$BZRTP_VERSION | tee -a environment.properties
    - echo CMAKE_BUILDER_VERSION=$CMAKE_BUILDER_VERSION | tee -a environment.properties
    - echo BCUNIT_VERSION=$BCUNIT_VERSION | tee -a environment.properties
    - echo BELLESIP_VERSION=$BELLESIP_VERSION | tee -a environment.properties
    - echo LIME_VERSION=$LIME_VERSION | tee -a environment.properties
    - echo LINPHONE_VERSION=$LINPHONE_VERSION | tee -a environment.properties
    - echo MS2_VERSION=$MS2_VERSION | tee -a environment.properties
    
    - cat environment.properties
    
    
    #TODO errors management
    
    
    #Script generation
    #This script will be run on the remote server to organize files and generate test reports
    - echo "#\!/bin/bash" | tee -a allure_launch_script
    
    #we use as a folder the name of the branch with the slashes replaced by underscores (ex feature/random -> feature_random)
    #navigation to the branch folder and creation if it doesn't exists
    - echo "if [[ -n \$(ls | grep $ESCAPED_BRANCH) ]];" | tee -a allure_launch_script
    - echo "  then cd $ESCAPED_BRANCH; else mkdir $ESCAPED_BRANCH && cd $ESCAPED_BRANCH;" | tee -a allure_launch_script
    - echo "fi || true" | tee -a allure_launch_script
    
    #as a subfoldder name, we use the git describe of the sdk (version + commit hash)
    #no need to search for an history in the case of a retry (if the directory related to the commit already exists)
    - echo "if [[ -n \$(ls | grep $SDK_VERSION) ]];" | tee -a allure_launch_script
    - echo "  then cd $SDK_VERSION;" | tee -a allure_launch_script
    
    #The LAST_MODIFIED_FOLDER variable will help us to save the lastest tests history before deletion and move it
    #in the new folder, to be used by the new allure report generation
    - echo "else" | tee -a allure_launch_script
    - echo "  LAST_MODIFIED_FOLDER=\$(ls -ct | head -n1)" | tee -a allure_launch_script
    - echo "  mkdir $SDK_VERSION" >> allure_launch_script
    
    #no need to save the history if there is no previous test reports
    - echo "  if [[ -z \$LAST_MODIFIED_FOLDER ]];" | tee -a allure_launch_script
    - echo "    then" | tee -a allure_launch_script
    - echo "    cd ../$PARENT_BRANCH" | tee -a allure_launch_script
    - echo "    LAST_MODIFIED_FOLDER=\$(ls -ct | head -n1)" | tee -a allure_launch_script
    - echo "    cd ../$ESCAPED_BRANCH/$SDK_VERSION" | tee -a allure_launch_script
    - echo "    cp -r ../../$PARENT_BRANCH/\$LAST_MODIFIED_FOLDER/allure-report/history ./history;" | tee -a allure_launch_script
    - echo "  else" | tee -a allure_launch_script
    - echo "    cp -r \$LAST_MODIFIED_FOLDER/allure-report/history $SDK_VERSION/history;" | tee -a allure_launch_script
    - echo "  fi;" | tee -a allure_launch_script
    
    #categories.json is usefull to define the pattern of the tests states.
    #ex
    #[
    #  {
    #    "name": "Ignored tests", 
    #    "matchedStatuses": ["skipped"] 
    #  },
    #  {
    #    "name": "Infrastructure problems",
    #    "matchedStatuses": ["broken", "failed"],
    #    "messageRegex": ".*bye-bye.*" 
    #  },
    #  {
    #    "name": "Outdated tests",
    #    "matchedStatuses": ["broken"],
    #    "traceRegex": ".*FileNotFoundException.*"
    #  },
    #  {
    #    "name": "Product defects",
    #    "matchedStatuses": ["failed"]
    #  },
    #  {
    #     "name": "Test defects",
    #     "matchedStatuses": ["broken"]
    #  }
    #]
    #we move the BCUnit report, categories.json and evironment.properties to the desired folder to prepare allure report generation
    
    - echo "  cd $SDK_VERSION && cp ../../categories.json categories.json;" | tee -a allure_launch_script
    - echo "fi || true" | tee -a allure_launch_script
    - echo "mv ../../environment.properties . && mv ../../BCUnit* ." | tee -a allure_launch_script
    
    #we use the uploaded version of allure on parent directory because the allure version in repos is too old (TO DO auto install new version properly)
    - echo "~/allure-2.10.0/bin/allure generate --clean ." | tee -a allure_launch_script
    - cat allure_launch_script
    - chmod u+x allure_launch_script
    
    #upload of the files
    - rsync -rlv environment.properties allure_launch_script BCUnit* $DEPLOY_SERVER:$DEPLOY_TESTS_DIRECTORY
    
    #remote launch of allure_launch_script declared above
    #DEPLOY_TESTS_DIRECTORY = allure_tests_reports
    #Double quotes are needed because simple quotes doesn't eveluate the env var before sending the command to the server
    - ssh $DEPLOY_SERVER "cd $DEPLOY_TESTS_DIRECTORY && ./allure_launch_script"
    
    #Need to determine how the allure server will be launched. (ie one per folder or one for all folders)
    #TODO think about deletion of oldest reports, or compression