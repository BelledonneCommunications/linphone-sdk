wait-cache-synchro-rocky8:
  extends: .wait-cache-synchro
  variables:
    BUILD_SUBTYPE: rocky8
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SKIP_LINUX == null
    - !reference [.wait-cache-synchro, rules]

recache-rocky8:
  extends: .recache-update-cache
  image: !reference [.rocky8_image_version, image]

#Build template to use in other job scripts without having to copy same code
#format = .className: &referenceName
#Use = "<< *referenceName" to use the template ("-*" in script)


.factorize_rocky8: &docker_image_needs_platform_runner_tag_dev_toolset
  tags: [ "docker-test" ]
  image: !reference [.rocky8_image_version, image]
  needs:
    - rocky8-ninja-gcc
  variables:
    PLATFORM: linux-rocky8


#################################################
# Makefile
#################################################


rocky8-makefile-gcc:
  tags: [ "docker" ]
  image: !reference [.rocky8_image_version, image]
  variables:
    CMAKE_GENERATOR: Unix Makefiles
    #Only used to overwrite value set by .set_parallel_level.yml
    #ADDITIONAL_BUILD_OPTIONS: -j[jobs]
    CC: gcc
    CXX: g++
  extends: .linux-desktop


#################################################
# Ninja
#################################################


rocky8-ninja-gcc:
  tags: [ "docker" ]
  image: !reference [.rocky8_image_version, image]
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "schedule" && $DOCKER_UPDATE == null && $SKIP_LINUX == null
  variables:
    CMAKE_GENERATOR: Ninja
    CC: gcc
    CXX: g++
    CMAKE_OPTIONS: -DENABLE_EXAMPLE_PLUGIN=ON -DENABLE_CXX_WRAPPER=ON -DENABLE_LDAP=ON
    CMAKE_SANITIZER_OPTIONS: -DCMAKE_BUILD_TYPE=Debug -DENABLE_SANITIZER=ON -DOPTIMIZE_SANITIZED_BUILD=ON
  extends: .linux-desktop
  needs:
    - wait-cache-synchro-rocky8

rocky8-ninja-gcc-tunnel-pq-h264-ekt:
  variables:
    CMAKE_OPTIONS: -DENABLE_LDAP=ON -DENABLE_NON_FREE_FEATURES=ON -DENABLE_OPENH264=ON -DENABLE_PQCRYPTO=ON -DENABLE_UNIT_TESTS=ON -DENABLE_TUNNEL=ON -DOPENSSL_ROOT_DIR=/usr/local -DENABLE_EKT_SERVER_PLUGIN=ON -DENABLE_CXX_WRAPPER=ON
  extends: rocky8-ninja-gcc

#################################################
# TESTS
#################################################


bctoolbox-rocky8-test:
  extends: .test-bctoolbox
  <<: *docker_image_needs_platform_runner_tag_dev_toolset

bctoolbox-rocky8-test-mr:
  extends: .test-bctoolbox-mr
  <<: *docker_image_needs_platform_runner_tag_dev_toolset

pqc-rocky8-test:
  extends: .test-pqc
  <<: *docker_image_needs_platform_runner_tag_dev_toolset
  needs:
    - rocky8-ninja-gcc-tunnel-pq-h264-ekt

# pqc-rocky8-test-mr:
#  extends: .test-pqc-mr
#  <<: *docker_image_needs_platform_runner_tag_dev_toolset
#  needs:
#    - rocky8-ninja-gcc-tunnel-pq-h264-ekt

belr-rocky8-test:
  extends: .test-belr
  <<: *docker_image_needs_platform_runner_tag_dev_toolset

belr-rocky8-test-mr:
  extends: .test-belr-mr
  <<: *docker_image_needs_platform_runner_tag_dev_toolset

belcard-rocky8-test:
  extends: .test-belcard
  <<: *docker_image_needs_platform_runner_tag_dev_toolset

belcard-rocky8-test-mr:
  extends: .test-belcard-mr
  <<: *docker_image_needs_platform_runner_tag_dev_toolset

bzrtp-rocky8-test:
  extends: .test-bzrtp
  <<: *docker_image_needs_platform_runner_tag_dev_toolset

bzrtp-rocky8-test-mr:
  extends: .test-bzrtp-mr
  <<: *docker_image_needs_platform_runner_tag_dev_toolset

ortp-rocky8-test:
  extends: .test-ortp
  <<: *docker_image_needs_platform_runner_tag_dev_toolset

ortp-rocky8-test-mr:
  extends: .test-ortp-mr
  <<: *docker_image_needs_platform_runner_tag_dev_toolset

.factorize_bs_rocky8: &docker_image_needs_tag_platform_devtoolset_bs
  image: !reference [.rocky8_image_version, image]
  needs:
    - rocky8-ninja-gcc
  #different runner needed because belle-sip_tester can't work in parallel (dialog test suite is crashing randomly)
  tags: [ "docker-sequential" ]
  variables:
    PLATFORM: linux-rocky8

bellesip-rocky8-test:
  extends: .test-bellesip
  <<: *docker_image_needs_tag_platform_devtoolset_bs

# bellesip-rocky8-test-mr:
#   extends: .test-bellesip-mr
#   <<: *docker_image_needs_tag_platform_devtoolset_bs

.factorize_ms2_rocky8: &docker_image_needs_platform_devtoolset_ms
  image: !reference [.rocky8_test_libl_image_version, image]
  needs:
    - rocky8-ninja-gcc
  variables:
    PLATFORM: linux-rocky8

mediastreamer-rocky8-test:
  extends: .test-mediastreamer
  <<: *docker_image_needs_platform_devtoolset_ms

# mediastreamer-rocky8-test-mr:
#   extends: .test-mediastreamer-mr
#   <<: *docker_image_needs_platform_devtoolset_ms

mediastreamer-rocky8-test-h264-mr:
  extends: .test-mediastreamer-mr
  image: !reference [.rocky8_test_libl_image_version, image]
  needs:
    - rocky8-ninja-gcc-tunnel-pq-h264-ekt
  variables:
    PLATFORM: linux-rocky8


.factorize_liblinphone_rocky8: &docker_image_needs_platform_devtoolset_libl
  image: !reference [.rocky8_test_libl_image_version, image]
  needs:
    - rocky8-ninja-gcc
  variables:
    PLATFORM: linux-rocky8

liblinphone-rocky8-test:
  extends: .test-liblinphone
  <<: *docker_image_needs_platform_devtoolset_libl

liblinphone-rocky8-test-pq-h264-ekt:
  extends:
    - .test-liblinphone-tunnel-pq
  image: !reference [.rocky8_test_libl_image_version, image]
  needs:
    - rocky8-ninja-gcc-tunnel-pq-h264-ekt
  variables:
    PLATFORM: linux-rocky8

liblinphone-rocky8-test-mr:
  extends: .test-liblinphone-mr
  <<: *docker_image_needs_platform_devtoolset_libl

liblinphone-rocky8-test-mr-pq-h264-ekt:
  extends:
    - .test-liblinphone-tunnel-pq-mr
  image: !reference [.rocky8_test_libl_image_version, image]
  needs:
    - rocky8-ninja-gcc-tunnel-pq-h264-ekt
  variables:
    PLATFORM: linux-rocky8

liblinphone-rocky8-test-force:
  extends: .test-liblinphone
  <<: *docker_image_needs_platform_devtoolset_libl
  rules:
    - if: $ENABLE_TESTS_LIBLINPHONE != null
