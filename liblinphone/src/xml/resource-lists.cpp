// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//

#if __clang__ || __GNUC__ >= 4
	#pragma GCC diagnostic push
	#pragma GCC diagnostic ignored "-Wsuggest-override"
#endif

//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "resource-lists.h"

namespace resource_lists
{
  // ListType
  // 

  const ListType::Display_nameOptional& ListType::
  getDisplay_name () const
  {
    return this->display_name_;
  }

  ListType::Display_nameOptional& ListType::
  getDisplay_name ()
  {
    return this->display_name_;
  }

  void ListType::
  setDisplay_name (const Display_nameType& x)
  {
    this->display_name_.set (x);
  }

  void ListType::
  setDisplay_name (const Display_nameOptional& x)
  {
    this->display_name_ = x;
  }

  void ListType::
  setDisplay_name (::std::unique_ptr< Display_nameType > x)
  {
    this->display_name_.set (std::move (x));
  }

  const ListType::ListSequence& ListType::
  getList () const
  {
    return this->list_;
  }

  ListType::ListSequence& ListType::
  getList ()
  {
    return this->list_;
  }

  void ListType::
  setList (const ListSequence& s)
  {
    this->list_ = s;
  }

  const ListType::ExternalSequence& ListType::
  getExternal () const
  {
    return this->external_;
  }

  ListType::ExternalSequence& ListType::
  getExternal ()
  {
    return this->external_;
  }

  void ListType::
  setExternal (const ExternalSequence& s)
  {
    this->external_ = s;
  }

  const ListType::EntrySequence& ListType::
  getEntry () const
  {
    return this->entry_;
  }

  ListType::EntrySequence& ListType::
  getEntry ()
  {
    return this->entry_;
  }

  void ListType::
  setEntry (const EntrySequence& s)
  {
    this->entry_ = s;
  }

  const ListType::Entry_refSequence& ListType::
  getEntry_ref () const
  {
    return this->entry_ref_;
  }

  ListType::Entry_refSequence& ListType::
  getEntry_ref ()
  {
    return this->entry_ref_;
  }

  void ListType::
  setEntry_ref (const Entry_refSequence& s)
  {
    this->entry_ref_ = s;
  }

  const ListType::AnySequence& ListType::
  getAny () const
  {
    return this->any_;
  }

  ListType::AnySequence& ListType::
  getAny ()
  {
    return this->any_;
  }

  void ListType::
  setAny (const AnySequence& s)
  {
    this->any_ = s;
  }

  const ListType::NameOptional& ListType::
  getName () const
  {
    return this->name_;
  }

  ListType::NameOptional& ListType::
  getName ()
  {
    return this->name_;
  }

  void ListType::
  setName (const NameType& x)
  {
    this->name_.set (x);
  }

  void ListType::
  setName (const NameOptional& x)
  {
    this->name_ = x;
  }

  void ListType::
  setName (::std::unique_ptr< NameType > x)
  {
    this->name_.set (std::move (x));
  }

  const ListType::AnyAttributeSet& ListType::
  getAnyAttribute () const
  {
    return this->any_attribute_;
  }

  ListType::AnyAttributeSet& ListType::
  getAnyAttribute ()
  {
    return this->any_attribute_;
  }

  void ListType::
  setAnyAttribute (const AnyAttributeSet& s)
  {
    this->any_attribute_ = s;
  }

  const ::xercesc::DOMDocument& ListType::
  getDomDocument () const
  {
    return *this->dom_document_;
  }

  ::xercesc::DOMDocument& ListType::
  getDomDocument ()
  {
    return *this->dom_document_;
  }


  // EntryType
  // 

  const EntryType::Display_nameOptional& EntryType::
  getDisplay_name () const
  {
    return this->display_name_;
  }

  EntryType::Display_nameOptional& EntryType::
  getDisplay_name ()
  {
    return this->display_name_;
  }

  void EntryType::
  setDisplay_name (const Display_nameType& x)
  {
    this->display_name_.set (x);
  }

  void EntryType::
  setDisplay_name (const Display_nameOptional& x)
  {
    this->display_name_ = x;
  }

  void EntryType::
  setDisplay_name (::std::unique_ptr< Display_nameType > x)
  {
    this->display_name_.set (std::move (x));
  }

  const EntryType::AnySequence& EntryType::
  getAny () const
  {
    return this->any_;
  }

  EntryType::AnySequence& EntryType::
  getAny ()
  {
    return this->any_;
  }

  void EntryType::
  setAny (const AnySequence& s)
  {
    this->any_ = s;
  }

  const EntryType::UriType& EntryType::
  getUri () const
  {
    return this->uri_.get ();
  }

  EntryType::UriType& EntryType::
  getUri ()
  {
    return this->uri_.get ();
  }

  void EntryType::
  setUri (const UriType& x)
  {
    this->uri_.set (x);
  }

  void EntryType::
  setUri (::std::unique_ptr< UriType > x)
  {
    this->uri_.set (std::move (x));
  }

  ::std::unique_ptr< EntryType::UriType > EntryType::
  detachUri ()
  {
    return this->uri_.detach ();
  }

  const EntryType::AnyAttributeSet& EntryType::
  getAnyAttribute () const
  {
    return this->any_attribute_;
  }

  EntryType::AnyAttributeSet& EntryType::
  getAnyAttribute ()
  {
    return this->any_attribute_;
  }

  void EntryType::
  setAnyAttribute (const AnyAttributeSet& s)
  {
    this->any_attribute_ = s;
  }

  const ::xercesc::DOMDocument& EntryType::
  getDomDocument () const
  {
    return *this->dom_document_;
  }

  ::xercesc::DOMDocument& EntryType::
  getDomDocument ()
  {
    return *this->dom_document_;
  }


  // Entry_refType
  // 

  const Entry_refType::Display_nameOptional& Entry_refType::
  getDisplay_name () const
  {
    return this->display_name_;
  }

  Entry_refType::Display_nameOptional& Entry_refType::
  getDisplay_name ()
  {
    return this->display_name_;
  }

  void Entry_refType::
  setDisplay_name (const Display_nameType& x)
  {
    this->display_name_.set (x);
  }

  void Entry_refType::
  setDisplay_name (const Display_nameOptional& x)
  {
    this->display_name_ = x;
  }

  void Entry_refType::
  setDisplay_name (::std::unique_ptr< Display_nameType > x)
  {
    this->display_name_.set (std::move (x));
  }

  const Entry_refType::AnySequence& Entry_refType::
  getAny () const
  {
    return this->any_;
  }

  Entry_refType::AnySequence& Entry_refType::
  getAny ()
  {
    return this->any_;
  }

  void Entry_refType::
  setAny (const AnySequence& s)
  {
    this->any_ = s;
  }

  const Entry_refType::RefType& Entry_refType::
  getRef () const
  {
    return this->ref_.get ();
  }

  Entry_refType::RefType& Entry_refType::
  getRef ()
  {
    return this->ref_.get ();
  }

  void Entry_refType::
  setRef (const RefType& x)
  {
    this->ref_.set (x);
  }

  void Entry_refType::
  setRef (::std::unique_ptr< RefType > x)
  {
    this->ref_.set (std::move (x));
  }

  ::std::unique_ptr< Entry_refType::RefType > Entry_refType::
  detachRef ()
  {
    return this->ref_.detach ();
  }

  const Entry_refType::AnyAttributeSet& Entry_refType::
  getAnyAttribute () const
  {
    return this->any_attribute_;
  }

  Entry_refType::AnyAttributeSet& Entry_refType::
  getAnyAttribute ()
  {
    return this->any_attribute_;
  }

  void Entry_refType::
  setAnyAttribute (const AnyAttributeSet& s)
  {
    this->any_attribute_ = s;
  }

  const ::xercesc::DOMDocument& Entry_refType::
  getDomDocument () const
  {
    return *this->dom_document_;
  }

  ::xercesc::DOMDocument& Entry_refType::
  getDomDocument ()
  {
    return *this->dom_document_;
  }


  // ExternalType
  // 

  const ExternalType::Display_nameOptional& ExternalType::
  getDisplay_name () const
  {
    return this->display_name_;
  }

  ExternalType::Display_nameOptional& ExternalType::
  getDisplay_name ()
  {
    return this->display_name_;
  }

  void ExternalType::
  setDisplay_name (const Display_nameType& x)
  {
    this->display_name_.set (x);
  }

  void ExternalType::
  setDisplay_name (const Display_nameOptional& x)
  {
    this->display_name_ = x;
  }

  void ExternalType::
  setDisplay_name (::std::unique_ptr< Display_nameType > x)
  {
    this->display_name_.set (std::move (x));
  }

  const ExternalType::AnySequence& ExternalType::
  getAny () const
  {
    return this->any_;
  }

  ExternalType::AnySequence& ExternalType::
  getAny ()
  {
    return this->any_;
  }

  void ExternalType::
  setAny (const AnySequence& s)
  {
    this->any_ = s;
  }

  const ExternalType::AnchorOptional& ExternalType::
  getAnchor () const
  {
    return this->anchor_;
  }

  ExternalType::AnchorOptional& ExternalType::
  getAnchor ()
  {
    return this->anchor_;
  }

  void ExternalType::
  setAnchor (const AnchorType& x)
  {
    this->anchor_.set (x);
  }

  void ExternalType::
  setAnchor (const AnchorOptional& x)
  {
    this->anchor_ = x;
  }

  void ExternalType::
  setAnchor (::std::unique_ptr< AnchorType > x)
  {
    this->anchor_.set (std::move (x));
  }

  const ExternalType::AnyAttributeSet& ExternalType::
  getAnyAttribute () const
  {
    return this->any_attribute_;
  }

  ExternalType::AnyAttributeSet& ExternalType::
  getAnyAttribute ()
  {
    return this->any_attribute_;
  }

  void ExternalType::
  setAnyAttribute (const AnyAttributeSet& s)
  {
    this->any_attribute_ = s;
  }

  const ::xercesc::DOMDocument& ExternalType::
  getDomDocument () const
  {
    return *this->dom_document_;
  }

  ::xercesc::DOMDocument& ExternalType::
  getDomDocument ()
  {
    return *this->dom_document_;
  }


  // Display_nameType
  // 

  const Display_nameType::LangOptional& Display_nameType::
  getLang () const
  {
    return this->lang_;
  }

  Display_nameType::LangOptional& Display_nameType::
  getLang ()
  {
    return this->lang_;
  }

  void Display_nameType::
  setLang (const LangType& x)
  {
    this->lang_.set (x);
  }

  void Display_nameType::
  setLang (const LangOptional& x)
  {
    this->lang_ = x;
  }

  void Display_nameType::
  setLang (::std::unique_ptr< LangType > x)
  {
    this->lang_.set (std::move (x));
  }


  // List
  // 


  // Display_name
  // 


  // Resource_lists
  // 

  const Resource_lists::ListSequence& Resource_lists::
  getList () const
  {
    return this->list_;
  }

  Resource_lists::ListSequence& Resource_lists::
  getList ()
  {
    return this->list_;
  }

  void Resource_lists::
  setList (const ListSequence& s)
  {
    this->list_ = s;
  }
}

#include <xsd/cxx/xml/dom/wildcard-source.hxx>

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace resource_lists
{
  // ListType
  //

  ListType::
  ListType ()
  : ::xml_schema::Type (),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    display_name_ (this),
    list_ (this),
    external_ (this),
    entry_ (this),
    entry_ref_ (this),
    any_ (this->getDomDocument ()),
    name_ (this),
    any_attribute_ (this->getDomDocument ())
  {
  }

  ListType::
  ListType (const ListType& x,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    display_name_ (x.display_name_, f, this),
    list_ (x.list_, f, this),
    external_ (x.external_, f, this),
    entry_ (x.entry_, f, this),
    entry_ref_ (x.entry_ref_, f, this),
    any_ (x.any_, this->getDomDocument ()),
    name_ (x.name_, f, this),
    any_attribute_ (x.any_attribute_, this->getDomDocument ())
  {
  }

  ListType::
  ListType (const ::xercesc::DOMElement& e,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    display_name_ (this),
    list_ (this),
    external_ (this),
    entry_ (this),
    entry_ref_ (this),
    any_ (this->getDomDocument ()),
    name_ (this),
    any_attribute_ (this->getDomDocument ())
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void ListType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // display-name
      //
      if (n.name () == "display-name" && n.namespace_ () == "urn:ietf:params:xml:ns:resource-lists")
      {
        ::std::unique_ptr< Display_nameType > r (
          Display_nameTraits::create (i, f, this));

        if (!this->display_name_)
        {
          this->display_name_.set (::std::move (r));
          continue;
        }
      }

      // list
      //
      if (n.name () == "list" && n.namespace_ () == "urn:ietf:params:xml:ns:resource-lists")
      {
        ::std::unique_ptr< ListType1 > r (
          ListTraits::create (i, f, this));

        this->list_.push_back (::std::move (r));
        continue;
      }

      // external
      //
      if (n.name () == "external" && n.namespace_ () == "urn:ietf:params:xml:ns:resource-lists")
      {
        ::std::unique_ptr< ExternalType > r (
          ExternalTraits::create (i, f, this));

        this->external_.push_back (::std::move (r));
        continue;
      }

      // entry
      //
      if (n.name () == "entry" && n.namespace_ () == "urn:ietf:params:xml:ns:resource-lists")
      {
        ::std::unique_ptr< EntryType > r (
          EntryTraits::create (i, f, this));

        this->entry_.push_back (::std::move (r));
        continue;
      }

      // entry-ref
      //
      if (n.name () == "entry-ref" && n.namespace_ () == "urn:ietf:params:xml:ns:resource-lists")
      {
        ::std::unique_ptr< Entry_refType > r (
          Entry_refTraits::create (i, f, this));

        this->entry_ref_.push_back (::std::move (r));
        continue;
      }

      // any
      //
      if ((!n.namespace_ ().empty () && n.namespace_ () != "urn:ietf:params:xml:ns:resource-lists"))
      {
        ::xercesc::DOMElement* r (
          static_cast< ::xercesc::DOMElement* > (
            this->getDomDocument ().importNode (
              const_cast< ::xercesc::DOMElement* > (&i), true)));
        this->any_.push_back (r);
        continue;
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "name" && n.namespace_ ().empty ())
      {
        this->name_.set (NameTraits::create (i, f, this));
        continue;
      }

      // any_attribute
      //
      if ((!n.namespace_ ().empty () &&
           n.namespace_ () != "urn:ietf:params:xml:ns:resource-lists" &&
           n.namespace_ () != ::xsd::cxx::xml::bits::xmlns_namespace< char > () &&
           n.namespace_ () != ::xsd::cxx::xml::bits::xsi_namespace< char > ()))
      {
        ::xercesc::DOMAttr* r (
          static_cast< ::xercesc::DOMAttr* > (
            this->getDomDocument ().importNode (
              const_cast< ::xercesc::DOMAttr* > (&i), true)));
        this->any_attribute_ .insert (r);
        continue;
      }
    }
  }

  ListType* ListType::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class ListType (*this, f, c);
  }

  ListType& ListType::
  operator= (const ListType& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->display_name_ = x.display_name_;
      this->list_ = x.list_;
      this->external_ = x.external_;
      this->entry_ = x.entry_;
      this->entry_ref_ = x.entry_ref_;
      this->any_ = x.any_;
      this->name_ = x.name_;
      this->any_attribute_ = x.any_attribute_;
    }

    return *this;
  }

  ListType::
  ~ListType ()
  {
  }

  // EntryType
  //

  EntryType::
  EntryType (const UriType& uri)
  : ::xml_schema::Type (),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    display_name_ (this),
    any_ (this->getDomDocument ()),
    uri_ (uri, this),
    any_attribute_ (this->getDomDocument ())
  {
  }

  EntryType::
  EntryType (const EntryType& x,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    display_name_ (x.display_name_, f, this),
    any_ (x.any_, this->getDomDocument ()),
    uri_ (x.uri_, f, this),
    any_attribute_ (x.any_attribute_, this->getDomDocument ())
  {
  }

  EntryType::
  EntryType (const ::xercesc::DOMElement& e,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    display_name_ (this),
    any_ (this->getDomDocument ()),
    uri_ (this),
    any_attribute_ (this->getDomDocument ())
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void EntryType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // display-name
      //
      if (n.name () == "display-name" && n.namespace_ () == "urn:ietf:params:xml:ns:resource-lists")
      {
        ::std::unique_ptr< Display_nameType > r (
          Display_nameTraits::create (i, f, this));

        if (!this->display_name_)
        {
          this->display_name_.set (::std::move (r));
          continue;
        }
      }

      // any
      //
      if ((!n.namespace_ ().empty () && n.namespace_ () != "urn:ietf:params:xml:ns:resource-lists"))
      {
        ::xercesc::DOMElement* r (
          static_cast< ::xercesc::DOMElement* > (
            this->getDomDocument ().importNode (
              const_cast< ::xercesc::DOMElement* > (&i), true)));
        this->any_.push_back (r);
        continue;
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "uri" && n.namespace_ ().empty ())
      {
        this->uri_.set (UriTraits::create (i, f, this));
        continue;
      }

      // any_attribute
      //
      if ((!n.namespace_ ().empty () &&
           n.namespace_ () != "urn:ietf:params:xml:ns:resource-lists" &&
           n.namespace_ () != ::xsd::cxx::xml::bits::xmlns_namespace< char > () &&
           n.namespace_ () != ::xsd::cxx::xml::bits::xsi_namespace< char > ()))
      {
        ::xercesc::DOMAttr* r (
          static_cast< ::xercesc::DOMAttr* > (
            this->getDomDocument ().importNode (
              const_cast< ::xercesc::DOMAttr* > (&i), true)));
        this->any_attribute_ .insert (r);
        continue;
      }
    }

    if (!uri_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "uri",
        "");
    }
  }

  EntryType* EntryType::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class EntryType (*this, f, c);
  }

  EntryType& EntryType::
  operator= (const EntryType& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->display_name_ = x.display_name_;
      this->any_ = x.any_;
      this->uri_ = x.uri_;
      this->any_attribute_ = x.any_attribute_;
    }

    return *this;
  }

  EntryType::
  ~EntryType ()
  {
  }

  // Entry_refType
  //

  Entry_refType::
  Entry_refType (const RefType& ref)
  : ::xml_schema::Type (),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    display_name_ (this),
    any_ (this->getDomDocument ()),
    ref_ (ref, this),
    any_attribute_ (this->getDomDocument ())
  {
  }

  Entry_refType::
  Entry_refType (const Entry_refType& x,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    display_name_ (x.display_name_, f, this),
    any_ (x.any_, this->getDomDocument ()),
    ref_ (x.ref_, f, this),
    any_attribute_ (x.any_attribute_, this->getDomDocument ())
  {
  }

  Entry_refType::
  Entry_refType (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    display_name_ (this),
    any_ (this->getDomDocument ()),
    ref_ (this),
    any_attribute_ (this->getDomDocument ())
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void Entry_refType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // display-name
      //
      if (n.name () == "display-name" && n.namespace_ () == "urn:ietf:params:xml:ns:resource-lists")
      {
        ::std::unique_ptr< Display_nameType > r (
          Display_nameTraits::create (i, f, this));

        if (!this->display_name_)
        {
          this->display_name_.set (::std::move (r));
          continue;
        }
      }

      // any
      //
      if ((!n.namespace_ ().empty () && n.namespace_ () != "urn:ietf:params:xml:ns:resource-lists"))
      {
        ::xercesc::DOMElement* r (
          static_cast< ::xercesc::DOMElement* > (
            this->getDomDocument ().importNode (
              const_cast< ::xercesc::DOMElement* > (&i), true)));
        this->any_.push_back (r);
        continue;
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "ref" && n.namespace_ ().empty ())
      {
        this->ref_.set (RefTraits::create (i, f, this));
        continue;
      }

      // any_attribute
      //
      if ((!n.namespace_ ().empty () &&
           n.namespace_ () != "urn:ietf:params:xml:ns:resource-lists" &&
           n.namespace_ () != ::xsd::cxx::xml::bits::xmlns_namespace< char > () &&
           n.namespace_ () != ::xsd::cxx::xml::bits::xsi_namespace< char > ()))
      {
        ::xercesc::DOMAttr* r (
          static_cast< ::xercesc::DOMAttr* > (
            this->getDomDocument ().importNode (
              const_cast< ::xercesc::DOMAttr* > (&i), true)));
        this->any_attribute_ .insert (r);
        continue;
      }
    }

    if (!ref_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "ref",
        "");
    }
  }

  Entry_refType* Entry_refType::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class Entry_refType (*this, f, c);
  }

  Entry_refType& Entry_refType::
  operator= (const Entry_refType& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->display_name_ = x.display_name_;
      this->any_ = x.any_;
      this->ref_ = x.ref_;
      this->any_attribute_ = x.any_attribute_;
    }

    return *this;
  }

  Entry_refType::
  ~Entry_refType ()
  {
  }

  // ExternalType
  //

  ExternalType::
  ExternalType ()
  : ::xml_schema::Type (),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    display_name_ (this),
    any_ (this->getDomDocument ()),
    anchor_ (this),
    any_attribute_ (this->getDomDocument ())
  {
  }

  ExternalType::
  ExternalType (const ExternalType& x,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    display_name_ (x.display_name_, f, this),
    any_ (x.any_, this->getDomDocument ()),
    anchor_ (x.anchor_, f, this),
    any_attribute_ (x.any_attribute_, this->getDomDocument ())
  {
  }

  ExternalType::
  ExternalType (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    display_name_ (this),
    any_ (this->getDomDocument ()),
    anchor_ (this),
    any_attribute_ (this->getDomDocument ())
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void ExternalType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // display-name
      //
      if (n.name () == "display-name" && n.namespace_ () == "urn:ietf:params:xml:ns:resource-lists")
      {
        ::std::unique_ptr< Display_nameType > r (
          Display_nameTraits::create (i, f, this));

        if (!this->display_name_)
        {
          this->display_name_.set (::std::move (r));
          continue;
        }
      }

      // any
      //
      if ((!n.namespace_ ().empty () && n.namespace_ () != "urn:ietf:params:xml:ns:resource-lists"))
      {
        ::xercesc::DOMElement* r (
          static_cast< ::xercesc::DOMElement* > (
            this->getDomDocument ().importNode (
              const_cast< ::xercesc::DOMElement* > (&i), true)));
        this->any_.push_back (r);
        continue;
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "anchor" && n.namespace_ ().empty ())
      {
        this->anchor_.set (AnchorTraits::create (i, f, this));
        continue;
      }

      // any_attribute
      //
      if ((!n.namespace_ ().empty () &&
           n.namespace_ () != "urn:ietf:params:xml:ns:resource-lists" &&
           n.namespace_ () != ::xsd::cxx::xml::bits::xmlns_namespace< char > () &&
           n.namespace_ () != ::xsd::cxx::xml::bits::xsi_namespace< char > ()))
      {
        ::xercesc::DOMAttr* r (
          static_cast< ::xercesc::DOMAttr* > (
            this->getDomDocument ().importNode (
              const_cast< ::xercesc::DOMAttr* > (&i), true)));
        this->any_attribute_ .insert (r);
        continue;
      }
    }
  }

  ExternalType* ExternalType::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class ExternalType (*this, f, c);
  }

  ExternalType& ExternalType::
  operator= (const ExternalType& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->display_name_ = x.display_name_;
      this->any_ = x.any_;
      this->anchor_ = x.anchor_;
      this->any_attribute_ = x.any_attribute_;
    }

    return *this;
  }

  ExternalType::
  ~ExternalType ()
  {
  }

  // Display_nameType
  //

  Display_nameType::
  Display_nameType ()
  : ::xml_schema::String (),
    lang_ (this)
  {
  }

  Display_nameType::
  Display_nameType (const char* _xsd_String_base)
  : ::xml_schema::String (_xsd_String_base),
    lang_ (this)
  {
  }

  Display_nameType::
  Display_nameType (const ::std::string& _xsd_String_base)
  : ::xml_schema::String (_xsd_String_base),
    lang_ (this)
  {
  }

  Display_nameType::
  Display_nameType (const ::xml_schema::String& _xsd_String_base)
  : ::xml_schema::String (_xsd_String_base),
    lang_ (this)
  {
  }

  Display_nameType::
  Display_nameType (const Display_nameType& x,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
  : ::xml_schema::String (x, f, c),
    lang_ (x.lang_, f, this)
  {
  }

  Display_nameType::
  Display_nameType (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
  : ::xml_schema::String (e, f | ::xml_schema::Flags::base, c),
    lang_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
      this->parse (p, f);
    }
  }

  void Display_nameType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "lang" && n.namespace_ () == "http://www.w3.org/XML/1998/namespace")
      {
        this->lang_.set (LangTraits::create (i, f, this));
        continue;
      }
    }
  }

  Display_nameType* Display_nameType::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class Display_nameType (*this, f, c);
  }

  Display_nameType& Display_nameType::
  operator= (const Display_nameType& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::String& > (*this) = x;
      this->lang_ = x.lang_;
    }

    return *this;
  }

  Display_nameType::
  ~Display_nameType ()
  {
  }

  // List
  //

  List::
  List ()
  : ::resource_lists::ListType ()
  {
  }

  List::
  List (const List& x,
        ::xml_schema::Flags f,
        ::xml_schema::Container* c)
  : ::resource_lists::ListType (x, f, c)
  {
  }

  List::
  List (const ::xercesc::DOMElement& e,
        ::xml_schema::Flags f,
        ::xml_schema::Container* c)
  : ::resource_lists::ListType (e, f, c)
  {
  }

  List* List::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class List (*this, f, c);
  }

  List::
  ~List ()
  {
  }

  // Display_name
  //

  Display_name::
  Display_name ()
  : ::resource_lists::Display_nameType ()
  {
  }

  Display_name::
  Display_name (const char* _xsd_String_base)
  : ::resource_lists::Display_nameType (_xsd_String_base)
  {
  }

  Display_name::
  Display_name (const ::std::string& _xsd_String_base)
  : ::resource_lists::Display_nameType (_xsd_String_base)
  {
  }

  Display_name::
  Display_name (const ::xml_schema::String& _xsd_String_base)
  : ::resource_lists::Display_nameType (_xsd_String_base)
  {
  }

  Display_name::
  Display_name (const Display_name& x,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
  : ::resource_lists::Display_nameType (x, f, c)
  {
  }

  Display_name::
  Display_name (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
  : ::resource_lists::Display_nameType (e, f, c)
  {
  }

  Display_name* Display_name::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class Display_name (*this, f, c);
  }

  Display_name::
  ~Display_name ()
  {
  }

  // Resource_lists
  //

  Resource_lists::
  Resource_lists ()
  : ::xml_schema::Type (),
    list_ (this)
  {
  }

  Resource_lists::
  Resource_lists (const Resource_lists& x,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    list_ (x.list_, f, this)
  {
  }

  Resource_lists::
  Resource_lists (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    list_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void Resource_lists::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // list
      //
      if (n.name () == "list" && n.namespace_ () == "urn:ietf:params:xml:ns:resource-lists")
      {
        ::std::unique_ptr< ListType > r (
          ListTraits::create (i, f, this));

        this->list_.push_back (::std::move (r));
        continue;
      }

      break;
    }
  }

  Resource_lists* Resource_lists::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class Resource_lists (*this, f, c);
  }

  Resource_lists& Resource_lists::
  operator= (const Resource_lists& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->list_ = x.list_;
    }

    return *this;
  }

  Resource_lists::
  ~Resource_lists ()
  {
  }
}

#include <ostream>

namespace resource_lists
{
  ::std::ostream&
  operator<< (::std::ostream& o, const ListType& i)
  {
    if (i.getDisplay_name ())
    {
      o << ::std::endl << "display-name: " << *i.getDisplay_name ();
    }

    for (ListType::ListConstIterator
         b (i.getList ().begin ()), e (i.getList ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "list: " << *b;
    }

    for (ListType::ExternalConstIterator
         b (i.getExternal ().begin ()), e (i.getExternal ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "external: " << *b;
    }

    for (ListType::EntryConstIterator
         b (i.getEntry ().begin ()), e (i.getEntry ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "entry: " << *b;
    }

    for (ListType::Entry_refConstIterator
         b (i.getEntry_ref ().begin ()), e (i.getEntry_ref ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "entry-ref: " << *b;
    }

    if (i.getName ())
    {
      o << ::std::endl << "name: " << *i.getName ();
    }

    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const EntryType& i)
  {
    if (i.getDisplay_name ())
    {
      o << ::std::endl << "display-name: " << *i.getDisplay_name ();
    }

    o << ::std::endl << "uri: " << i.getUri ();
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const Entry_refType& i)
  {
    if (i.getDisplay_name ())
    {
      o << ::std::endl << "display-name: " << *i.getDisplay_name ();
    }

    o << ::std::endl << "ref: " << i.getRef ();
    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const ExternalType& i)
  {
    if (i.getDisplay_name ())
    {
      o << ::std::endl << "display-name: " << *i.getDisplay_name ();
    }

    if (i.getAnchor ())
    {
      o << ::std::endl << "anchor: " << *i.getAnchor ();
    }

    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const Display_nameType& i)
  {
    o << static_cast< const ::xml_schema::String& > (i);

    if (i.getLang ())
    {
      o << ::std::endl << "lang: " << *i.getLang ();
    }

    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const List& i)
  {
    o << static_cast< const ::resource_lists::ListType& > (i);

    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const Display_name& i)
  {
    o << static_cast< const ::resource_lists::Display_nameType& > (i);

    return o;
  }

  ::std::ostream&
  operator<< (::std::ostream& o, const Resource_lists& i)
  {
    for (Resource_lists::ListConstIterator
         b (i.getList ().begin ()), e (i.getList ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "list: " << *b;
    }

    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace resource_lists
{
  ::std::unique_ptr< ::resource_lists::Resource_lists >
  parseResource_lists (const ::std::string& u,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::resource_lists::Resource_lists > (
      ::resource_lists::parseResource_lists (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::resource_lists::Resource_lists >
  parseResource_lists (const ::std::string& u,
                       ::xml_schema::ErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::resource_lists::Resource_lists > (
      ::resource_lists::parseResource_lists (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::resource_lists::Resource_lists >
  parseResource_lists (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::resource_lists::Resource_lists > (
      ::resource_lists::parseResource_lists (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::resource_lists::Resource_lists >
  parseResource_lists (::std::istream& is,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::resource_lists::parseResource_lists (isrc, f, p);
  }

  ::std::unique_ptr< ::resource_lists::Resource_lists >
  parseResource_lists (::std::istream& is,
                       ::xml_schema::ErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::resource_lists::parseResource_lists (isrc, h, f, p);
  }

  ::std::unique_ptr< ::resource_lists::Resource_lists >
  parseResource_lists (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::resource_lists::parseResource_lists (isrc, h, f, p);
  }

  ::std::unique_ptr< ::resource_lists::Resource_lists >
  parseResource_lists (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::resource_lists::parseResource_lists (isrc, f, p);
  }

  ::std::unique_ptr< ::resource_lists::Resource_lists >
  parseResource_lists (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::ErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::resource_lists::parseResource_lists (isrc, h, f, p);
  }

  ::std::unique_ptr< ::resource_lists::Resource_lists >
  parseResource_lists (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::resource_lists::parseResource_lists (isrc, h, f, p);
  }

  ::std::unique_ptr< ::resource_lists::Resource_lists >
  parseResource_lists (::xercesc::InputSource& i,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::resource_lists::Resource_lists > (
      ::resource_lists::parseResource_lists (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::resource_lists::Resource_lists >
  parseResource_lists (::xercesc::InputSource& i,
                       ::xml_schema::ErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::resource_lists::Resource_lists > (
      ::resource_lists::parseResource_lists (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::resource_lists::Resource_lists >
  parseResource_lists (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::resource_lists::Resource_lists > (
      ::resource_lists::parseResource_lists (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::resource_lists::Resource_lists >
  parseResource_lists (const ::xercesc::DOMDocument& doc,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::resource_lists::Resource_lists > (
        ::resource_lists::parseResource_lists (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "resource-lists" &&
        n.namespace_ () == "urn:ietf:params:xml:ns:resource-lists")
    {
      ::std::unique_ptr< ::resource_lists::Resource_lists > r (
        ::xsd::cxx::tree::traits< ::resource_lists::Resource_lists, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "resource-lists",
      "urn:ietf:params:xml:ns:resource-lists");
  }

  ::std::unique_ptr< ::resource_lists::Resource_lists >
  parseResource_lists (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::treeNodeKey,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "resource-lists" &&
        n.namespace_ () == "urn:ietf:params:xml:ns:resource-lists")
    {
      ::std::unique_ptr< ::resource_lists::Resource_lists > r (
        ::xsd::cxx::tree::traits< ::resource_lists::Resource_lists, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "resource-lists",
      "urn:ietf:params:xml:ns:resource-lists");
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace resource_lists
{
  void
  operator<< (::xercesc::DOMElement& e, const ListType& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // any_attribute
    //
    for (ListType::AnyAttributeConstIterator
         b (i.getAnyAttribute ().begin ()), n (i.getAnyAttribute ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMAttr* a (
        static_cast< ::xercesc::DOMAttr* > (
          e.getOwnerDocument ()->importNode (
            const_cast< ::xercesc::DOMAttr* > (&(*b)), true)));

      if (a->getLocalName () == 0)
        e.setAttributeNode (a);
      else
        e.setAttributeNodeNS (a);
    }

    // display-name
    //
    if (i.getDisplay_name ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "display-name",
          "urn:ietf:params:xml:ns:resource-lists",
          e));

      s << *i.getDisplay_name ();
    }

    // list
    //
    for (ListType::ListConstIterator
         b (i.getList ().begin ()), n (i.getList ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "list",
          "urn:ietf:params:xml:ns:resource-lists",
          e));

      s << *b;
    }

    // external
    //
    for (ListType::ExternalConstIterator
         b (i.getExternal ().begin ()), n (i.getExternal ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "external",
          "urn:ietf:params:xml:ns:resource-lists",
          e));

      s << *b;
    }

    // entry
    //
    for (ListType::EntryConstIterator
         b (i.getEntry ().begin ()), n (i.getEntry ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "entry",
          "urn:ietf:params:xml:ns:resource-lists",
          e));

      s << *b;
    }

    // entry-ref
    //
    for (ListType::Entry_refConstIterator
         b (i.getEntry_ref ().begin ()), n (i.getEntry_ref ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "entry-ref",
          "urn:ietf:params:xml:ns:resource-lists",
          e));

      s << *b;
    }

    // any
    //
    for (ListType::AnyConstIterator
         b (i.getAny ().begin ()), n (i.getAny ().end ());
         b != n; ++b)
    {
      e.appendChild (
        e.getOwnerDocument ()->importNode (
          const_cast< ::xercesc::DOMElement* > (&(*b)), true));
    }

    // name
    //
    if (i.getName ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "name",
          e));

      a << *i.getName ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const EntryType& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // any_attribute
    //
    for (EntryType::AnyAttributeConstIterator
         b (i.getAnyAttribute ().begin ()), n (i.getAnyAttribute ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMAttr* a (
        static_cast< ::xercesc::DOMAttr* > (
          e.getOwnerDocument ()->importNode (
            const_cast< ::xercesc::DOMAttr* > (&(*b)), true)));

      if (a->getLocalName () == 0)
        e.setAttributeNode (a);
      else
        e.setAttributeNodeNS (a);
    }

    // display-name
    //
    if (i.getDisplay_name ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "display-name",
          "urn:ietf:params:xml:ns:resource-lists",
          e));

      s << *i.getDisplay_name ();
    }

    // any
    //
    for (EntryType::AnyConstIterator
         b (i.getAny ().begin ()), n (i.getAny ().end ());
         b != n; ++b)
    {
      e.appendChild (
        e.getOwnerDocument ()->importNode (
          const_cast< ::xercesc::DOMElement* > (&(*b)), true));
    }

    // uri
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "uri",
          e));

      a << i.getUri ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const Entry_refType& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // any_attribute
    //
    for (Entry_refType::AnyAttributeConstIterator
         b (i.getAnyAttribute ().begin ()), n (i.getAnyAttribute ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMAttr* a (
        static_cast< ::xercesc::DOMAttr* > (
          e.getOwnerDocument ()->importNode (
            const_cast< ::xercesc::DOMAttr* > (&(*b)), true)));

      if (a->getLocalName () == 0)
        e.setAttributeNode (a);
      else
        e.setAttributeNodeNS (a);
    }

    // display-name
    //
    if (i.getDisplay_name ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "display-name",
          "urn:ietf:params:xml:ns:resource-lists",
          e));

      s << *i.getDisplay_name ();
    }

    // any
    //
    for (Entry_refType::AnyConstIterator
         b (i.getAny ().begin ()), n (i.getAny ().end ());
         b != n; ++b)
    {
      e.appendChild (
        e.getOwnerDocument ()->importNode (
          const_cast< ::xercesc::DOMElement* > (&(*b)), true));
    }

    // ref
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "ref",
          e));

      a << i.getRef ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const ExternalType& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // any_attribute
    //
    for (ExternalType::AnyAttributeConstIterator
         b (i.getAnyAttribute ().begin ()), n (i.getAnyAttribute ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMAttr* a (
        static_cast< ::xercesc::DOMAttr* > (
          e.getOwnerDocument ()->importNode (
            const_cast< ::xercesc::DOMAttr* > (&(*b)), true)));

      if (a->getLocalName () == 0)
        e.setAttributeNode (a);
      else
        e.setAttributeNodeNS (a);
    }

    // display-name
    //
    if (i.getDisplay_name ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "display-name",
          "urn:ietf:params:xml:ns:resource-lists",
          e));

      s << *i.getDisplay_name ();
    }

    // any
    //
    for (ExternalType::AnyConstIterator
         b (i.getAny ().begin ()), n (i.getAny ().end ());
         b != n; ++b)
    {
      e.appendChild (
        e.getOwnerDocument ()->importNode (
          const_cast< ::xercesc::DOMElement* > (&(*b)), true));
    }

    // anchor
    //
    if (i.getAnchor ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "anchor",
          e));

      a << *i.getAnchor ();
    }
  }

  void
  serializeResource_lists (::std::ostream& o,
                           const ::resource_lists::Resource_lists& s,
                           const ::xml_schema::NamespaceInfomap& m,
                           const ::std::string& e,
                           ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::resource_lists::serializeResource_lists (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  serializeResource_lists (::std::ostream& o,
                           const ::resource_lists::Resource_lists& s,
                           ::xml_schema::ErrorHandler& h,
                           const ::xml_schema::NamespaceInfomap& m,
                           const ::std::string& e,
                           ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::resource_lists::serializeResource_lists (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  serializeResource_lists (::std::ostream& o,
                           const ::resource_lists::Resource_lists& s,
                           ::xercesc::DOMErrorHandler& h,
                           const ::xml_schema::NamespaceInfomap& m,
                           const ::std::string& e,
                           ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::resource_lists::serializeResource_lists (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  serializeResource_lists (::xercesc::XMLFormatTarget& t,
                           const ::resource_lists::Resource_lists& s,
                           const ::xml_schema::NamespaceInfomap& m,
                           const ::std::string& e,
                           ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::resource_lists::serializeResource_lists (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  serializeResource_lists (::xercesc::XMLFormatTarget& t,
                           const ::resource_lists::Resource_lists& s,
                           ::xml_schema::ErrorHandler& h,
                           const ::xml_schema::NamespaceInfomap& m,
                           const ::std::string& e,
                           ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::resource_lists::serializeResource_lists (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  serializeResource_lists (::xercesc::XMLFormatTarget& t,
                           const ::resource_lists::Resource_lists& s,
                           ::xercesc::DOMErrorHandler& h,
                           const ::xml_schema::NamespaceInfomap& m,
                           const ::std::string& e,
                           ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::resource_lists::serializeResource_lists (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  serializeResource_lists (::xercesc::DOMDocument& d,
                           const ::resource_lists::Resource_lists& s,
                           ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "resource-lists" &&
        n.namespace_ () == "urn:ietf:params:xml:ns:resource-lists")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "resource-lists",
        "urn:ietf:params:xml:ns:resource-lists");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  serializeResource_lists (const ::resource_lists::Resource_lists& s,
                           const ::xml_schema::NamespaceInfomap& m,
                           ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "resource-lists",
        "urn:ietf:params:xml:ns:resource-lists",
        m, f));

    ::resource_lists::serializeResource_lists (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const Display_nameType& i)
  {
    e << static_cast< const ::xml_schema::String& > (i);

    // lang
    //
    if (i.getLang ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "lang",
          "http://www.w3.org/XML/1998/namespace",
          e));

      a << *i.getLang ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const List& i)
  {
    e << static_cast< const ::resource_lists::ListType& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const Display_name& i)
  {
    e << static_cast< const ::resource_lists::Display_nameType& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const Resource_lists& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // list
    //
    for (Resource_lists::ListConstIterator
         b (i.getList ().begin ()), n (i.getList ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "list",
          "urn:ietf:params:xml:ns:resource-lists",
          e));

      s << *b;
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//

#if __clang__ || __GNUC__ >= 4
	#pragma GCC diagnostic pop
#endif

//
// End epilogue.

