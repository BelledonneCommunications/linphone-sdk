// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef XML_RESOURCE_LISTS_H
#define XML_RESOURCE_LISTS_H

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//

#if __clang__ || __GNUC__ >= 4
	#pragma GCC diagnostic push
	#pragma GCC diagnostic ignored "-Wsuggest-override"
#endif

//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

#include <xsd/cxx/tree/std-ostream-operators.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type Type;
  typedef ::xsd::cxx::tree::simple_type< char, Type > SimpleType;
  typedef ::xsd::cxx::tree::type Container;

  // 8-bit
  //
  typedef signed char Byte;
  typedef unsigned char UnsignedByte;

  // 16-bit
  //
  typedef short Short;
  typedef unsigned short UnsignedShort;

  // 32-bit
  //
  typedef int Int;
  typedef unsigned int UnsignedInt;

  // 64-bit
  //
  typedef long long Long;
  typedef unsigned long long UnsignedLong;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long Integer;
  typedef long long NonPositiveInteger;
  typedef unsigned long long NonNegativeInteger;
  typedef unsigned long long PositiveInteger;
  typedef long long NegativeInteger;

  // Boolean.
  //
  typedef bool Boolean;

  // Floating-point types.
  //
  typedef float Float;
  typedef double Double;
  typedef double Decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, SimpleType > String;
  typedef ::xsd::cxx::tree::normalized_string< char, String > NormalizedString;
  typedef ::xsd::cxx::tree::token< char, NormalizedString > Token;
  typedef ::xsd::cxx::tree::name< char, Token > Name;
  typedef ::xsd::cxx::tree::nmtoken< char, Token > Nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, SimpleType, Nmtoken > Nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, Name > Ncname;
  typedef ::xsd::cxx::tree::language< char, Token > Language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, Ncname > Id;
  typedef ::xsd::cxx::tree::idref< char, Ncname, Type > Idref;
  typedef ::xsd::cxx::tree::idrefs< char, SimpleType, Idref > Idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, SimpleType > Uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, SimpleType, Uri, Ncname > Qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > Buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, SimpleType > Base64Binary;
  typedef ::xsd::cxx::tree::hex_binary< char, SimpleType > HexBinary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone TimeZone;
  typedef ::xsd::cxx::tree::date< char, SimpleType > Date;
  typedef ::xsd::cxx::tree::date_time< char, SimpleType > DateTime;
  typedef ::xsd::cxx::tree::duration< char, SimpleType > Duration;
  typedef ::xsd::cxx::tree::gday< char, SimpleType > Gday;
  typedef ::xsd::cxx::tree::gmonth< char, SimpleType > Gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, SimpleType > GmonthDay;
  typedef ::xsd::cxx::tree::gyear< char, SimpleType > Gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, SimpleType > GyearMonth;
  typedef ::xsd::cxx::tree::time< char, SimpleType > Time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, Ncname > Entity;
  typedef ::xsd::cxx::tree::entities< char, SimpleType, Entity > Entities;

  typedef ::xsd::cxx::tree::content_order ContentOrder;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > NamespaceInfo;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > NamespaceInfomap;
  typedef ::xsd::cxx::tree::list_stream< char > ListStream;
  typedef ::xsd::cxx::tree::as_double< Double > AsDouble;
  typedef ::xsd::cxx::tree::as_decimal< Decimal > AsDecimal;
  typedef ::xsd::cxx::tree::facet Facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags Flags;
  typedef ::xsd::cxx::tree::properties< char > Properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity Severity;
  typedef ::xsd::cxx::tree::error< char > Error;
  typedef ::xsd::cxx::tree::diagnostics< char > Diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > Exception;
  typedef ::xsd::cxx::tree::bounds< char > Bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > DuplicateId;
  typedef ::xsd::cxx::tree::parsing< char > Parsing;
  typedef ::xsd::cxx::tree::expected_element< char > ExpectedElement;
  typedef ::xsd::cxx::tree::unexpected_element< char > UnexpectedElement;
  typedef ::xsd::cxx::tree::expected_attribute< char > ExpectedAttribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > UnexpectedEnumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > ExpectedTextContent;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > NoPrefixMapping;
  typedef ::xsd::cxx::tree::serialization< char > Serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > ErrorHandler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::unique_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const treeNodeKey = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace resource_lists
{
  class ListType;
  class EntryType;
  class Entry_refType;
  class ExternalType;
  class Display_nameType;
  class List;
  class Display_name;
  class Resource_lists;
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include <xsd/cxx/tree/containers-wildcard.hxx>

#include "xml.h"

namespace resource_lists
{
  class ListType: public ::xml_schema::Type
  {
    public:
    // display-name
    //
    typedef ::resource_lists::Display_nameType Display_nameType;
    typedef ::xsd::cxx::tree::optional< Display_nameType > Display_nameOptional;
    typedef ::xsd::cxx::tree::traits< Display_nameType, char > Display_nameTraits;

    const Display_nameOptional&
    getDisplay_name () const;

    Display_nameOptional&
    getDisplay_name ();

    void
    setDisplay_name (const Display_nameType& x);

    void
    setDisplay_name (const Display_nameOptional& x);

    void
    setDisplay_name (::std::unique_ptr< Display_nameType > p);

    // list
    //
    typedef ::resource_lists::List ListType1;
    typedef ::xsd::cxx::tree::sequence< ListType1 > ListSequence;
    typedef ListSequence::iterator ListIterator;
    typedef ListSequence::const_iterator ListConstIterator;
    typedef ::xsd::cxx::tree::traits< ListType1, char > ListTraits;

    const ListSequence&
    getList () const;

    ListSequence&
    getList ();

    void
    setList (const ListSequence& s);

    // external
    //
    typedef ::resource_lists::ExternalType ExternalType;
    typedef ::xsd::cxx::tree::sequence< ExternalType > ExternalSequence;
    typedef ExternalSequence::iterator ExternalIterator;
    typedef ExternalSequence::const_iterator ExternalConstIterator;
    typedef ::xsd::cxx::tree::traits< ExternalType, char > ExternalTraits;

    const ExternalSequence&
    getExternal () const;

    ExternalSequence&
    getExternal ();

    void
    setExternal (const ExternalSequence& s);

    // entry
    //
    typedef ::resource_lists::EntryType EntryType;
    typedef ::xsd::cxx::tree::sequence< EntryType > EntrySequence;
    typedef EntrySequence::iterator EntryIterator;
    typedef EntrySequence::const_iterator EntryConstIterator;
    typedef ::xsd::cxx::tree::traits< EntryType, char > EntryTraits;

    const EntrySequence&
    getEntry () const;

    EntrySequence&
    getEntry ();

    void
    setEntry (const EntrySequence& s);

    // entry-ref
    //
    typedef ::resource_lists::Entry_refType Entry_refType;
    typedef ::xsd::cxx::tree::sequence< Entry_refType > Entry_refSequence;
    typedef Entry_refSequence::iterator Entry_refIterator;
    typedef Entry_refSequence::const_iterator Entry_refConstIterator;
    typedef ::xsd::cxx::tree::traits< Entry_refType, char > Entry_refTraits;

    const Entry_refSequence&
    getEntry_ref () const;

    Entry_refSequence&
    getEntry_ref ();

    void
    setEntry_ref (const Entry_refSequence& s);

    // any
    //
    typedef ::xsd::cxx::tree::element_sequence AnySequence;
    typedef AnySequence::iterator AnyIterator;
    typedef AnySequence::const_iterator AnyConstIterator;

    const AnySequence&
    getAny () const;

    AnySequence&
    getAny ();

    void
    setAny (const AnySequence& s);

    // name
    //
    typedef ::xml_schema::String NameType;
    typedef ::xsd::cxx::tree::optional< NameType > NameOptional;
    typedef ::xsd::cxx::tree::traits< NameType, char > NameTraits;

    const NameOptional&
    getName () const;

    NameOptional&
    getName ();

    void
    setName (const NameType& x);

    void
    setName (const NameOptional& x);

    void
    setName (::std::unique_ptr< NameType > p);

    // any_attribute
    //
    typedef ::xsd::cxx::tree::attribute_set< char > AnyAttributeSet;
    typedef AnyAttributeSet::iterator AnyAttributeIterator;
    typedef AnyAttributeSet::const_iterator AnyAttributeConstIterator;

    const AnyAttributeSet&
    getAnyAttribute () const;

    AnyAttributeSet&
    getAnyAttribute ();

    void
    setAnyAttribute (const AnyAttributeSet& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    getDomDocument () const;

    ::xercesc::DOMDocument&
    getDomDocument ();

    // Constructors.
    //
    ListType ();

    ListType (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

    ListType (const ListType& x,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

    virtual ListType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    ListType&
    operator= (const ListType& x);

    virtual 
    ~ListType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > dom_document_;

    Display_nameOptional display_name_;
    ListSequence list_;
    ExternalSequence external_;
    EntrySequence entry_;
    Entry_refSequence entry_ref_;
    AnySequence any_;
    NameOptional name_;
    AnyAttributeSet any_attribute_;
  };

  class EntryType: public ::xml_schema::Type
  {
    public:
    // display-name
    //
    typedef ::resource_lists::Display_name Display_nameType;
    typedef ::xsd::cxx::tree::optional< Display_nameType > Display_nameOptional;
    typedef ::xsd::cxx::tree::traits< Display_nameType, char > Display_nameTraits;

    const Display_nameOptional&
    getDisplay_name () const;

    Display_nameOptional&
    getDisplay_name ();

    void
    setDisplay_name (const Display_nameType& x);

    void
    setDisplay_name (const Display_nameOptional& x);

    void
    setDisplay_name (::std::unique_ptr< Display_nameType > p);

    // any
    //
    typedef ::xsd::cxx::tree::element_sequence AnySequence;
    typedef AnySequence::iterator AnyIterator;
    typedef AnySequence::const_iterator AnyConstIterator;

    const AnySequence&
    getAny () const;

    AnySequence&
    getAny ();

    void
    setAny (const AnySequence& s);

    // uri
    //
    typedef ::xml_schema::Uri UriType;
    typedef ::xsd::cxx::tree::traits< UriType, char > UriTraits;

    const UriType&
    getUri () const;

    UriType&
    getUri ();

    void
    setUri (const UriType& x);

    void
    setUri (::std::unique_ptr< UriType > p);

    ::std::unique_ptr< UriType >
    detachUri ();

    // any_attribute
    //
    typedef ::xsd::cxx::tree::attribute_set< char > AnyAttributeSet;
    typedef AnyAttributeSet::iterator AnyAttributeIterator;
    typedef AnyAttributeSet::const_iterator AnyAttributeConstIterator;

    const AnyAttributeSet&
    getAnyAttribute () const;

    AnyAttributeSet&
    getAnyAttribute ();

    void
    setAnyAttribute (const AnyAttributeSet& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    getDomDocument () const;

    ::xercesc::DOMDocument&
    getDomDocument ();

    // Constructors.
    //
    EntryType (const UriType&);

    EntryType (const ::xercesc::DOMElement& e,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

    EntryType (const EntryType& x,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

    virtual EntryType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    EntryType&
    operator= (const EntryType& x);

    virtual 
    ~EntryType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > dom_document_;

    Display_nameOptional display_name_;
    AnySequence any_;
    ::xsd::cxx::tree::one< UriType > uri_;
    AnyAttributeSet any_attribute_;
  };

  class Entry_refType: public ::xml_schema::Type
  {
    public:
    // display-name
    //
    typedef ::resource_lists::Display_nameType Display_nameType;
    typedef ::xsd::cxx::tree::optional< Display_nameType > Display_nameOptional;
    typedef ::xsd::cxx::tree::traits< Display_nameType, char > Display_nameTraits;

    const Display_nameOptional&
    getDisplay_name () const;

    Display_nameOptional&
    getDisplay_name ();

    void
    setDisplay_name (const Display_nameType& x);

    void
    setDisplay_name (const Display_nameOptional& x);

    void
    setDisplay_name (::std::unique_ptr< Display_nameType > p);

    // any
    //
    typedef ::xsd::cxx::tree::element_sequence AnySequence;
    typedef AnySequence::iterator AnyIterator;
    typedef AnySequence::const_iterator AnyConstIterator;

    const AnySequence&
    getAny () const;

    AnySequence&
    getAny ();

    void
    setAny (const AnySequence& s);

    // ref
    //
    typedef ::xml_schema::Uri RefType;
    typedef ::xsd::cxx::tree::traits< RefType, char > RefTraits;

    const RefType&
    getRef () const;

    RefType&
    getRef ();

    void
    setRef (const RefType& x);

    void
    setRef (::std::unique_ptr< RefType > p);

    ::std::unique_ptr< RefType >
    detachRef ();

    // any_attribute
    //
    typedef ::xsd::cxx::tree::attribute_set< char > AnyAttributeSet;
    typedef AnyAttributeSet::iterator AnyAttributeIterator;
    typedef AnyAttributeSet::const_iterator AnyAttributeConstIterator;

    const AnyAttributeSet&
    getAnyAttribute () const;

    AnyAttributeSet&
    getAnyAttribute ();

    void
    setAnyAttribute (const AnyAttributeSet& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    getDomDocument () const;

    ::xercesc::DOMDocument&
    getDomDocument ();

    // Constructors.
    //
    Entry_refType (const RefType&);

    Entry_refType (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

    Entry_refType (const Entry_refType& x,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

    virtual Entry_refType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    Entry_refType&
    operator= (const Entry_refType& x);

    virtual 
    ~Entry_refType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > dom_document_;

    Display_nameOptional display_name_;
    AnySequence any_;
    ::xsd::cxx::tree::one< RefType > ref_;
    AnyAttributeSet any_attribute_;
  };

  class ExternalType: public ::xml_schema::Type
  {
    public:
    // display-name
    //
    typedef ::resource_lists::Display_nameType Display_nameType;
    typedef ::xsd::cxx::tree::optional< Display_nameType > Display_nameOptional;
    typedef ::xsd::cxx::tree::traits< Display_nameType, char > Display_nameTraits;

    const Display_nameOptional&
    getDisplay_name () const;

    Display_nameOptional&
    getDisplay_name ();

    void
    setDisplay_name (const Display_nameType& x);

    void
    setDisplay_name (const Display_nameOptional& x);

    void
    setDisplay_name (::std::unique_ptr< Display_nameType > p);

    // any
    //
    typedef ::xsd::cxx::tree::element_sequence AnySequence;
    typedef AnySequence::iterator AnyIterator;
    typedef AnySequence::const_iterator AnyConstIterator;

    const AnySequence&
    getAny () const;

    AnySequence&
    getAny ();

    void
    setAny (const AnySequence& s);

    // anchor
    //
    typedef ::xml_schema::Uri AnchorType;
    typedef ::xsd::cxx::tree::optional< AnchorType > AnchorOptional;
    typedef ::xsd::cxx::tree::traits< AnchorType, char > AnchorTraits;

    const AnchorOptional&
    getAnchor () const;

    AnchorOptional&
    getAnchor ();

    void
    setAnchor (const AnchorType& x);

    void
    setAnchor (const AnchorOptional& x);

    void
    setAnchor (::std::unique_ptr< AnchorType > p);

    // any_attribute
    //
    typedef ::xsd::cxx::tree::attribute_set< char > AnyAttributeSet;
    typedef AnyAttributeSet::iterator AnyAttributeIterator;
    typedef AnyAttributeSet::const_iterator AnyAttributeConstIterator;

    const AnyAttributeSet&
    getAnyAttribute () const;

    AnyAttributeSet&
    getAnyAttribute ();

    void
    setAnyAttribute (const AnyAttributeSet& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    getDomDocument () const;

    ::xercesc::DOMDocument&
    getDomDocument ();

    // Constructors.
    //
    ExternalType ();

    ExternalType (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

    ExternalType (const ExternalType& x,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

    virtual ExternalType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    ExternalType&
    operator= (const ExternalType& x);

    virtual 
    ~ExternalType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > dom_document_;

    Display_nameOptional display_name_;
    AnySequence any_;
    AnchorOptional anchor_;
    AnyAttributeSet any_attribute_;
  };

  class Display_nameType: public ::xml_schema::String
  {
    public:
    // lang
    //
    typedef ::namespace_::Lang LangType;
    typedef ::xsd::cxx::tree::optional< LangType > LangOptional;
    typedef ::xsd::cxx::tree::traits< LangType, char > LangTraits;

    const LangOptional&
    getLang () const;

    LangOptional&
    getLang ();

    void
    setLang (const LangType& x);

    void
    setLang (const LangOptional& x);

    void
    setLang (::std::unique_ptr< LangType > p);

    // Constructors.
    //
    Display_nameType ();

    Display_nameType (const char*);

    Display_nameType (const ::std::string&);

    Display_nameType (const ::xml_schema::String&);

    Display_nameType (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    Display_nameType (const Display_nameType& x,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    virtual Display_nameType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    Display_nameType&
    operator= (const Display_nameType& x);

    virtual 
    ~Display_nameType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    LangOptional lang_;
  };

  class List: public ::resource_lists::ListType
  {
    public:
    // Constructors.
    //
    List ();

    List (const ::xercesc::DOMElement& e,
          ::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0);

    List (const List& x,
          ::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0);

    virtual List*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~List ();
  };

  class Display_name: public ::resource_lists::Display_nameType
  {
    public:
    // Constructors.
    //
    Display_name ();

    Display_name (const char*);

    Display_name (const ::std::string&);

    Display_name (const ::xml_schema::String&);

    Display_name (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

    Display_name (const Display_name& x,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

    virtual Display_name*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~Display_name ();
  };

  class Resource_lists: public ::xml_schema::Type
  {
    public:
    // list
    //
    typedef ::resource_lists::ListType ListType;
    typedef ::xsd::cxx::tree::sequence< ListType > ListSequence;
    typedef ListSequence::iterator ListIterator;
    typedef ListSequence::const_iterator ListConstIterator;
    typedef ::xsd::cxx::tree::traits< ListType, char > ListTraits;

    const ListSequence&
    getList () const;

    ListSequence&
    getList ();

    void
    setList (const ListSequence& s);

    // Constructors.
    //
    Resource_lists ();

    Resource_lists (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

    Resource_lists (const Resource_lists& x,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

    virtual Resource_lists*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    Resource_lists&
    operator= (const Resource_lists& x);

    virtual 
    ~Resource_lists ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ListSequence list_;
  };
}

#include <iosfwd>

namespace resource_lists
{
  ::std::ostream&
  operator<< (::std::ostream&, const ListType&);

  ::std::ostream&
  operator<< (::std::ostream&, const EntryType&);

  ::std::ostream&
  operator<< (::std::ostream&, const Entry_refType&);

  ::std::ostream&
  operator<< (::std::ostream&, const ExternalType&);

  ::std::ostream&
  operator<< (::std::ostream&, const Display_nameType&);

  ::std::ostream&
  operator<< (::std::ostream&, const List&);

  ::std::ostream&
  operator<< (::std::ostream&, const Display_name&);

  ::std::ostream&
  operator<< (::std::ostream&, const Resource_lists&);
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace resource_lists
{
  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::resource_lists::Resource_lists >
  parseResource_lists (const ::std::string& uri,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::resource_lists::Resource_lists >
  parseResource_lists (const ::std::string& uri,
                       ::xml_schema::ErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::resource_lists::Resource_lists >
  parseResource_lists (const ::std::string& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::resource_lists::Resource_lists >
  parseResource_lists (::std::istream& is,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::resource_lists::Resource_lists >
  parseResource_lists (::std::istream& is,
                       ::xml_schema::ErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::resource_lists::Resource_lists >
  parseResource_lists (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::resource_lists::Resource_lists >
  parseResource_lists (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::resource_lists::Resource_lists >
  parseResource_lists (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::ErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::resource_lists::Resource_lists >
  parseResource_lists (::std::istream& is,
                       const ::std::string& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::resource_lists::Resource_lists >
  parseResource_lists (::xercesc::InputSource& is,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::resource_lists::Resource_lists >
  parseResource_lists (::xercesc::InputSource& is,
                       ::xml_schema::ErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::resource_lists::Resource_lists >
  parseResource_lists (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::resource_lists::Resource_lists >
  parseResource_lists (const ::xercesc::DOMDocument& d,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::unique_ptr< ::resource_lists::Resource_lists >
  parseResource_lists (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace resource_lists
{
  void
  operator<< (::xercesc::DOMElement&, const ListType&);

  void
  operator<< (::xercesc::DOMElement&, const EntryType&);

  void
  operator<< (::xercesc::DOMElement&, const Entry_refType&);

  void
  operator<< (::xercesc::DOMElement&, const ExternalType&);

  // Serialize to std::ostream.
  //

  void
  serializeResource_lists (::std::ostream& os,
                           const ::resource_lists::Resource_lists& x, 
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::Flags f = 0);

  void
  serializeResource_lists (::std::ostream& os,
                           const ::resource_lists::Resource_lists& x, 
                           ::xml_schema::ErrorHandler& eh,
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::Flags f = 0);

  void
  serializeResource_lists (::std::ostream& os,
                           const ::resource_lists::Resource_lists& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  serializeResource_lists (::xercesc::XMLFormatTarget& ft,
                           const ::resource_lists::Resource_lists& x, 
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::Flags f = 0);

  void
  serializeResource_lists (::xercesc::XMLFormatTarget& ft,
                           const ::resource_lists::Resource_lists& x, 
                           ::xml_schema::ErrorHandler& eh,
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::Flags f = 0);

  void
  serializeResource_lists (::xercesc::XMLFormatTarget& ft,
                           const ::resource_lists::Resource_lists& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  serializeResource_lists (::xercesc::DOMDocument& d,
                           const ::resource_lists::Resource_lists& x,
                           ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  serializeResource_lists (const ::resource_lists::Resource_lists& x, 
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           ::xml_schema::Flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const Display_nameType&);

  void
  operator<< (::xercesc::DOMElement&, const List&);

  void
  operator<< (::xercesc::DOMElement&, const Display_name&);

  void
  operator<< (::xercesc::DOMElement&, const Resource_lists&);
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//

#if __clang__ || __GNUC__ >= 4
	#pragma GCC diagnostic pop
#endif

//
// End epilogue.

#endif // XML_RESOURCE_LISTS_H
