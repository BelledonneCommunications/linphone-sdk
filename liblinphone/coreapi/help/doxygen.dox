/**
 * @mainpage
 *
 * @see http://www.linphone.org
 *
 * @section what_is_it What is liblinphone
 *
 * Liblinphone is a high level library for bringing SIP video call functionnality
 * into an application. It aims at making easy the integration of the SIP
 * video calls into any applications. All variants of linphone are directly based
 * on it:
 * - linphone (gtk interface)
 *
 * - linphonec (console interface)
 *
 * Liblinphone is GPL (see COPYING file). Please understand the licencing details
 * before using it!
 * 
 * For any use of this library beyond the rights granted to you by the
 * GPL license, please contact Belledonne Communications 
 * (contact@belledonne-communications.com)
 * 
 *
**/

/**
 * @page liblinphone_license COPYING 
 * @include COPYING
 */

/**
 * @defgroup initializing Initializing liblinphone
**/

/**
 * @defgroup call_control Placing and receiving calls
 *
 * The #LinphoneCall object represents an incoming or outgoing call managed by the #LinphoneCore.
 * Outgoing calls can be created using linphone_core_invite() or linphone_core_invite_address(), while incoming calls are notified to the application
 * through the LinphoneCoreVTable::call_state_changed callback.
 *
 * See the basic call \ref basic_call_tutorials "tutorial".
 *
**/

/**
 * @defgroup media_parameters Controlling media parameters
**/

/**
 * @defgroup proxies Managing proxies
 *User registration is controled by  #LinphoneProxyConfig settings.<br> Each #LinphoneProxyConfig object can be configured with registration informations 
 *like \link linphone_proxy_config_set_server_addr() proxy address \endlink , \link linphone_proxy_config_set_identity() user id \endlink, \link linphone_proxy_config_expires() refresh period \endlink, and so on. 
 *<br> A created proxy config using linphone_proxy_config_new(), once configured, must be added to #LinphoneCore using function linphone_core_add_proxy_config().
 *<br> It is recommended to set a default \link #LinphoneProxyConfig proxy config \endlink using function linphone_core_set_default_proxy(). Once done, if \link #LinphoneProxyConfig a proxy config \endlink has been configured with attribute \link linphone_proxy_config_enable_register() enable register \endlink  , next call to linphone_core_iterate() triggers a SIP register.  
 *<br> Registration status is reported by #LinphoneRegistrationStateCb.
 *<br>
 *<br> This pseudo code demonstrates basic registration operations:
 *<br> \code
 *	
 *	LinphoneProxyConfig* proxy_cfg;
 *	/*create proxy config*/
 *	proxy_cfg = linphone_proxy_config_new();
 *	/*parse identity*/
 *	LinphoneAddress *from = linphone_address_new("sip:toto@sip.titi.com");
 *	LinphoneAuthInfo *info;
 *	if (password!=NULL){
 * 		info=linphone_auth_info_new(linphone_address_get_username(from),NULL,"secret",NULL,NULL); /*create authentication structure from identity*/
 *		linphone_core_add_auth_info(lc,info); /*add authentication info to LinphoneCore*/
 *	}	
 *	// configure proxy entries
 *	linphone_proxy_config_set_identity(proxy_cfg,identity); /*set identity with user name and domain*/
 *	const char* server_addr = linphone_address_get_domain(from); /*extract domain address from identity*/
 *	linphone_proxy_config_set_server_addr(proxy_cfg,server_addr); /* we assume domain = proxy server address*/
 *	linphone_proxy_config_enable_register(proxy_cfg,TRUE); /*activate registration for this proxy config*/
 *	linphone_address_destroy(from); /*release resource*/
 *	
 *	linphone_core_add_proxy_config(lc,proxy_cfg); /*add proxy config to linphone core*/
 *	linphone_core_set_default_proxy(lc,proxy_cfg); /*set to default proxy*/ \endcode
 *<br>
 * Registration sate call back:
 \code
 static void registration_state_changed(struct _LinphoneCore *lc, LinphoneProxyConfig *cfg, LinphoneRegistrationState cstate, const char *message){
		printf("New registration state %s for user id [%s] at proxy [%s]\n"
				,linphone_registration_state_to_string(cstate)
				,linphone_proxy_config_get_identity(cfg)
				,linphone_proxy_config_get_addr(cfg));
}
 \endcode
 *<br><b>Authentication:</b>
 *<br>Most of the time, registration requires \ref authentication "authentication" to succed. #LinphoneAuthInfo info must be either added to #LinphoneCore  using function linphone_core_add_auth_info() before #LinphoneProxyConfig is added to Linphone core, or on demand from call back #AuthInfoRequested .    
 *<br>
 *<br><b>Unregistration:</b>
 *<br> Unregistration or any changes to #LinphoneProxyConfig must be first started by a call to function linphone_proxy_config_edit() and validated by  function linphone_proxy_config_done()
 *<br> This pseudo code shows how to unregister a user associated to a #LinphoneProxyConfig
 *\code
 	LinphoneProxyConfig* proxy_cfg;
 	linphone_core_get_default_proxy(lc,&proxy_cfg); /* get default proxy config*/
	linphone_proxy_config_edit(proxy_cfg); /*start editing proxy configuration*/
	linphone_proxy_config_enable_register(proxy_cfg,FALSE); /*de-activate registration for this proxy config*/
	linphone_proxy_config_done(proxy_cfg); /*initiate REGISTER with expire = 0*/
\endcode
	<br>
	A complete tutorial can be found at : \ref registration_tutorials "Registration tutorial" 
**/

/**
 * @defgroup network_parameters Controlling network parameters (ports, mtu...)
**/

/**
 * @defgroup authentication Managing authentication: userid and passwords
**/

/**
* @defgroup buddy_list Managing Buddies and buddy list and presence 
<b>Buddies and buddy list</b>
<br>Each buddy is represented by a #LinphoneFriend object created by function linphone_friend_new(). 
Buddy configuration parameters like \link linphone_friend_set_addr() sip uri \endlink or  \link linphone_friend_set_inc_subscribe_policy() status publication \endlink policy for this \link #LinphoneFriend friend \endlink  are configurable for each buddy.
<br>Here under a typical buddy creation:
<br>
\code
LinphoneFriend* my_friend=linphone_friend_new_with_addr("sip:joe@sip.linphone.org"); /*creates friend object for buddy joe*/
linphone_friend_enable_subscribes(my_friend,TRUE); /*configure this friend to emit SUBSCRIBE message after being added to LinphoneCore*/
linphone_friend_set_inc_subscribe_policy(my_friend,LinphoneSPAccept); /* accept Incoming subscription request for this friend*/
\endcode
\link #LinphoneFriend  friends \endlink status changes are reported by callback LinphoneCoreVTable.notify_presence_recv
\code
static void notify_presence_recv_updated (struct _LinphoneCore *lc,  LinphoneFriend *friend) {
	const LinphoneAddress* friend_address = linphone_friend_get_address(friend);
	printf("New state state [%s] for user id [%s] \n"
				,linphone_online_status_to_string(linphone_friend_get_status(friend))
				,linphone_address_as_string (friend_address));
}
\endcode
<br>Once created a buddy can be added to the buddy list using function linphone_core_add_friend() . Added friends will be notified about \link linphone_core_set_presence_info() local status changes \endlink
<br>
Any subsequente modifications to #LinphoneFriend must be first started by a call to function linphone_friend_edit() and validated by  function linphone_friend_done()
\code
linphone_friend_edit(my_friend); /* start editing friend */
linphone_friend_enable_subscribes(my_friend,FALSE); /*disable subscription for this friend*/
linphone_friend_done(my_friend); /*commit changes triggering an UNSUBSCRIBE message*/
\endcode


<b> Publishing presence status </b>
<br>Local presence status can be changed using function linphone_core_set_presence_info() .New status is propagated to all friends \link linphone_core_add_friend() previously added \endlink to #LinphoneCore. 

<b>Handling incoming subscription request</b>
<br> New incoming subscription requests are process according to \link linphone_friend_set_inc_subscribe_policy() the incoming subscription policy state \endlink for subscription initiated by \link linphone_core_add_friend() members of the buddy list. \endlink
<br> For incoming request comming from an unknown buddy, the call back  LinphoneCoreVTable.new_subscription_request is invoked.

<br> A complete tutorial can be found at : \ref buddy_tutorials "Registration tutorial" 


**/

/**
* @defgroup chatroom Chat room and Messaging 
<b> Exchanging text messages</b>
<br> Messages are sent using #LinphoneChatRoom object. First step is to create a \link linphone_core_create_chat_room() chat room \endlink
from a peer sip uri.
\code
LinphoneChatRoom* chat_room = linphone_core_create_chat_room(lc,"sip:joe@sip.linphone.org");
\endcode

<br>Once created, messages are sent using function linphone_chat_room_send_message()  . 
\code
linphone_chat_room_send_message(chat_room,"Hello world"); /*sending message*/
\endcode
<br>Incoming message are received from call back LinphoneCoreVTable.text_received
\code
void text_received(LinphoneCore *lc, LinphoneChatRoom *room, const LinphoneAddress *from, const char *message) {
	printf(" Message [%s] received from [%s] \n",message,linphone_address_as_string (from));
}
\endcode
<br> A complete tutorial can be found at : \ref chatroom_tuto "Chat room tutorial" 
**/

/**
 * @defgroup call_logs Managing call logs
**/


/**
 * @defgroup linphone_address SIP address parser API.
 * This api is useful for manipulating SIP addresses ('from' or 'to' headers).
**/

/**
 * @defgroup misc Miscenalleous: logs, version strings, config storage
**/

/**
 * @defgroup tutorials Tutorials: 
 *
**/

/**
 * @defgroup port Portability: 
 *
**/
/**
 * @defgroup IOS IOS
 * @ingroup port
 *<br>
 <b>Multitasking</b>
 <br> liblinphone for IOS natively supports multitasking assuming application follows multitasking guides provided by Apple. First step is to declare application as multitasked. It means adding background mode for both audio and voip to Info.plist file.
 <br>
 \code
 	<key>UIBackgroundModes</key>
	<array>
		<string>voip</string>
		<string>audio</string>
	</array>
\endcode
<br>
<ul>
<li><b>SIP socket </b> Recommanded mode is TCP, because UDP requires keep alives for maintaining NAT association at the IP router level. 
Unfortunnatly, UDP keep alives are not possible on IOS. For TCP, liblinphone automatically configures SIP socket for voip  (I.E kCFStreamNetworkServiceType set to kCFStreamNetworkServiceTypeVoIP). 
For UDP, it is the responsability of application to set this property of the UDP SIP socket before entering in background. For UDP, the application can access the SIP socket from method #linphone_core_get_sip_socket(). Note this property is only settable on a connected socket. As liblinphone UDP socket are not connected, application willing to enable UDP bacground mode  must first  connect the UDP sip socket before configuring the voip mode. Pseudo code belows show the different steps:
\code
	//get sip socket
	CFReadStreamRef mReadStream
	int sipsock = linphone_core_get_sip_socket(theLinphoneCore);	
	//get address port of the sip proxy in order to connect the udp socket to this proxy
	const char *port;
	addr=linphone_address_new(linphone_proxy_config_get_addr(proxyCfg));
	memset(&hints,0,sizeof(hints));
	hints.ai_family=linphone_core_ipv6_enabled(theLinphoneCore) ? AF_INET6 : AF_INET;
	port=linphone_address_get_port(addr);
	if (port==NULL) port="5060";
	err=getaddrinfo(linphone_address_get_domain(addr),port,&hints,&res);
	if (err!=0){
		ms_error("getaddrinfo() failed for %s: %s",linphone_address_get_domain(addr),gai_strerror(err));
		linphone_address_destroy(addr);
		return;
	}
	//connect the udp socket
	err=connect(sipsock,res->ai_addr,res->ai_addrlen);
	if (err==-1){
		ms_error("Connect failed: %s",strerror(errno));
	}
	freeaddrinfo(res);
	//create CFRead stream from the sip socket id
	CFStreamCreatePairWithSocket(NULL, (CFSocketNativeHandle)sipsock, &mReadStream,nil);
	//configure for persistante connection
	if (!CFReadStreamSetProperty(mReadStream, kCFStreamNetworkServiceType, kCFStreamNetworkServiceTypeVoIP)) {
		ms_error("cannot set service type to voip for read stream");
	}
	if (!CFReadStreamOpen(mReadStream)) {
		ms_error("cannot open read stream");
	}		

\endcode
<br> Note this operation has to be performed every time the application enters in background mode.
<br> Anyway, for battery saving, UDP background mode is not recomnmanded
<li><b>Entering bacground mode</b>
<br> Before entering in background mode  \code - (void)applicationDidEnterBackground:(UIApplication *)application \endcode    The application must first refresh sip registration using function #linphone_core_refresh_registers();
and register a Keep alive handler for periodically refreshing registration. The speudo code below show how to register a keep alive handler:
\code
	//First refresh registration
	linphone_core_refresh_registers(theLinphoneCore);
	//wait for registration answer
	int i=0;
	while (!linphone_proxy_config_is_registered(proxyCfg) && i++<40 ) {
		linphone_core_iterate(theLinphoneCore);
		usleep(100000);
	}
	//register keepalive handler
	[[UIApplication sharedApplication] setKeepAliveTimeout:600/*minimal interval is 600 s*/ 
                                                       handler:^{
                                                                //refresh sip registration
                                                                linphone_core_refresh_registers(theLinphoneCore);
                                                                //make sure sip REGISTER 
                                                                linphone_core_iterate(theLinphoneCore);
                                                                 }];
\endcode
<li><b>Incoming call notification while in background mode</b>
<br>Assuming application using liblinphone is well configured for multitasking, incoming calls arriving while liblinphone is in background mode will simply wakeup  liblinphone thread but not resume GUI. To wakeup GUI, it is recommanded  to send a Local Notification to the user from the #LinphoneCallStateCb. Here under a speudo code for this operation:
\code
	if ([UIApplication sharedApplication].applicationState ==  UIApplicationStateBackground) {
		// Create a new notification
		UILocalNotification* notif = [[[UILocalNotification alloc] init] autorelease];
		if (notif) {
			notif.repeatInterval = 0;
			notif.alertBody =@"New incoming call";
			notif.alertAction = @"Answer";
			notif.soundName = @"oldphone-mono-30s.caf";
			
			[[UIApplication sharedApplication]  presentLocalNotificationNow:notif];
		}
\endcode
</ul>
<b>Networking</b>
<br>
<ul><li><b>WWAN connection</b>
<br>liblinphone relies on bsd socket for sip/rtp networking. On IOS, WWAN connection is supposed to automatically setup on any networking resquest issued by an application. At least on iPhone OS 3.x, BSD sockets do not automaticaly bring up the WWAN interface. So it is recommanded to add a special code to make sure the WWAN connection is properly setup. Speudo code belows describe a way to force WWAN connection.
\code
/*start a new thread to avoid blocking the main ui in case of peer host failure*/
[NSThread detachNewThreadSelector:@selector(runNetworkConnection) toTarget:self withObject:nil];
-(void) runNetworkConnection {
	CFWriteStreamRef writeStream;
	//create a dummy socket
	CFStreamCreatePairWithSocketToHost(NULL, (CFStringRef)@"192.168.0.200", 15000, nil, &writeStream);
	CFWriteStreamOpen (writeStream);
	const char* buff="hello";
	//try to write on this socket
	CFWriteStreamWrite (writeStream,(const UInt8*)buff,strlen(buff));
	CFWriteStreamClose (writeStream);
}	
\endcode  
It is recommanded to perform this task each time the application is waked up, including keep alive handler.
<li><b>Managing IP connection state</b>
<br>liblinphone for IOS relies on the application to be informed of network changes. Network state change when the IP connection move from DOWN to UP, or from WIFI to WWAN. Applications using liblinphone must inform libliblinphone of this changes using function #linphone_core_set_network_reachable(). Usually this method is called from the IOS NetworkReachability callback. Here under a sample code:
\code
//typical reachability callback
void networkReachabilityCallBack(SCNetworkReachabilityRef target, SCNetworkReachabilityFlags flags, void * info) {
	if ((flags == 0) | (flags & (kSCNetworkReachabilityFlagsConnectionRequired |kSCNetworkReachabilityFlagsConnectionOnTraffic))) {
		//network state is off
		linphone_core_set_network_reachable(lc,false);
		((LinphoneManager*)info).connectivity = none;
	} else {
		Connectivity  newConnectivity = flags & kSCNetworkReachabilityFlagsIsWWAN ? wwan:wifi;
		if (lLinphoneMgr.connectivity == none) {
			//notify new network state
			linphone_core_set_network_reachable(lc,true);
		} else if (lLinphoneMgr.connectivity != newConnectivity) {
			// connectivity has changed
			linphone_core_set_network_reachable(lc,false);
			linphone_core_set_network_reachable(lc,true);
		}
		//store new connectivity status
		lLinphoneMgr.connectivity=newConnectivity;
	}
}
}
	
\endcode  
</ul>
<b>DTMF feebacks</b>
<br>liblinphone provides  functions \link #linphone_core_play_dtmf() to play dtmf \endlink . Usually this is used to play a sound when the a user type a digit.  On IOS, libLinphone relies on Audio unit for interfacing with the audio system. Audio unit initialization is a quit long operation that may trigger a bad user experience if performed each time a DTMF is played. On IOS, liblinphone introduce 2 functions for \link linphone_core_start_dtmf_stream() preloading \endlink \link #linphone_core_start_dtmf_stream() unloading \endlink underlying  audio graph responsible of playing DTMFs.  
<br> For application using function  #linphone_core_play_dtmf() , it is recommanded to call #linphone_core_start_dtmf_stream() when entering in foreground and #linphone_core_stop_dtmf_stream() upon entering background mode. 
*/

