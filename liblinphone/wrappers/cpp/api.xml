<?xml version="1.0" ?>
<api>
	<enums>
		<enum deprecated="false" name="LinphonePresenceActivityType">
			<detaileddescription>
				

				<para>Activities as defined in section 3.2 of RFC 4480 </para>
				        
			</detaileddescription>
			
        
			<values>
				<value deprecated="false" name="LinphonePresenceActivityOffline">
					<detaileddescription>
						

						<para>This value is not defined in the RFC, it corresponds to no activity with a basic status of &quot;closed&quot;. </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphonePresenceActivityOnline">
					<detaileddescription>
						

						<para>This value is not defined in the RFC, it corresponds to no activity with a basic status of &quot;open&quot;. </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphonePresenceActivityAppointment">
					<detaileddescription>
						

						<para>The person has a calendar appointment, without specifying exactly of what type. This activity is indicated if more detailed information is not available or the person chooses not to reveal more information. </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphonePresenceActivityAway">
					<detaileddescription>
						

						<para>The person is physically away from all interactive communication devices. </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphonePresenceActivityBreakfast">
					<detaileddescription>
						

						<para>The person is eating the first meal of the day, usually eaten in the morning. </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphonePresenceActivityBusy">
					<detaileddescription>
						

						<para>The person is busy, without further details. </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphonePresenceActivityDinner">
					<detaileddescription>
						

						<para>The person is having his or her main meal of the day, eaten in the evening or at midday. </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphonePresenceActivityHoliday">
					<detaileddescription>
						

						<para>This is a scheduled national or local holiday. </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphonePresenceActivityInTransit">
					<detaileddescription>
						

						<para>The person is riding in a vehicle, such as a car, but not steering. </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphonePresenceActivityLookingForWork">
					<detaileddescription>
						

						<para>The person is looking for (paid) work. </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphonePresenceActivityLunch">
					<detaileddescription>
						

						<para>The person is eating his or her midday meal. </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphonePresenceActivityMeal">
					<detaileddescription>
						

						<para>The person is scheduled for a meal, without specifying whether it is breakfast, lunch, or dinner, or some other meal. </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphonePresenceActivityMeeting">
					<detaileddescription>
						

						<para>The person is in an assembly or gathering of people, as for a business, social, or religious purpose. A meeting is a sub-class of an appointment. </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphonePresenceActivityOnThePhone">
					<detaileddescription>
						

						<para>The person is talking on the telephone. </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphonePresenceActivityOther">
					<detaileddescription>
						

						<para>The person is engaged in an activity with no defined representation. A string describing the activity in plain text SHOULD be provided. </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphonePresenceActivityPerformance">
					<detaileddescription>
						

						<para>A performance is a sub-class of an appointment and includes musical, theatrical, and cinematic performances as well as lectures. It is distinguished from a meeting by the fact that the person may either be lecturing or be in the audience, with a potentially large number of other people, making interruptions particularly noticeable. </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphonePresenceActivityPermanentAbsence">
					<detaileddescription>
						

						<para>The person will not return for the foreseeable future, e.g., because it is no longer working for the company. </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphonePresenceActivityPlaying">
					<detaileddescription>
						

						<para>The person is occupying himself or herself in amusement, sport, or other recreation. </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphonePresenceActivityPresentation">
					<detaileddescription>
						

						<para>The person is giving a presentation, lecture, or participating in a formal round-table discussion. </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphonePresenceActivityShopping">
					<detaileddescription>
						

						<para>The person is visiting stores in search of goods or services. </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphonePresenceActivitySleeping">
					<detaileddescription>
						

						<para>The person is sleeping. </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphonePresenceActivitySpectator">
					<detaileddescription>
						

						<para>The person is observing an event, such as a sports event. </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphonePresenceActivitySteering">
					<detaileddescription>
						

						<para>The person is controlling a vehicle, watercraft, or plane. </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphonePresenceActivityTravel">
					<detaileddescription>
						

						<para>The person is on a business or personal trip, but not necessarily in-transit. </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphonePresenceActivityTV">
					<detaileddescription>
						

						<para>The person is watching television. </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphonePresenceActivityUnknown">
					<detaileddescription>
						

						<para>The activity of the person is unknown. </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphonePresenceActivityVacation">
					<detaileddescription>
						

						<para>A period of time devoted to pleasure, rest, or relaxation. </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphonePresenceActivityWorking">
					<detaileddescription>
						

						<para>The person is engaged in, typically paid, labor, as part of a profession or job. </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphonePresenceActivityWorship">
					<detaileddescription>
						

						<para>The person is participating in religious rites. </para>
						          
					</detaileddescription>
					
        
				</value>
			</values>
		</enum>
		<enum deprecated="false" name="LinphonePresenceBasicStatus">
			<detaileddescription>
				

				<para>Basic status as defined in section 4.1.4 of RFC 3863 </para>
				        
			</detaileddescription>
			
        
			<values>
				<value deprecated="false" name="LinphonePresenceBasicStatusOpen">
					<detaileddescription>
						

						<para>This value means that the associated contact element, if any, is ready to accept communication. </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphonePresenceBasicStatusClosed">
					<detaileddescription>
						

						<para>This value means that the associated contact element, if any, is unable to accept communication. </para>
						          
					</detaileddescription>
					
        
				</value>
			</values>
		</enum>
		<enum deprecated="false" name="LinphoneAVPFMode">
			<detaileddescription>
				

				<para>Enum describing RTP AVPF activation modes. </para>
				        
			</detaileddescription>
			
        
			<values>
				<value deprecated="false" name="LinphoneAVPFDefault">
					<detaileddescription>
						

						<para>Use default value defined at upper level </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneAVPFDisabled">
					<detaileddescription>
						

						<para>AVPF is disabled </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneAVPFEnabled">
					<detaileddescription>
						

						<para>AVPF is enabled </para>
						          
					</detaileddescription>
					
        
				</value>
			</values>
		</enum>
		<enum deprecated="false" name="LinphoneAccountCreatorStatus">
			<detaileddescription>
				

				<para>Enum describing the status of a LinphoneAccountCreator operation. </para>
				        
			</detaileddescription>
			
        
			<values>
				<value deprecated="false" name="LinphoneAccountCreatorOK">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneAccountCreatorReqFailed">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneAccountCreatorAccountCreated">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneAccountCreatorAccountNotCreated">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneAccountCreatorAccountExist">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneAccountCreatorAccountExistWithAlias">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneAccountCreatorAccountNotExist">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneAccountCreatorAccountActivated">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneAccountCreatorAccountAlreadyActivated">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneAccountCreatorAccountNotActivated">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneAccountCreatorAccountLinked">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneAccountCreatorAccountNotLinked">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneAccountCreatorEmailInvalid">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneAccountCreatorUsernameInvalid">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneAccountCreatorUsernameTooShort">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneAccountCreatorUsernameTooLong">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneAccountCreatorUsernameInvalidSize">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneAccountCreatorPhoneNumberInvalid">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneAccountCreatorPhoneNumberTooShort">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneAccountCreatorPhoneNumberTooLong">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneAccountCreatorPhoneNumberUsedAccount">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneAccountCreatorPhoneNumberUsedAlias">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneAccountCreatorPhoneNumberNotUsed">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneAccountCreatorPasswordTooShort">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneAccountCreatorPasswordTooLong">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneAccountCreatorDomainInvalid">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneAccountCreatorRouteInvalid">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneAccountCreatorDisplayNameInvalid">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneAccountCreatorTransportNotSupported">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneAccountCreatorCountryCodeInvalid">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneAccountCreatorErrorServer">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
			</values>
		</enum>
		<enum deprecated="false" name="LinphoneAddressFamily">
			<detaileddescription>
				

				<para>Enum describing Ip family. </para>
				        
			</detaileddescription>
			
        
			<values>
				<value deprecated="false" name="LinphoneAddressFamilyInet">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneAddressFamilyInet6">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneAddressFamilyUnspec">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
			</values>
		</enum>
		<enum deprecated="false" name="LinphoneAudioRoute">
			<detaileddescription>
				

				<para>Enum describing type of audio route. </para>
				        
			</detaileddescription>
			
        
			<values>
				<value deprecated="false" name="LinphoneAudioRouteEarpiece">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneAudioRouteSpeaker">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
			</values>
		</enum>
		<enum deprecated="false" name="LinphoneAuthMethod">
			<detaileddescription>
				

				<para>Enum describing the authentication methods </para>
				        
			</detaileddescription>
			
        
			<values>
				<value deprecated="false" name="LinphoneAuthHttpDigest">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneAuthTls">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
			</values>
		</enum>
		<enum deprecated="false" name="LinphoneCallDir">
			<detaileddescription>
				

				<para>Enum representing the direction of a call. </para>
				        
			</detaileddescription>
			
        
			<values>
				<value deprecated="false" name="LinphoneCallOutgoing">
					<detaileddescription>
						

						<para>outgoing calls </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneCallIncoming">
					<detaileddescription>
						

						<para>incoming calls </para>
						          
					</detaileddescription>
					
        
				</value>
			</values>
		</enum>
		<enum deprecated="false" name="LinphoneCallState">
			<detaileddescription>
				

				<para>
					LinphoneCallState enum represents the different state a call can reach into. The application is notified of state changes through the 
					<ref>LinphoneCoreVTable::call_state_changed</ref>
					 callback. 
				</para>
				        
			</detaileddescription>
			
        
			<values>
				<value deprecated="false" name="LinphoneCallIdle">
					<detaileddescription>
						

						<para>Initial call state </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneCallIncomingReceived">
					<detaileddescription>
						

						<para>This is a new incoming call </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneCallOutgoingInit">
					<detaileddescription>
						

						<para>An outgoing call is started </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneCallOutgoingProgress">
					<detaileddescription>
						

						<para>An outgoing call is in progress </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneCallOutgoingRinging">
					<detaileddescription>
						

						<para>An outgoing call is ringing at remote end </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneCallOutgoingEarlyMedia">
					<detaileddescription>
						

						<para>An outgoing call is proposed early media </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneCallConnected">
					<detaileddescription>
						

						<para>Connected, the call is answered </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneCallStreamsRunning">
					<detaileddescription>
						

						<para>The media streams are established and running </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneCallPausing">
					<detaileddescription>
						

						<para>The call is pausing at the initiative of local end </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneCallPaused">
					<detaileddescription>
						

						<para>The call is paused, remote end has accepted the pause </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneCallResuming">
					<detaileddescription>
						

						<para>The call is being resumed by local end </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneCallRefered">
					<detaileddescription>
						

						<para>The call is being transfered to another party, resulting in a new outgoing call to follow immediately </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneCallError">
					<detaileddescription>
						

						<para>The call encountered an error </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneCallEnd">
					<detaileddescription>
						

						<para>The call ended normally </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneCallPausedByRemote">
					<detaileddescription>
						

						<para>The call is paused by remote end </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneCallUpdatedByRemote">
					<detaileddescription>
						

						<para>The call's parameters change is requested by remote end, used for example when video is added by remote </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneCallIncomingEarlyMedia">
					<detaileddescription>
						

						<para>We are proposing early media to an incoming call </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneCallUpdating">
					<detaileddescription>
						

						<para>A call update has been initiated by us </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneCallReleased">
					<detaileddescription>
						

						<para>The call object is no more retained by the core </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneCallEarlyUpdatedByRemote">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneCallEarlyUpdating">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
			</values>
		</enum>
		<enum deprecated="false" name="LinphoneCallStatus">
			<detaileddescription>
				

				<para>Enum representing the status of a call </para>
				        
			</detaileddescription>
			
        
			<values>
				<value deprecated="false" name="LinphoneCallSuccess">
					<detaileddescription>
						

						<para>The call was sucessful </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneCallAborted">
					<detaileddescription>
						

						<para>The call was aborted </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneCallMissed">
					<detaileddescription>
						

						<para>The call was missed (unanswered) </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneCallDeclined">
					<detaileddescription>
						

						<para>The call was declined, either locally or by remote end </para>
						          
					</detaileddescription>
					
        
				</value>
			</values>
		</enum>
		<enum deprecated="false" name="LinphoneChatMessageState">
			<detaileddescription>
				

				<para>LinphoneChatMessageState is used to notify if messages have been succesfully delivered or not. </para>
				        
			</detaileddescription>
			
        
			<values>
				<value deprecated="false" name="LinphoneChatMessageStateIdle">
					<detaileddescription>
						

						<para>Initial state </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneChatMessageStateInProgress">
					<detaileddescription>
						

						<para>Delivery in progress </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneChatMessageStateDelivered">
					<detaileddescription>
						

						<para>Message successfully delivered and acknowledged by server </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneChatMessageStateNotDelivered">
					<detaileddescription>
						

						<para>Message was not delivered </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneChatMessageStateFileTransferError">
					<detaileddescription>
						

						<para>Message was received(and acknowledged) but cannot get file from server </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneChatMessageStateFileTransferDone">
					<detaileddescription>
						

						<para>File transfer has been completed successfully. </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneChatMessageStateDeliveredToUser">
					<detaileddescription>
						

						<para>Message successfully delivered and acknowledged to destination </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneChatMessageStateDisplayed">
					<detaileddescription>
						

						<para>Message displayed to the remote user </para>
						          
					</detaileddescription>
					
        
				</value>
			</values>
		</enum>
		<enum deprecated="false" name="LinphoneConfiguringState">
			<detaileddescription>
				

				<para>
					LinphoneGlobalState describes the global state of the LinphoneCore object. It is notified via the 
					<ref>LinphoneCoreVTable::global_state_changed</ref>
					 
				</para>
				        
			</detaileddescription>
			
        
			<values>
				<value deprecated="false" name="LinphoneConfiguringSuccessful">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneConfiguringFailed">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneConfiguringSkipped">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
			</values>
		</enum>
		<enum deprecated="false" name="LinphoneCoreLogCollectionUploadState">
			<detaileddescription>
				

				<para>LinphoneCoreLogCollectionUploadState is used to notify if log collection upload have been succesfully delivered or not. </para>
				        
			</detaileddescription>
			
        
			<values>
				<value deprecated="false" name="LinphoneCoreLogCollectionUploadStateInProgress">
					<detaileddescription>
						

						<para>Delivery in progress </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneCoreLogCollectionUploadStateDelivered">
					<detaileddescription>
						

						<para>Log collection upload successfully delivered and acknowledged by remote end point </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneCoreLogCollectionUploadStateNotDelivered">
					<detaileddescription>
						

						<para>Log collection upload was not delivered </para>
						          
					</detaileddescription>
					
        
				</value>
			</values>
		</enum>
		<enum deprecated="true" name="LinphoneFirewallPolicy">
			<detaileddescription>
				

				<para>Policy to use to pass through firewalls.</para>
				<para/>
				        
			</detaileddescription>
			
        
			<values>
				<value deprecated="false" name="LinphonePolicyNoFirewall">
					<detaileddescription>
						

						<para>Do not use any mechanism to pass through firewalls </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphonePolicyUseNatAddress">
					<detaileddescription>
						

						<para>Use the specified public adress </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphonePolicyUseStun">
					<detaileddescription>
						

						<para>Use a STUN server to get the public address </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphonePolicyUseIce">
					<detaileddescription>
						

						<para>Use the ICE protocol </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphonePolicyUseUpnp">
					<detaileddescription>
						

						<para>Use the uPnP protocol </para>
						          
					</detaileddescription>
					
        
				</value>
			</values>
		</enum>
		<enum deprecated="false" name="LinphoneFriendListStatus">
			<detaileddescription>
				

				<para>Enum describing the status of a LinphoneFriendList operation. </para>
				        
			</detaileddescription>
			
        
			<values>
				<value deprecated="false" name="LinphoneFriendListOK">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneFriendListNonExistentFriend">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneFriendListInvalidFriend">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
			</values>
		</enum>
		<enum deprecated="false" name="LinphoneFriendListSyncStatus">
			<detaileddescription>
				

				<para>Enum describing the status of a CardDAV synchronization </para>
				        
			</detaileddescription>
			
        
			<values>
				<value deprecated="false" name="LinphoneFriendListSyncStarted">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneFriendListSyncSuccessful">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneFriendListSyncFailure">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
			</values>
		</enum>
		<enum deprecated="false" name="LinphoneGlobalState">
			<detaileddescription>
				

				<para>
					LinphoneGlobalState describes the global state of the LinphoneCore object. It is notified via the 
					<ref>LinphoneCoreVTable::global_state_changed</ref>
					 
				</para>
				        
			</detaileddescription>
			
        
			<values>
				<value deprecated="false" name="LinphoneGlobalOff">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneGlobalStartup">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneGlobalOn">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneGlobalShutdown">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneGlobalConfiguring">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
			</values>
		</enum>
		<enum deprecated="false" name="LinphoneIceState">
			<detaileddescription>
				

				<para>Enum describing ICE states. </para>
				        
			</detaileddescription>
			
        
			<values>
				<value deprecated="false" name="LinphoneIceStateNotActivated">
					<detaileddescription>
						

						<para>ICE has not been activated for this call or stream </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneIceStateFailed">
					<detaileddescription>
						

						<para>ICE processing has failed </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneIceStateInProgress">
					<detaileddescription>
						

						<para>ICE process is in progress </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneIceStateHostConnection">
					<detaileddescription>
						

						<para>ICE has established a direct connection to the remote host </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneIceStateReflexiveConnection">
					<detaileddescription>
						

						<para>ICE has established a connection to the remote host through one or several NATs </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneIceStateRelayConnection">
					<detaileddescription>
						

						<para>ICE has established a connection through a relay </para>
						          
					</detaileddescription>
					
        
				</value>
			</values>
		</enum>
		<enum deprecated="false" name="LinphoneLimeState">
			<detaileddescription>
        </detaileddescription>
			
        
			<values>
				<value deprecated="false" name="LinphoneLimeDisabled">
					<detaileddescription>
						

						<para>Lime is not used at all </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneLimeMandatory">
					<detaileddescription>
						

						<para>Lime is always used </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneLimePreferred">
					<detaileddescription>
						

						<para>Lime is used only if we already shared a secret with remote </para>
						          
					</detaileddescription>
					
        
				</value>
			</values>
		</enum>
		<enum deprecated="false" name="LinphoneLogCollectionState">
			<detaileddescription>
        </detaileddescription>
			
        
			<values>
				<value deprecated="false" name="LinphoneLogCollectionDisabled">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneLogCollectionEnabled">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneLogCollectionEnabledWithoutPreviousLogHandler">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
			</values>
		</enum>
		<enum deprecated="false" name="LinphoneMediaDirection">
			<detaileddescription>
				

				<para>Indicates for a given media the stream direction </para>
				        
			</detaileddescription>
			
        
			<values>
				<value deprecated="false" name="LinphoneMediaDirectionInvalid">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneMediaDirectionInactive">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneMediaDirectionSendOnly">
					<detaileddescription>
						

						<para>No active media not supported yet </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneMediaDirectionRecvOnly">
					<detaileddescription>
						

						<para>Send only mode </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneMediaDirectionSendRecv">
					<detaileddescription>
						

						<para>recv only mode </para>
						          
					</detaileddescription>
					
        
				</value>
			</values>
		</enum>
		<enum deprecated="false" name="LinphoneMediaEncryption">
			<detaileddescription>
				

				<para>Enum describing type of media encryption types. </para>
				        
			</detaileddescription>
			
        
			<values>
				<value deprecated="false" name="LinphoneMediaEncryptionNone">
					<detaileddescription>
						

						<para>No media encryption is used </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneMediaEncryptionSRTP">
					<detaileddescription>
						

						<para>Use SRTP media encryption </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneMediaEncryptionZRTP">
					<detaileddescription>
						

						<para>Use ZRTP media encryption </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneMediaEncryptionDTLS">
					<detaileddescription>
						

						<para>Use DTLS media encryption </para>
						          
					</detaileddescription>
					
        
				</value>
			</values>
		</enum>
		<enum deprecated="true" name="LinphoneOnlineStatus">
			<detaileddescription>
				

				<para>Enum describing remote friend status </para>
				        
			</detaileddescription>
			
        
			<values>
				<value deprecated="false" name="LinphoneStatusOffline">
					<detaileddescription>
						

						<para>Offline </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneStatusOnline">
					<detaileddescription>
						

						<para>Online </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneStatusBusy">
					<detaileddescription>
						

						<para>Busy </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneStatusBeRightBack">
					<detaileddescription>
						

						<para>Be right back </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneStatusAway">
					<detaileddescription>
						

						<para>Away </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneStatusOnThePhone">
					<detaileddescription>
						

						<para>On the phone </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneStatusOutToLunch">
					<detaileddescription>
						

						<para>Out to lunch </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneStatusDoNotDisturb">
					<detaileddescription>
						

						<para>Do not disturb </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneStatusMoved">
					<detaileddescription>
						

						<para>
							Moved in this sate, call can be redirected if an alternate contact address has been set using function 
							<ref>linphone_core_set_presence_info()</ref>
							 
						</para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneStatusAltService">
					<detaileddescription>
						

						<para>Using another messaging service </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneStatusPending">
					<detaileddescription>
						

						<para>Pending </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneStatusVacation">
					<detaileddescription>
						

						<para>Vacation </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneStatusEnd">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
			</values>
		</enum>
		<enum deprecated="false" name="LinphonePrivacy">
			<detaileddescription>
				

				<para>Defines privacy policy to apply as described by rfc3323 </para>
				        
			</detaileddescription>
			
        
			<values>
				<value deprecated="false" name="LinphonePrivacyNone">
					<detaileddescription>
						

						<para>Privacy services must not perform any privacy function </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphonePrivacyUser">
					<detaileddescription>
						

						<para>
							Request that privacy services provide a user-level privacy function. With this mode, &quot;from&quot; header is hidden, usually replaced by From: &quot;Anonymous&quot; &lt;sip:
							<ulink url="mailto:anonymous@anonymous.invalid">anonymous@anonymous.invalid</ulink>
							&gt; 
						</para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphonePrivacyHeader">
					<detaileddescription>
						

						<para>Request that privacy services modify headers that cannot be set arbitrarily by the user (Contact/Via). </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphonePrivacySession">
					<detaileddescription>
						

						<para>Request that privacy services provide privacy for session media </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphonePrivacyId">
					<detaileddescription>
						

						<para>rfc3325 The presence of this privacy type in a Privacy header field indicates that the user would like the Network Asserted Identity to be kept private with respect to SIP entities outside the Trust Domain with which the user authenticated. Note that a user requesting multiple types of privacy MUST include all of the requested privacy types in its Privacy header field value </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphonePrivacyCritical">
					<detaileddescription>
						

						<para>Privacy service must perform the specified services or fail the request </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphonePrivacyDefault">
					<detaileddescription>
						

						<para>
							Special keyword to use privacy as defined either globally or by proxy using 
							<ref>linphone_proxy_config_set_privacy()</ref>
							 
						</para>
						          
					</detaileddescription>
					
        
				</value>
			</values>
		</enum>
		<enum deprecated="false" name="LinphonePublishState">
			<detaileddescription>
				

				<para>Enum for publish states. </para>
				        
			</detaileddescription>
			
        
			<values>
				<value deprecated="false" name="LinphonePublishNone">
					<detaileddescription>
						

						<para>Initial state, do not use </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphonePublishProgress">
					<detaileddescription>
						

						<para>An outgoing publish was created and submitted </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphonePublishOk">
					<detaileddescription>
						

						<para>Publish is accepted. </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphonePublishError">
					<detaileddescription>
						

						<para>
							Publish encoutered an error, 
							<ref>linphone_event_get_reason()</ref>
							 gives reason code 
						</para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphonePublishExpiring">
					<detaileddescription>
						

						<para>Publish is about to expire, only sent if [sip]-&gt;refresh_generic_publish property is set to 0. </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphonePublishCleared">
					<detaileddescription>
						

						<para>Event has been un published </para>
						          
					</detaileddescription>
					
        
				</value>
			</values>
		</enum>
		<enum deprecated="false" name="LinphoneReason">
			<detaileddescription>
				

				<para>
					Enum describing various failure reasons or contextual information for some events. 
					<see>linphone_call_get_reason() </see>
					<see>linphone_proxy_config_get_error() </see>
					<see>linphone_error_info_get_reason() </see>
				</para>
				        
			</detaileddescription>
			
        
			<values>
				<value deprecated="false" name="LinphoneReasonNone">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneReasonNoResponse">
					<detaileddescription>
						

						<para>No response received from remote </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneReasonForbidden">
					<detaileddescription>
						

						<para>Authentication failed due to bad credentials or resource forbidden </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneReasonDeclined">
					<detaileddescription>
						

						<para>The call has been declined </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneReasonNotFound">
					<detaileddescription>
						

						<para>Destination of the call was not found </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneReasonNotAnswered">
					<detaileddescription>
						

						<para>The call was not answered in time (request timeout) </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneReasonBusy">
					<detaileddescription>
						

						<para>Phone line was busy </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneReasonUnsupportedContent">
					<detaileddescription>
						

						<para>Unsupported content </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneReasonIOError">
					<detaileddescription>
						

						<para>Transport error: connection failures, disconnections etc... </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneReasonDoNotDisturb">
					<detaileddescription>
						

						<para>Do not disturb reason </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneReasonUnauthorized">
					<detaileddescription>
						

						<para>Operation is unauthorized because missing credential </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneReasonNotAcceptable">
					<detaileddescription>
						

						<para>Operation is rejected due to incompatible or unsupported media parameters </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneReasonNoMatch">
					<detaileddescription>
						

						<para>Operation could not be executed by server or remote client because it didn't have any context for it </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneReasonMovedPermanently">
					<detaileddescription>
						

						<para>Resource moved permanently </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneReasonGone">
					<detaileddescription>
						

						<para>Resource no longer exists </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneReasonTemporarilyUnavailable">
					<detaileddescription>
						

						<para>Temporarily unavailable </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneReasonAddressIncomplete">
					<detaileddescription>
						

						<para>Address incomplete </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneReasonNotImplemented">
					<detaileddescription>
						

						<para>Not implemented </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneReasonBadGateway">
					<detaileddescription>
						

						<para>Bad gateway </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneReasonServerTimeout">
					<detaileddescription>
						

						<para>Server timeout </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneReasonUnknown">
					<detaileddescription>
						

						<para>Unknown reason </para>
						          
					</detaileddescription>
					
        
				</value>
			</values>
		</enum>
		<enum deprecated="false" name="LinphoneRegistrationState">
			<detaileddescription>
				

				<para>LinphoneRegistrationState describes proxy registration states. </para>
				        
			</detaileddescription>
			
        
			<values>
				<value deprecated="false" name="LinphoneRegistrationNone">
					<detaileddescription>
						

						<para>Initial state for registrations </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneRegistrationProgress">
					<detaileddescription>
						

						<para>Registration is in progress </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneRegistrationOk">
					<detaileddescription>
						

						<para>Registration is successful </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneRegistrationCleared">
					<detaileddescription>
						

						<para>Unregistration succeeded </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneRegistrationFailed">
					<detaileddescription>
						

						<para>Registration failed </para>
						          
					</detaileddescription>
					
        
				</value>
			</values>
		</enum>
		<enum deprecated="false" name="LinphoneStreamType">
			<detaileddescription>
				

				<para>Enum describing the stream types. </para>
				        
			</detaileddescription>
			
        
			<values>
				<value deprecated="false" name="LinphoneStreamTypeAudio">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneStreamTypeVideo">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneStreamTypeText">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneStreamTypeUnknown">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
			</values>
		</enum>
		<enum deprecated="false" name="LinphoneSubscribePolicy">
			<detaileddescription>
				

				<para>
					Enum controlling behavior for incoming subscription request. 
					<linebreak/>
					
 Use by 
					<ref>linphone_friend_set_inc_subscribe_policy()</ref>
					 
				</para>
				        
			</detaileddescription>
			
        
			<values>
				<value deprecated="false" name="LinphoneSPWait">
					<detaileddescription>
						

						<para>
							Does not automatically accept an incoming subscription request. This policy implies that a decision has to be taken for each incoming subscription request notified by callback 
							<ref>LinphoneCoreVTable.new_subscription_requested</ref>
							 
						</para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneSPDeny">
					<detaileddescription>
						

						<para>Rejects incoming subscription request. </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneSPAccept">
					<detaileddescription>
						

						<para>Automatically accepts a subscription request. </para>
						          
					</detaileddescription>
					
        
				</value>
			</values>
		</enum>
		<enum deprecated="false" name="LinphoneSubscriptionDir">
			<detaileddescription>
				

				<para>Enum for subscription direction (incoming or outgoing). </para>
				        
			</detaileddescription>
			
        
			<values>
				<value deprecated="false" name="LinphoneSubscriptionIncoming">
					<detaileddescription>
						

						<para>Incoming subscription. </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneSubscriptionOutgoing">
					<detaileddescription>
						

						<para>Outgoing subscription. </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneSubscriptionInvalidDir">
					<detaileddescription>
						

						<para>Invalid subscription direction. </para>
						          
					</detaileddescription>
					
        
				</value>
			</values>
		</enum>
		<enum deprecated="false" name="LinphoneSubscriptionState">
			<detaileddescription>
				

				<para>Enum for subscription states. LinphoneSubscriptionTerminated and LinphoneSubscriptionError are final states. </para>
				        
			</detaileddescription>
			
        
			<values>
				<value deprecated="false" name="LinphoneSubscriptionNone">
					<detaileddescription>
						

						<para>Initial state, should not be used. </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneSubscriptionOutgoingProgress">
					<detaileddescription>
						

						<para>An outgoing subcription was sent </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneSubscriptionIncomingReceived">
					<detaileddescription>
						

						<para>An incoming subcription is received </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneSubscriptionPending">
					<detaileddescription>
						

						<para>Subscription is pending, waiting for user approval </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneSubscriptionActive">
					<detaileddescription>
						

						<para>Subscription is accepted. </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneSubscriptionTerminated">
					<detaileddescription>
						

						<para>Subscription is terminated normally </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneSubscriptionError">
					<detaileddescription>
						

						<para>
							Subscription was terminated by an error, indicated by 
							<ref>linphone_event_get_reason()</ref>
							. 
						</para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneSubscriptionExpiring">
					<detaileddescription>
						

						<para>Subscription is about to expire, only sent if [sip]-&gt;refresh_generic_subscribe property is set to 0. </para>
						          
					</detaileddescription>
					
        
				</value>
			</values>
		</enum>
		<enum deprecated="false" name="LinphoneTransportType">
			<detaileddescription>
				

				<para>Enum describing transport type for LinphoneAddress. </para>
				        
			</detaileddescription>
			
        
			<values>
				<value deprecated="false" name="LinphoneTransportUdp">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneTransportTcp">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneTransportTls">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneTransportDtls">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
			</values>
		</enum>
		<enum deprecated="false" name="LinphoneTunnelMode">
			<detaileddescription>
				

				<para>Enum describing the tunnel modes. </para>
				        
			</detaileddescription>
			
        
			<values>
				<value deprecated="false" name="LinphoneTunnelModeDisable">
					<detaileddescription>
						

						<para>The tunnel is disabled. </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneTunnelModeEnable">
					<detaileddescription>
						

						<para>The tunnel is enabled. </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneTunnelModeAuto">
					<detaileddescription>
						

						<para>The tunnel is enabled automatically if it is required. </para>
						          
					</detaileddescription>
					
        
				</value>
			</values>
		</enum>
		<enum deprecated="false" name="LinphoneUpnpState">
			<detaileddescription>
				

				<para>Enum describing uPnP states. </para>
				        
			</detaileddescription>
			
        
			<values>
				<value deprecated="false" name="LinphoneUpnpStateIdle">
					<detaileddescription>
						

						<para>uPnP is not activate </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneUpnpStatePending">
					<detaileddescription>
						

						<para>uPnP process is in progress </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneUpnpStateAdding">
					<detaileddescription>
						

						<para>Internal use: Only used by port binding </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneUpnpStateRemoving">
					<detaileddescription>
						

						<para>Internal use: Only used by port binding </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneUpnpStateNotAvailable">
					<detaileddescription>
						

						<para>uPnP is not available </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneUpnpStateOk">
					<detaileddescription>
						

						<para>uPnP is enabled </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneUpnpStateKo">
					<detaileddescription>
						

						<para>uPnP processing has failed </para>
						          
					</detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneUpnpStateBlacklisted">
					<detaileddescription>
						

						<para>IGD router is blacklisted </para>
						          
					</detaileddescription>
					
        
				</value>
			</values>
		</enum>
		<enum deprecated="false" name="LinphoneXmlRpcArgType">
			<detaileddescription>
				

				<para>Enum describing the types of argument for LinphoneXmlRpcRequest. </para>
				        
			</detaileddescription>
			
        
			<values>
				<value deprecated="false" name="LinphoneXmlRpcArgNone">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneXmlRpcArgInt">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneXmlRpcArgString">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
			</values>
		</enum>
		<enum deprecated="false" name="LinphoneXmlRpcStatus">
			<detaileddescription>
				

				<para>Enum describing the status of a LinphoneXmlRpcRequest. </para>
				        
			</detaileddescription>
			
        
			<values>
				<value deprecated="false" name="LinphoneXmlRpcStatusPending">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneXmlRpcStatusOk">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
				<value deprecated="false" name="LinphoneXmlRpcStatusFailed">
					<detaileddescription>
          </detaileddescription>
					
        
				</value>
			</values>
		</enum>
	</enums>
	<classes>
		<class cfunctionprefix="linphone_account_creator_" deprecated="false" destroyable="false" name="LinphoneAccountCreator" refcountable="true">
			<classmethods>
				<classmethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_new">
					<return completetype="LinphoneAccountCreator *" type="LinphoneAccountCreator">
						<description>
							<para>The new LinphoneAccountCreator object </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="core" type="LinphoneCore">
							<description>
								

								<para>The LinphoneCore used for the XML-RPC communication </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="xmlrpc_url" type="char">
							<description>
								

								<para>The URL to the XML-RPC server. Must be NON NULL. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Create a LinphoneAccountCreator. 
							<description>
								<para>The new LinphoneAccountCreator object </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</classmethod>
			</classmethods>
			<instancemethods>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_activate_account">
					<return completetype="LinphoneAccountCreatorStatus" type="LinphoneAccountCreatorStatus">
						<description>
							<para>LinphoneAccountCreatorOk if the request has been sent, LinphoneAccountCreatorReqFailed otherwise </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneAccountCreator *" name="creator" type="LinphoneAccountCreator">
							<description>
								

								<para>LinphoneAccountCreator object </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Send an XML-RPC request to activate a Linphone account. 
							<description>
								<para>LinphoneAccountCreatorOk if the request has been sent, LinphoneAccountCreatorReqFailed otherwise </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_activate_phone_number_link">
					<return completetype="LinphoneAccountCreatorStatus" type="LinphoneAccountCreatorStatus">
						<description>
							<para>LinphoneAccountCreatorOK if the request has been sent, LinphoneAccountCreatorReqFailed otherwise </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneAccountCreator *" name="creator" type="LinphoneAccountCreator">
							<description>
								

								<para>LinphoneAccountCreator object </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Send an XML-RPC request to activate the link of a phone number with a Linphone account. 
							<description>
								<para>LinphoneAccountCreatorOK if the request has been sent, LinphoneAccountCreatorReqFailed otherwise </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_configure">
					<return completetype="LinphoneProxyConfig *" type="LinphoneProxyConfig">
						<description>
							<para>A LinphoneProxyConfig object if successful, NULL otherwise </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const LinphoneAccountCreator *" name="creator" type="LinphoneAccountCreator">
							<description>
								

								<para>LinphoneAccountCreator object </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Configure an account (create a proxy config and authentication info for it). 
							<description>
								<para>A LinphoneProxyConfig object if successful, NULL otherwise </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_create_account">
					<return completetype="LinphoneAccountCreatorStatus" type="LinphoneAccountCreatorStatus">
						<description>
							<para>LinphoneAccountCreatorOk if the request has been sent, LinphoneAccountCreatorReqFailed otherwise </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneAccountCreator *" name="creator" type="LinphoneAccountCreator">
							<description>
								

								<para>LinphoneAccountCreator object </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Send an XML-RPC request to create a Linphone account. 
							<description>
								<para>LinphoneAccountCreatorOk if the request has been sent, LinphoneAccountCreatorReqFailed otherwise </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_is_account_activated">
					<return completetype="LinphoneAccountCreatorStatus" type="LinphoneAccountCreatorStatus">
						<description>
							<para>LinphoneAccountCreatorOk if the request has been sent, LinphoneAccountCreatorReqFailed otherwise </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneAccountCreator *" name="creator" type="LinphoneAccountCreator">
							<description>
								

								<para>LinphoneAccountCreator object </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Send an XML-RPC request to test the validation of a Linphone account. 
							<description>
								<para>LinphoneAccountCreatorOk if the request has been sent, LinphoneAccountCreatorReqFailed otherwise </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_is_account_linked">
					<return completetype="LinphoneAccountCreatorStatus" type="LinphoneAccountCreatorStatus">
						<description>
							<para>if this account is linked with a phone number </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneAccountCreator *" name="creator" type="LinphoneAccountCreator">
							<description>
								

								<para>LinphoneAccountCreator object </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Send an XML-RPC request to ask if an account is linked with a phone number 
							<description>
								<para>if this account is linked with a phone number </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_is_account_used">
					<return completetype="LinphoneAccountCreatorStatus" type="LinphoneAccountCreatorStatus">
						<description>
							<para>LinphoneAccountCreatorOk if the request has been sent, LinphoneAccountCreatorReqFailed otherwise </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneAccountCreator *" name="creator" type="LinphoneAccountCreator">
							<description>
								

								<para>LinphoneAccountCreator object </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Send an XML-RPC request to test the existence of a Linphone account. 
							<description>
								<para>LinphoneAccountCreatorOk if the request has been sent, LinphoneAccountCreatorReqFailed otherwise </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_is_phone_number_used">
					<return completetype="LinphoneAccountCreatorStatus" type="LinphoneAccountCreatorStatus">
						<description>
							<para>LinphoneAccountCreatorOk if the request has been sent, LinphoneAccountCreatorReqFailed otherwise </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneAccountCreator *" name="creator" type="LinphoneAccountCreator">
							<description>
								

								<para>LinphoneAccountCreator object </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Send an XML-RPC request to test the existence a phone number with a Linphone account. 
							<description>
								<para>LinphoneAccountCreatorOk if the request has been sent, LinphoneAccountCreatorReqFailed otherwise </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_link_phone_number_with_account">
					<return completetype="LinphoneAccountCreatorStatus" type="LinphoneAccountCreatorStatus">
						<description>
							<para>LinphoneAccountCreatorOK if the request has been sent, LinphoneAccountCreatorReqFailed otherwise </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneAccountCreator *" name="creator" type="LinphoneAccountCreator">
							<description>
								

								<para>LinphoneAccountCreator object </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Send an XML-RPC request to link a phone number with a Linphone account. 
							<description>
								<para>LinphoneAccountCreatorOK if the request has been sent, LinphoneAccountCreatorReqFailed otherwise </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_ref">
					<return completetype="LinphoneAccountCreator *" type="LinphoneAccountCreator">
						<description>
							<para>The same LinphoneAccountCreator object. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneAccountCreator *" name="creator" type="LinphoneAccountCreator">
							<description>
								

								<para>LinphoneAccountCreator object. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Acquire a reference to the LinphoneAccountCreator. 
							<description>
								<para>The same LinphoneAccountCreator object. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_set_phone_number">
					<return completetype="LinphoneAccountCreatorStatus" type="LinphoneAccountCreatorStatus">
						<description>
							<para>LinphoneAccountCreatorOk if everything is OK, or a specific error otherwise. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneAccountCreator *" name="creator" type="LinphoneAccountCreator">
							<description>
								

								<para>LinphoneAccountCreator object </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="phone_number" type="char">
							<description>
								

								<para>The phone number to set </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="country_code" type="char">
							<description>
								

								<para>Country code to associate phone number with </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Set the phone number normalized. 
							<description>
								<para>LinphoneAccountCreatorOk if everything is OK, or a specific error otherwise. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_unref">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneAccountCreator *" name="creator" type="LinphoneAccountCreator">
							<description>
								

								<para>LinphoneAccountCreator object. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Release reference to the LinphoneAccountCreator. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_update_password">
					<return completetype="LinphoneAccountCreatorStatus" type="LinphoneAccountCreatorStatus">
						<description>
							<para>LinphoneAccountCreatorOk if everything is OK, or a specific error otherwise. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneAccountCreator *" name="creator" type="LinphoneAccountCreator">
							<description>
								

								<para>LinphoneAccountCreator object </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="new_pwd" type="char">
							<description>
								

								<para>const char * : new password for the account creator </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Update the password. 
							<description>
								<para>LinphoneAccountCreatorOk if everything is OK, or a specific error otherwise. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
			</instancemethods>
			<properties>
				<property name="activation_code">
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_set_activation_code">
						<return completetype="LinphoneAccountCreatorStatus" type="LinphoneAccountCreatorStatus"/>
						<arguments>
							<argument completetype="LinphoneAccountCreator *" name="creator" type="LinphoneAccountCreator">
								<description>
									

									<para>LinphoneAccountCreator object </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="activation_code" type="char">
								<description>
									

									<para>The activation code to set </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the activation code. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="callbacks">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_get_callbacks">
						<return completetype="LinphoneAccountCreatorCbs *" type="LinphoneAccountCreatorCbs">
							<description>
								<para>The LinphoneAccountCreatorCbs object associated with the LinphoneAccountCreator. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneAccountCreator *" name="creator" type="LinphoneAccountCreator">
								<description>
									

									<para>LinphoneAccountCreator object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the LinphoneAccountCreatorCbs object associated with a LinphoneAccountCreator. 
								<description>
									<para>The LinphoneAccountCreatorCbs object associated with the LinphoneAccountCreator. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="display_name">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_get_display_name">
						<return completetype="const char *" type="char">
							<description>
								<para>The display name of the LinphoneAccountCreator </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneAccountCreator *" name="creator" type="LinphoneAccountCreator">
								<description>
									

									<para>LinphoneAccountCreator object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the email. 
								<description>
									<para>The display name of the LinphoneAccountCreator </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_set_display_name">
						<return completetype="LinphoneAccountCreatorStatus" type="LinphoneAccountCreatorStatus">
							<description>
								<para>LinphoneAccountCreatorOk if everything is OK, or a specific error otherwise. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneAccountCreator *" name="creator" type="LinphoneAccountCreator">
								<description>
									

									<para>LinphoneAccountCreator object </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="display_name" type="char">
								<description>
									

									<para>The display name to set </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Set the email. 
								<description>
									<para>LinphoneAccountCreatorOk if everything is OK, or a specific error otherwise. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="domain">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_get_domain">
						<return completetype="const char *" type="char">
							<description>
								<para>The domain of the LinphoneAccountCreator </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneAccountCreator *" name="creator" type="LinphoneAccountCreator">
								<description>
									

									<para>LinphoneAccountCreator object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the domain. 
								<description>
									<para>The domain of the LinphoneAccountCreator </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_set_domain">
						<return completetype="LinphoneAccountCreatorStatus" type="LinphoneAccountCreatorStatus">
							<description>
								<para>LinphoneAccountCreatorOk if everything is OK, or a specific error otherwise. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneAccountCreator *" name="creator" type="LinphoneAccountCreator">
								<description>
									

									<para>LinphoneAccountCreator object </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="domain" type="char">
								<description>
									

									<para>The domain to set </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Set the domain. 
								<description>
									<para>LinphoneAccountCreatorOk if everything is OK, or a specific error otherwise. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="email">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_get_email">
						<return completetype="const char *" type="char">
							<description>
								<para>The email of the LinphoneAccountCreator </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneAccountCreator *" name="creator" type="LinphoneAccountCreator">
								<description>
									

									<para>LinphoneAccountCreator object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the email. 
								<description>
									<para>The email of the LinphoneAccountCreator </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_set_email">
						<return completetype="LinphoneAccountCreatorStatus" type="LinphoneAccountCreatorStatus">
							<description>
								<para>LinphoneAccountCreatorOk if everything is OK, or a specific error otherwise. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneAccountCreator *" name="creator" type="LinphoneAccountCreator">
								<description>
									

									<para>LinphoneAccountCreator object </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="email" type="char">
								<description>
									

									<para>The email to set </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Set the email. 
								<description>
									<para>LinphoneAccountCreatorOk if everything is OK, or a specific error otherwise. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="ha1">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_get_ha1">
						<return completetype="const char *" type="char">
							<description>
								<para>The ha1 of the LinphoneAccountCreator </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneAccountCreator *" name="creator" type="LinphoneAccountCreator">
								<description>
									

									<para>LinphoneAccountCreator object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the ha1. 
								<description>
									<para>The ha1 of the LinphoneAccountCreator </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_set_ha1">
						<return completetype="LinphoneAccountCreatorStatus" type="LinphoneAccountCreatorStatus">
							<description>
								<para>LinphoneAccountCreatorOk if everything is OK, or a specific error otherwise. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneAccountCreator *" name="creator" type="LinphoneAccountCreator">
								<description>
									

									<para>LinphoneAccountCreator object </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="ha1" type="char">
								<description>
									

									<para>The ha1 to set </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Set the ha1. 
								<description>
									<para>LinphoneAccountCreatorOk if everything is OK, or a specific error otherwise. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="language">
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_set_language">
						<return completetype="LinphoneAccountCreatorStatus" type="LinphoneAccountCreatorStatus"/>
						<arguments>
							<argument completetype="LinphoneAccountCreator *" name="creator" type="LinphoneAccountCreator">
								<description>
									

									<para>LinphoneAccountCreator object </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="lang" type="char">
								<description>
									

									<para>The language to use </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the language to use in email or SMS if supported. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="password">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_get_password">
						<return completetype="const char *" type="char">
							<description>
								<para>The password of the LinphoneAccountCreator </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneAccountCreator *" name="creator" type="LinphoneAccountCreator">
								<description>
									

									<para>LinphoneAccountCreator object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the password. 
								<description>
									<para>The password of the LinphoneAccountCreator </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_set_password">
						<return completetype="LinphoneAccountCreatorStatus" type="LinphoneAccountCreatorStatus">
							<description>
								<para>LinphoneAccountCreatorOk if everything is OK, or a specific error otherwise. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneAccountCreator *" name="creator" type="LinphoneAccountCreator">
								<description>
									

									<para>LinphoneAccountCreator object </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="password" type="char">
								<description>
									

									<para>The password to set </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Set the password. 
								<description>
									<para>LinphoneAccountCreatorOk if everything is OK, or a specific error otherwise. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="phone_number">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_get_phone_number">
						<return completetype="const char *" type="char">
							<description>
								<para>The phone number of the LinphoneAccountCreator </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneAccountCreator *" name="creator" type="LinphoneAccountCreator">
								<description>
									

									<para>LinphoneAccountCreator object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the RFC 3966 normalized phone number. 
								<description>
									<para>The phone number of the LinphoneAccountCreator </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="route">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_get_route">
						<return completetype="const char *" type="char">
							<description>
								<para>The route of the LinphoneAccountCreator </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneAccountCreator *" name="creator" type="LinphoneAccountCreator">
								<description>
									

									<para>LinphoneAccountCreator object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the route. 
								<description>
									<para>The route of the LinphoneAccountCreator </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_set_route">
						<return completetype="LinphoneAccountCreatorStatus" type="LinphoneAccountCreatorStatus">
							<description>
								<para>LinphoneAccountCreatorOk if everything is OK, or a specific error otherwise. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneAccountCreator *" name="creator" type="LinphoneAccountCreator">
								<description>
									

									<para>LinphoneAccountCreator object </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="route" type="char">
								<description>
									

									<para>The route to set </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Set the route. 
								<description>
									<para>LinphoneAccountCreatorOk if everything is OK, or a specific error otherwise. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="transport">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_get_transport">
						<return completetype="LinphoneTransportType" type="LinphoneTransportType">
							<description>
								<para>The transport of the LinphoneAccountCreator </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneAccountCreator *" name="creator" type="LinphoneAccountCreator">
								<description>
									

									<para>LinphoneAccountCreator object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the transport. 
								<description>
									<para>The transport of the LinphoneAccountCreator </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_set_transport">
						<return completetype="LinphoneAccountCreatorStatus" type="LinphoneAccountCreatorStatus">
							<description>
								<para>LinphoneAccountCreatorOk if everything is OK, or a specific error if given transport is not supported by linphone core. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneAccountCreator *" name="creator" type="LinphoneAccountCreator">
								<description>
									

									<para>LinphoneAccountCreator object </para>
								</description>
								

							</argument>
							<argument completetype="LinphoneTransportType" name="transport" type="LinphoneTransportType">
								<description>
									

									<para>The transport to set </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Set the transport. 
								<description>
									<para>LinphoneAccountCreatorOk if everything is OK, or a specific error if given transport is not supported by linphone core. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="user_data">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_get_user_data">
						<return completetype="void *" type="void">
							<description>
								<para>The user pointer associated with the LinphoneAccountCreator. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneAccountCreator *" name="creator" type="LinphoneAccountCreator">
								<description>
									

									<para>LinphoneAccountCreator object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Retrieve the user pointer associated with the LinphoneAccountCreator. 
								<description>
									<para>The user pointer associated with the LinphoneAccountCreator. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_set_user_data">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneAccountCreator *" name="creator" type="LinphoneAccountCreator">
								<description>
									

									<para>LinphoneAccountCreator object. </para>
								</description>
								

							</argument>
							<argument completetype="void *" name="ud" type="void">
								<description>
									

									<para>The user pointer to associate with the LinphoneAccountCreator. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Assign a user pointer to the LinphoneAccountCreator. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="username">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_get_username">
						<return completetype="const char *" type="char">
							<description>
								<para>The username of the LinphoneAccountCreator </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneAccountCreator *" name="creator" type="LinphoneAccountCreator">
								<description>
									

									<para>LinphoneAccountCreator object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the username. 
								<description>
									<para>The username of the LinphoneAccountCreator </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_set_username">
						<return completetype="LinphoneAccountCreatorStatus" type="LinphoneAccountCreatorStatus">
							<description>
								<para>LinphoneAccountCreatorOk if everything is OK, or a specific error otherwise. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneAccountCreator *" name="creator" type="LinphoneAccountCreator">
								<description>
									

									<para>LinphoneAccountCreator object </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="username" type="char">
								<description>
									

									<para>The username to set </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Set the username. 
								<description>
									<para>LinphoneAccountCreatorOk if everything is OK, or a specific error otherwise. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
			</properties>
			<detaileddescription>
				

				<para>The LinphoneAccountCreator object used to create an account on a server via XML-RPC. </para>
				        
			</detaileddescription>
			
        
		</class>
		<class cfunctionprefix="linphone_account_creator_cbs_" deprecated="false" destroyable="false" name="LinphoneAccountCreatorCbs" refcountable="true">
			<events>
				<event deprecated="false" name="LinphoneAccountCreatorCbsStatusCb">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneAccountCreator *" name="creator" type="LinphoneAccountCreator">
							<description>
								

								<para>LinphoneAccountCreator object </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneAccountCreatorStatus" name="status" type="LinphoneAccountCreatorStatus">
							<description>
								

								<para>The status of the LinphoneAccountCreator test existence operation that has just finished </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="resp" type="char"/>
					</arguments>
					<detaileddescription>
						

						<para>Callback to notify a status change of the account creator. </para>
						        
					</detaileddescription>
					
        
				</event>
			</events>
			<instancemethods>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_cbs_ref">
					<return completetype="LinphoneAccountCreatorCbs *" type="LinphoneAccountCreatorCbs">
						<description>
							<para>The same LinphoneAccountCreatorCbs object. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneAccountCreatorCbs *" name="cbs" type="LinphoneAccountCreatorCbs">
							<description>
								

								<para>LinphoneAccountCreatorCbs object. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Acquire a reference to a LinphoneAccountCreatorCbs object. 
							<description>
								<para>The same LinphoneAccountCreatorCbs object. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_cbs_unref">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneAccountCreatorCbs *" name="cbs" type="LinphoneAccountCreatorCbs">
							<description>
								

								<para>LinphoneAccountCreatorCbs object. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Release a reference to a LinphoneAccountCreatorCbs object. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
			</instancemethods>
			<properties>
				<property name="activate_account">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_cbs_get_activate_account">
						<return completetype="LinphoneAccountCreatorCbsStatusCb" type="LinphoneAccountCreatorCbsStatusCb">
							<description>
								<para>The current activate account callback. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneAccountCreatorCbs *" name="cbs" type="LinphoneAccountCreatorCbs">
								<description>
									

									<para>LinphoneAccountCreatorCbs object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the activate account callback. 
								<description>
									<para>The current activate account callback. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_cbs_set_activate_account">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneAccountCreatorCbs *" name="cbs" type="LinphoneAccountCreatorCbs">
								<description>
									

									<para>LinphoneAccountCreatorCbs object. </para>
								</description>
								

							</argument>
							<argument completetype="LinphoneAccountCreatorCbsStatusCb" name="cb" type="LinphoneAccountCreatorCbsStatusCb">
								<description>
									

									<para>The activate account callback to be used. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the activate account callback. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="activate_phone_number_link">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_cbs_get_activate_phone_number_link">
						<return completetype="LinphoneAccountCreatorCbsStatusCb" type="LinphoneAccountCreatorCbsStatusCb">
							<description>
								<para>The current activate phone number link callback. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneAccountCreatorCbs *" name="cbs" type="LinphoneAccountCreatorCbs">
								<description>
									

									<para>LinphoneAccountCreatorCbs object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the activate phone number link callback. 
								<description>
									<para>The current activate phone number link callback. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_cbs_set_activate_phone_number_link">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneAccountCreatorCbs *" name="cbs" type="LinphoneAccountCreatorCbs">
								<description>
									

									<para>LinphoneAccountCreatorCbs object. </para>
								</description>
								

							</argument>
							<argument completetype="LinphoneAccountCreatorCbsStatusCb" name="cb" type="LinphoneAccountCreatorCbsStatusCb">
								<description>
									

									<para>The activate phone number link callback to be used. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the activate phone number link callback. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="create_account">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_cbs_get_create_account">
						<return completetype="LinphoneAccountCreatorCbsStatusCb" type="LinphoneAccountCreatorCbsStatusCb">
							<description>
								<para>The current create account callback. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneAccountCreatorCbs *" name="cbs" type="LinphoneAccountCreatorCbs">
								<description>
									

									<para>LinphoneAccountCreatorCbs object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the create account callback. 
								<description>
									<para>The current create account callback. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_cbs_set_create_account">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneAccountCreatorCbs *" name="cbs" type="LinphoneAccountCreatorCbs">
								<description>
									

									<para>LinphoneAccountCreatorCbs object. </para>
								</description>
								

							</argument>
							<argument completetype="LinphoneAccountCreatorCbsStatusCb" name="cb" type="LinphoneAccountCreatorCbsStatusCb">
								<description>
									

									<para>The create account callback to be used. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the create account callback. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="is_account_activated">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_cbs_get_is_account_activated">
						<return completetype="LinphoneAccountCreatorCbsStatusCb" type="LinphoneAccountCreatorCbsStatusCb">
							<description>
								<para>The current validation tested callback. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneAccountCreatorCbs *" name="cbs" type="LinphoneAccountCreatorCbs">
								<description>
									

									<para>LinphoneAccountCreatorCbs object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the validation tested callback. 
								<description>
									<para>The current validation tested callback. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_cbs_set_is_account_activated">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneAccountCreatorCbs *" name="cbs" type="LinphoneAccountCreatorCbs">
								<description>
									

									<para>LinphoneAccountCreatorCbs object. </para>
								</description>
								

							</argument>
							<argument completetype="LinphoneAccountCreatorCbsStatusCb" name="cb" type="LinphoneAccountCreatorCbsStatusCb">
								<description>
									

									<para>The validation tested callback to be used. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the validation tested callback. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="is_account_linked">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_cbs_get_is_account_linked">
						<return completetype="LinphoneAccountCreatorCbsStatusCb" type="LinphoneAccountCreatorCbsStatusCb">
							<description>
								<para>The current linked tested callback. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneAccountCreatorCbs *" name="cbs" type="LinphoneAccountCreatorCbs">
								<description>
									

									<para>LinphoneAccountCreatorCbs object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the current linked tested callback. 
								<description>
									<para>The current linked tested callback. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_cbs_set_is_account_linked">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneAccountCreatorCbs *" name="cbs" type="LinphoneAccountCreatorCbs">
								<description>
									

									<para>LinphoneAccountCreatorCbs object. </para>
								</description>
								

							</argument>
							<argument completetype="LinphoneAccountCreatorCbsStatusCb" name="cb" type="LinphoneAccountCreatorCbsStatusCb">
								<description>
									

									<para>The existence tested callback to be used. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the linked tested callback </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="is_account_used">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_cbs_get_is_account_used">
						<return completetype="LinphoneAccountCreatorCbsStatusCb" type="LinphoneAccountCreatorCbsStatusCb">
							<description>
								<para>The current existence tested callback. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneAccountCreatorCbs *" name="cbs" type="LinphoneAccountCreatorCbs">
								<description>
									

									<para>LinphoneAccountCreatorCbs object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the existence tested callback. 
								<description>
									<para>The current existence tested callback. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_cbs_set_is_account_used">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneAccountCreatorCbs *" name="cbs" type="LinphoneAccountCreatorCbs">
								<description>
									

									<para>LinphoneAccountCreatorCbs object. </para>
								</description>
								

							</argument>
							<argument completetype="LinphoneAccountCreatorCbsStatusCb" name="cb" type="LinphoneAccountCreatorCbsStatusCb">
								<description>
									

									<para>The existence tested callback to be used. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the existence tested callback. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="is_phone_number_used">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_cbs_get_is_phone_number_used">
						<return completetype="LinphoneAccountCreatorCbsStatusCb" type="LinphoneAccountCreatorCbsStatusCb">
							<description>
								<para>The current is phone number used callback </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneAccountCreatorCbs *" name="cbs" type="LinphoneAccountCreatorCbs">
								<description>
									

									<para>LinphoneAccountCreatorCbs object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the is phone number used callback. 
								<description>
									<para>The current is phone number used callback </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_cbs_set_is_phone_number_used">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneAccountCreatorCbs *" name="cbs" type="LinphoneAccountCreatorCbs">
								<description>
									

									<para>LinphoneAccountCreatorCbs object. </para>
								</description>
								

							</argument>
							<argument completetype="LinphoneAccountCreatorCbsStatusCb" name="cb" type="LinphoneAccountCreatorCbsStatusCb">
								<description>
									

									<para>is phone number to be used. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the is phone number used callback. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="link_phone_number_with_account">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_cbs_get_link_phone_number_with_account">
						<return completetype="LinphoneAccountCreatorCbsStatusCb" type="LinphoneAccountCreatorCbsStatusCb">
							<description>
								<para>The current link phone number with account callback. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneAccountCreatorCbs *" name="cbs" type="LinphoneAccountCreatorCbs">
								<description>
									

									<para>LinphoneAccountCreatorCbs object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the link phone number with account callback. 
								<description>
									<para>The current link phone number with account callback. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_cbs_set_link_phone_number_with_account">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneAccountCreatorCbs *" name="cbs" type="LinphoneAccountCreatorCbs">
								<description>
									

									<para>LinphoneAccountCreatorCbs object. </para>
								</description>
								

							</argument>
							<argument completetype="LinphoneAccountCreatorCbsStatusCb" name="cb" type="LinphoneAccountCreatorCbsStatusCb">
								<description>
									

									<para>The link phone number with account callback to be used. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the link phone number with account callback. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="update_hash">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_cbs_get_update_hash">
						<return completetype="LinphoneAccountCreatorCbsStatusCb" type="LinphoneAccountCreatorCbsStatusCb">
							<description>
								<para>The user pointer associated with the LinphoneAccountCreatorCbs object. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneAccountCreatorCbs *" name="cbs" type="LinphoneAccountCreatorCbs">
								<description>
									

									<para>LinphoneAccountCreatorCbs object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Retrieve the user pointer associated with a LinphoneAccountCreatorCbs object. 
								<description>
									<para>The user pointer associated with the LinphoneAccountCreatorCbs object. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_cbs_set_update_hash">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneAccountCreatorCbs *" name="cbs" type="LinphoneAccountCreatorCbs">
								<description>
									

									<para>LinphoneAccountCreatorCbs object. </para>
								</description>
								

							</argument>
							<argument completetype="LinphoneAccountCreatorCbsStatusCb" name="cb" type="LinphoneAccountCreatorCbsStatusCb">
								<description>
									

									<para>The update hash callback to be used. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Assign a user pointer to a LinphoneAccountCreatorCbs object. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="user_data">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_cbs_get_user_data">
						<return completetype="void *" type="void">
							<description>
								<para>The user pointer associated with the LinphoneAccountCreatorCbs object. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneAccountCreatorCbs *" name="cbs" type="LinphoneAccountCreatorCbs">
								<description>
									

									<para>LinphoneAccountCreatorCbs object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Retrieve the user pointer associated with a LinphoneAccountCreatorCbs object. 
								<description>
									<para>The user pointer associated with the LinphoneAccountCreatorCbs object. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/account_creator.h" name="linphone_account_creator_cbs_set_user_data">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneAccountCreatorCbs *" name="cbs" type="LinphoneAccountCreatorCbs">
								<description>
									

									<para>LinphoneAccountCreatorCbs object. </para>
								</description>
								

							</argument>
							<argument completetype="void *" name="ud" type="void">
								<description>
									

									<para>The user pointer to associate with the LinphoneAccountCreatorCbs object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Assign a user pointer to a LinphoneAccountCreatorCbs object. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
			</properties>
			<detaileddescription>
				

				<para>An object to handle the callbacks for handling the LinphoneAccountCreator operations. </para>
				        
			</detaileddescription>
			
        
		</class>
		<class cfunctionprefix="linphone_address_" deprecated="false" destroyable="true" name="LinphoneAddress" refcountable="true">
			<classmethods>
				<classmethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/address.h" name="linphone_address_new">
					<return completetype="LinphoneAddress *" type="LinphoneAddress"/>
					<arguments>
						<argument completetype="const char *" name="addr" type="char"/>
					</arguments>
					<detaileddescription>
						

						<para>Constructs a LinphoneAddress object by parsing the user supplied address, given as a string. </para>
						        
					</detaileddescription>
					
        
				</classmethod>
			</classmethods>
			<instancemethods>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/address.h" name="linphone_address_as_string">
					<return completetype="char *" type="char"/>
					<arguments>
						<argument completetype="const LinphoneAddress *" name="u" type="LinphoneAddress"/>
					</arguments>
					<detaileddescription>
						

						<para>Returns the address as a string. The returned char * must be freed by the application. Use ms_free(). </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/address.h" name="linphone_address_as_string_uri_only">
					<return completetype="char *" type="char"/>
					<arguments>
						<argument completetype="const LinphoneAddress *" name="u" type="LinphoneAddress"/>
					</arguments>
					<detaileddescription>
						

						<para>Returns the SIP uri only as a string, that is display name is removed. The returned char * must be freed by the application. Use ms_free(). </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/address.h" name="linphone_address_clean">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneAddress *" name="uri" type="LinphoneAddress"/>
					</arguments>
					<detaileddescription>
						

						<para>Removes address's tags and uri headers so that it is displayable to the user. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/address.h" name="linphone_address_clone">
					<return completetype="LinphoneAddress *" type="LinphoneAddress"/>
					<arguments>
						<argument completetype="const LinphoneAddress *" name="addr" type="LinphoneAddress"/>
					</arguments>
					<detaileddescription>
						

						<para>Clones a LinphoneAddress object. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/address.h" name="linphone_address_destroy">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneAddress *" name="u" type="LinphoneAddress"/>
					</arguments>
					<detaileddescription>
						

						<para>
							Destroys a LinphoneAddress object (actually calls 
							<ref>linphone_address_unref()</ref>
							). 
						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/address.h" name="linphone_address_equal">
					<return completetype="bool_t" type="bool_t">
						<description>
							<para>Boolean value telling if the LinphoneAddress objects are equal. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const LinphoneAddress *" name="a1" type="LinphoneAddress">
							<description>
								

								<para>LinphoneAddress object </para>
							</description>
							

						</argument>
						<argument completetype="const LinphoneAddress *" name="a2" type="LinphoneAddress">
							<description>
								

								<para>LinphoneAddress object </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Compare two LinphoneAddress taking the tags and headers into account. 
							<description>
								<para>Boolean value telling if the LinphoneAddress objects are equal. </para>
							</description>
							

							<see>linphone_address_weak_equal() </see>
						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/address.h" name="linphone_address_ref">
					<return completetype="LinphoneAddress *" type="LinphoneAddress"/>
					<arguments>
						<argument completetype="LinphoneAddress *" name="addr" type="LinphoneAddress"/>
					</arguments>
					<detaileddescription>
						

						<para>Increment reference count of LinphoneAddress object. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/address.h" name="linphone_address_set_header">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneAddress *" name="addr" type="LinphoneAddress">
							<description>
								

								<para>the address </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="header_name" type="char">
							<description>
								

								<para>the header name </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="header_value" type="char">
							<description>
								

								<para>the header value </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Set a header into the address. Headers appear in the URI with '?', such as &lt;sip:
							<ulink url="mailto:test@linphone.org">test@linphone.org</ulink>
							?SomeHeader=SomeValue&gt;. 
						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/address.h" name="linphone_address_unref">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneAddress *" name="addr" type="LinphoneAddress"/>
					</arguments>
					<detaileddescription>
						

						<para>Decrement reference count of LinphoneAddress object. When dropped to zero, memory is freed. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/address.h" name="linphone_address_weak_equal">
					<return completetype="bool_t" type="bool_t">
						<description>
							<para>Boolean value telling if the LinphoneAddress objects are equal. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const LinphoneAddress *" name="a1" type="LinphoneAddress">
							<description>
								

								<para>LinphoneAddress object </para>
							</description>
							

						</argument>
						<argument completetype="const LinphoneAddress *" name="a2" type="LinphoneAddress">
							<description>
								

								<para>LinphoneAddress object </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Compare two LinphoneAddress ignoring tags and headers, basically just domain, username, and port. 
							<description>
								<para>Boolean value telling if the LinphoneAddress objects are equal. </para>
							</description>
							

							<see>linphone_address_equal() </see>
						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
			</instancemethods>
			<properties>
				<property name="display_name">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/address.h" name="linphone_address_get_display_name">
						<return completetype="const char *" type="char"/>
						<arguments>
							<argument completetype="const LinphoneAddress *" name="u" type="LinphoneAddress"/>
						</arguments>
						<detaileddescription>
							

							<para>Returns the display name. </para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/address.h" name="linphone_address_set_display_name">
						<return completetype="int" type="int"/>
						<arguments>
							<argument completetype="LinphoneAddress *" name="u" type="LinphoneAddress"/>
							<argument completetype="const char *" name="display_name" type="char"/>
						</arguments>
						<detaileddescription>
							

							<para>Sets the display name. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="domain">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/address.h" name="linphone_address_get_domain">
						<return completetype="const char *" type="char"/>
						<arguments>
							<argument completetype="const LinphoneAddress *" name="u" type="LinphoneAddress"/>
						</arguments>
						<detaileddescription>
							

							<para>Returns the domain name. </para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/address.h" name="linphone_address_set_domain">
						<return completetype="int" type="int"/>
						<arguments>
							<argument completetype="LinphoneAddress *" name="uri" type="LinphoneAddress"/>
							<argument completetype="const char *" name="host" type="char"/>
						</arguments>
						<detaileddescription>
							

							<para>Sets the domain. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="method_param">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/address.h" name="linphone_address_get_method_param">
						<return completetype="const char *" type="char"/>
						<arguments>
							<argument completetype="const LinphoneAddress *" name="addr" type="LinphoneAddress"/>
						</arguments>
						<detaileddescription>
							

							<para>Get the value of the method parameter </para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/address.h" name="linphone_address_set_method_param">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneAddress *" name="addr" type="LinphoneAddress"/>
							<argument completetype="const char *" name="method" type="char"/>
						</arguments>
						<detaileddescription>
							

							<para>Set the value of the method parameter </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="password">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/address.h" name="linphone_address_get_password">
						<return completetype="const char *" type="char">
							<description>
								<para>the password, if any, NULL otherwise. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneAddress *" name="addr" type="LinphoneAddress">
								<description>
									

									<para>the address </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the password encoded in the address. It is used for basic authentication (not recommended). 
								<description>
									<para>the password, if any, NULL otherwise. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/address.h" name="linphone_address_set_password">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneAddress *" name="addr" type="LinphoneAddress">
								<description>
									

									<para>the LinphoneAddress </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="passwd" type="char">
								<description>
									

									<para>the password to set. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the password encoded in the address. It is used for basic authentication (not recommended). </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="port">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/address.h" name="linphone_address_get_port">
						<return completetype="int" type="int"/>
						<arguments>
							<argument completetype="const LinphoneAddress *" name="u" type="LinphoneAddress"/>
						</arguments>
						<detaileddescription>
							

							<para>Get port number as an integer value, 0 if not present. </para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/address.h" name="linphone_address_set_port">
						<return completetype="int" type="int"/>
						<arguments>
							<argument completetype="LinphoneAddress *" name="uri" type="LinphoneAddress"/>
							<argument completetype="int" name="port" type="int"/>
						</arguments>
						<detaileddescription>
							

							<para>Sets the port number. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="scheme">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/address.h" name="linphone_address_get_scheme">
						<return completetype="const char *" type="char"/>
						<arguments>
							<argument completetype="const LinphoneAddress *" name="u" type="LinphoneAddress"/>
						</arguments>
						<detaileddescription>
							

							<para>Returns the address scheme, normally &quot;sip&quot;. </para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="secure">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/address.h" name="linphone_address_get_secure">
						<return completetype="bool_t" type="bool_t"/>
						<arguments>
							<argument completetype="const LinphoneAddress *" name="addr" type="LinphoneAddress"/>
						</arguments>
						<detaileddescription>
							

							<para>Returns true if address refers to a secure location (sips) </para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/address.h" name="linphone_address_set_secure">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneAddress *" name="addr" type="LinphoneAddress">
								<description>
									

									<para>
										A 
										<ref>LinphoneAddress</ref>
										 object 
									</para>
								</description>
								

							</argument>
							<argument completetype="bool_t" name="enabled" type="bool_t">
								<description>
									

									<para>TRUE if address is requested to be secure. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Make the address refer to a secure location (sips scheme) </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="sip">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/address.h" name="linphone_address_is_sip">
						<return completetype="bool_t" type="bool_t"/>
						<arguments>
							<argument completetype="const LinphoneAddress *" name="uri" type="LinphoneAddress"/>
						</arguments>
						<detaileddescription>
							

							<para>returns true if address is a routable sip address </para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="transport">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/address.h" name="linphone_address_get_transport">
						<return completetype="LinphoneTransportType" type="LinphoneTransportType"/>
						<arguments>
							<argument completetype="const LinphoneAddress *" name="uri" type="LinphoneAddress"/>
						</arguments>
						<detaileddescription>
							

							<para>Get the transport. </para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/address.h" name="linphone_address_set_transport">
						<return completetype="int" type="int"/>
						<arguments>
							<argument completetype="LinphoneAddress *" name="uri" type="LinphoneAddress"/>
							<argument completetype="LinphoneTransportType" name="type" type="LinphoneTransportType"/>
						</arguments>
						<detaileddescription>
							

							<para>Set a transport. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="username">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/address.h" name="linphone_address_get_username">
						<return completetype="const char *" type="char"/>
						<arguments>
							<argument completetype="const LinphoneAddress *" name="u" type="LinphoneAddress"/>
						</arguments>
						<detaileddescription>
							

							<para>Returns the username. </para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/address.h" name="linphone_address_set_username">
						<return completetype="int" type="int"/>
						<arguments>
							<argument completetype="LinphoneAddress *" name="uri" type="LinphoneAddress"/>
							<argument completetype="const char *" name="username" type="char"/>
						</arguments>
						<detaileddescription>
							

							<para>Sets the username. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
			</properties>
			<detaileddescription>
				

				<para>Object that represents a SIP address.</para>
				<para>
					The LinphoneAddress is an opaque object to represents SIP addresses, ie the content of SIP's 'from' and 'to' headers. A SIP address is made of display name, username, domain name, port, and various uri headers (such as tags). It looks like 'Alice &lt;sip:
					<ulink url="mailto:alice@example.net">alice@example.net</ulink>
					&gt;'. The LinphoneAddress has methods to extract and manipulate all parts of the address. When some part of the address (for example the username) is empty, the accessor methods return NULL. 
				</para>
				        
			</detaileddescription>
			
        
		</class>
		<class cfunctionprefix="linphone_auth_info_" deprecated="false" destroyable="true" name="LinphoneAuthInfo" refcountable="true">
			<classmethods>
				<classmethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/auth_info.h" name="linphone_auth_info_new">
					<return completetype="LinphoneAuthInfo *" type="LinphoneAuthInfo">
						<description>
							<para>
								A 
								<ref>LinphoneAuthInfo</ref>
								 object. 
								<ref>linphone_auth_info_destroy()</ref>
								 must be used to destroy it when no longer needed. The LinphoneCore makes a copy of LinphoneAuthInfo passed through 
								<ref>linphone_core_add_auth_info()</ref>
								. 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const char *" name="username" type="char">
							<description>
								

								<para>The username that needs to be authenticated </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="userid" type="char">
							<description>
								

								<para>The userid used for authenticating (use NULL if you don't know what it is) </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="passwd" type="char">
							<description>
								

								<para>The password in clear text </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="ha1" type="char">
							<description>
								

								<para>The ha1-encrypted password if password is not given in clear text. </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="realm" type="char">
							<description>
								

								<para>The authentication domain (which can be larger than the sip domain. Unfortunately many SIP servers don't use this parameter. </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="domain" type="char">
							<description>
								

								<para>The SIP domain for which this authentication information is valid, if it has to be restricted for a single SIP domain. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Creates a 
							<ref>LinphoneAuthInfo</ref>
							 object with supplied information. The object can be created empty, that is with all arguments set to NULL. Username, userid, password, realm and domain can be set later using specific methods. At the end, username and passwd (or ha1) are required. 
							<description>
								<para>
									A 
									<ref>LinphoneAuthInfo</ref>
									 object. 
									<ref>linphone_auth_info_destroy()</ref>
									 must be used to destroy it when no longer needed. The LinphoneCore makes a copy of LinphoneAuthInfo passed through 
									<ref>linphone_core_add_auth_info()</ref>
									. 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</classmethod>
			</classmethods>
			<instancemethods>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/auth_info.h" name="linphone_auth_info_clone">
					<return completetype="LinphoneAuthInfo *" type="LinphoneAuthInfo">
						<description>
							<para>
								The newly created 
								<ref>LinphoneAuthInfo</ref>
								 object. 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const LinphoneAuthInfo *" name="source" type="LinphoneAuthInfo">
							<description>
								

								<para>
									The 
									<ref>LinphoneAuthInfo</ref>
									 object to be cloned 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Instantiates a new auth info with values from source. 
							<description>
								<para>
									The newly created 
									<ref>LinphoneAuthInfo</ref>
									 object. 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/auth_info.h" name="linphone_auth_info_destroy">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneAuthInfo *" name="info" type="LinphoneAuthInfo"/>
					</arguments>
					<detaileddescription>
						

						<para>
							Destroys a LinphoneAuthInfo object. 
							<note>
								<para>you don't need those function </para>
							</note>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_auth_info_ref">
					<return completetype="LinphoneAuthInfo *" type="LinphoneAuthInfo"/>
					<arguments>
						<argument completetype="LinphoneAuthInfo *" name="obj" type="LinphoneAuthInfo"/>
					</arguments>
					<detaileddescription>
						

						<para>Take ownership </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_auth_info_unref">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneAuthInfo *" name="obj" type="LinphoneAuthInfo"/>
					</arguments>
					<detaileddescription>
						

						<para>Release ownership </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
			</instancemethods>
			<properties>
				<property name="domain">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/auth_info.h" name="linphone_auth_info_get_domain">
						<return completetype="const char *" type="char">
							<description>
								<para>The domain. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneAuthInfo *" name="info" type="LinphoneAuthInfo">
								<description>
									

									<para>
										The 
										<ref>LinphoneAuthInfo</ref>
										 object 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the domain. 
								<description>
									<para>The domain. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/auth_info.h" name="linphone_auth_info_set_domain">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneAuthInfo *" name="info" type="LinphoneAuthInfo">
								<description>
									

									<para>
										The 
										<ref>LinphoneAuthInfo</ref>
										 object 
									</para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="domain" type="char">
								<description>
									

									<para>The domain. This should not be necessary because realm is supposed to be unique and sufficient. However, many SIP servers don't set realm correctly, then domain has to be used to distinguish between several SIP account bearing the same username. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Sets the domain for which this authentication is valid. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="ha1">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/auth_info.h" name="linphone_auth_info_get_ha1">
						<return completetype="const char *" type="char">
							<description>
								<para>The ha1. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneAuthInfo *" name="info" type="LinphoneAuthInfo">
								<description>
									

									<para>
										The 
										<ref>LinphoneAuthInfo</ref>
										 object 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the ha1. 
								<description>
									<para>The ha1. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/auth_info.h" name="linphone_auth_info_set_ha1">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneAuthInfo *" name="info" type="LinphoneAuthInfo">
								<description>
									

									<para>
										The 
										<ref>LinphoneAuthInfo</ref>
										 object 
									</para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="ha1" type="char">
								<description>
									

									<para>The ha1. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Sets the ha1. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="passwd">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/auth_info.h" name="linphone_auth_info_get_passwd">
						<return completetype="const char *" type="char">
							<description>
								<para>The password. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneAuthInfo *" name="info" type="LinphoneAuthInfo">
								<description>
									

									<para>
										The 
										<ref>LinphoneAuthInfo</ref>
										 object 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the password. 
								<description>
									<para>The password. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/auth_info.h" name="linphone_auth_info_set_passwd">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneAuthInfo *" name="info" type="LinphoneAuthInfo">
								<description>
									

									<para>
										The 
										<ref>LinphoneAuthInfo</ref>
										 object 
									</para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="passwd" type="char">
								<description>
									

									<para>The password. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Sets the password. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="realm">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/auth_info.h" name="linphone_auth_info_get_realm">
						<return completetype="const char *" type="char">
							<description>
								<para>The realm. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneAuthInfo *" name="info" type="LinphoneAuthInfo">
								<description>
									

									<para>
										The 
										<ref>LinphoneAuthInfo</ref>
										 object 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the realm. 
								<description>
									<para>The realm. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/auth_info.h" name="linphone_auth_info_set_realm">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneAuthInfo *" name="info" type="LinphoneAuthInfo">
								<description>
									

									<para>
										The 
										<ref>LinphoneAuthInfo</ref>
										 object 
									</para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="realm" type="char">
								<description>
									

									<para>The realm. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Sets the realm. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="tls_cert">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/auth_info.h" name="linphone_auth_info_get_tls_cert">
						<return completetype="const char *" type="char">
							<description>
								<para>The TLS certificate. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneAuthInfo *" name="info" type="LinphoneAuthInfo">
								<description>
									

									<para>
										The 
										<ref>LinphoneAuthInfo</ref>
										 object 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the TLS certificate. 
								<description>
									<para>The TLS certificate. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/auth_info.h" name="linphone_auth_info_set_tls_cert">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneAuthInfo *" name="info" type="LinphoneAuthInfo">
								<description>
									

									<para>
										The 
										<ref>LinphoneAuthInfo</ref>
										 object 
									</para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="tls_cert" type="char">
								<description>
									

									<para>The TLS certificate.</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Sets the TLS certificate. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="tls_cert_path">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/auth_info.h" name="linphone_auth_info_get_tls_cert_path">
						<return completetype="const char *" type="char">
							<description>
								<para>The TLS certificate path. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneAuthInfo *" name="info" type="LinphoneAuthInfo">
								<description>
									

									<para>
										The 
										<ref>LinphoneAuthInfo</ref>
										 object 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the TLS certificate path. 
								<description>
									<para>The TLS certificate path. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/auth_info.h" name="linphone_auth_info_set_tls_cert_path">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneAuthInfo *" name="info" type="LinphoneAuthInfo">
								<description>
									

									<para>
										The 
										<ref>LinphoneAuthInfo</ref>
										 object 
									</para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="tls_cert_path" type="char">
								<description>
									

									<para>The TLS certificate path.</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Sets the TLS certificate path. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="tls_key">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/auth_info.h" name="linphone_auth_info_get_tls_key">
						<return completetype="const char *" type="char">
							<description>
								<para>The TLS key. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneAuthInfo *" name="info" type="LinphoneAuthInfo">
								<description>
									

									<para>
										The 
										<ref>LinphoneAuthInfo</ref>
										 object 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the TLS key. 
								<description>
									<para>The TLS key. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/auth_info.h" name="linphone_auth_info_set_tls_key">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneAuthInfo *" name="info" type="LinphoneAuthInfo">
								<description>
									

									<para>
										The 
										<ref>LinphoneAuthInfo</ref>
										 object 
									</para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="tls_key" type="char">
								<description>
									

									<para>The TLS key.</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Sets the TLS key. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="tls_key_path">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/auth_info.h" name="linphone_auth_info_get_tls_key_path">
						<return completetype="const char *" type="char">
							<description>
								<para>The TLS key path. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneAuthInfo *" name="info" type="LinphoneAuthInfo">
								<description>
									

									<para>
										The 
										<ref>LinphoneAuthInfo</ref>
										 object 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the TLS key path. 
								<description>
									<para>The TLS key path. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/auth_info.h" name="linphone_auth_info_set_tls_key_path">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneAuthInfo *" name="info" type="LinphoneAuthInfo">
								<description>
									

									<para>
										The 
										<ref>LinphoneAuthInfo</ref>
										 object 
									</para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="tls_key_path" type="char"/>
						</arguments>
						<detaileddescription>
							

							<para>Sets the TLS key path. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="userid">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/auth_info.h" name="linphone_auth_info_get_userid">
						<return completetype="const char *" type="char">
							<description>
								<para>The userid. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneAuthInfo *" name="info" type="LinphoneAuthInfo">
								<description>
									

									<para>
										The 
										<ref>LinphoneAuthInfo</ref>
										 object 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the userid. 
								<description>
									<para>The userid. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/auth_info.h" name="linphone_auth_info_set_userid">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneAuthInfo *" name="info" type="LinphoneAuthInfo">
								<description>
									

									<para>
										The 
										<ref>LinphoneAuthInfo</ref>
										 object 
									</para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="userid" type="char">
								<description>
									

									<para>The userid. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Sets the userid. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="username">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/auth_info.h" name="linphone_auth_info_get_username">
						<return completetype="const char *" type="char">
							<description>
								<para>The username. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneAuthInfo *" name="info" type="LinphoneAuthInfo">
								<description>
									

									<para>
										The 
										<ref>LinphoneAuthInfo</ref>
										 object 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the username. 
								<description>
									<para>The username. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/auth_info.h" name="linphone_auth_info_set_username">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneAuthInfo *" name="info" type="LinphoneAuthInfo">
								<description>
									

									<para>
										The 
										<ref>LinphoneAuthInfo</ref>
										 object 
									</para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="username" type="char">
								<description>
									

									<para>The username. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Sets the username. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
			</properties>
			<detaileddescription>
				

				<para>Object holding authentication information.</para>
				<para>
					<note>
						<para>The object's fields should not be accessed directly. Prefer using the accessor methods.</para>
					</note>
					
In most case, authentication information consists of a username and password. Sometimes, a userid is required by proxy, and realm can be useful to discriminate different SIP domains.
				</para>
				<para>
					Once created and filled, a LinphoneAuthInfo must be added to the LinphoneCore in order to become known and used automatically when needed. Use 
					<ref>linphone_core_add_auth_info()</ref>
					 for that purpose.
				</para>
				<para>The LinphoneCore object can take the initiative to request authentication information when needed to the application through the auth_info_requested callback of the LinphoneCoreVTable structure.</para>
				<para>
					The application can respond to this information request later using 
					<ref>linphone_core_add_auth_info()</ref>
					. This will unblock all pending authentication transactions and retry them with authentication headers. 
				</para>
				        
			</detaileddescription>
			
        
		</class>
		<class cfunctionprefix="linphone_buffer_" deprecated="false" destroyable="false" name="LinphoneBuffer" refcountable="true">
			<classmethods>
				<classmethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/buffer.h" name="linphone_buffer_new">
					<return completetype="LinphoneBuffer *" type="LinphoneBuffer">
						<description>
							<para>A new LinphoneBuffer object. </para>
						</description>
						

					</return>
					<arguments/>
					<detaileddescription>
						

						<para>
							Create a new empty LinphoneBuffer object. 
							<description>
								<para>A new LinphoneBuffer object. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</classmethod>
				<classmethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/buffer.h" name="linphone_buffer_new_from_data">
					<return completetype="LinphoneBuffer *" type="LinphoneBuffer">
						<description>
							<para>A new LinphoneBuffer object. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const uint8_t *" name="data" type="uint8_t">
							<description>
								

								<para>The initial data to store in the LinphoneBuffer. </para>
							</description>
							

						</argument>
						<argument completetype="size_t" name="size" type="size_t">
							<description>
								

								<para>The size of the initial data to stroe in the LinphoneBuffer. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Create a new LinphoneBuffer object from existing data. 
							<description>
								<para>A new LinphoneBuffer object. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</classmethod>
				<classmethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/buffer.h" name="linphone_buffer_new_from_string">
					<return completetype="LinphoneBuffer *" type="LinphoneBuffer">
						<description>
							<para>A new LinphoneBuffer object. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const char *" name="data" type="char">
							<description>
								

								<para>The initial string content of the LinphoneBuffer. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Create a new LinphoneBuffer object from a string. 
							<description>
								<para>A new LinphoneBuffer object. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</classmethod>
			</classmethods>
			<instancemethods>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/buffer.h" name="linphone_buffer_ref">
					<return completetype="LinphoneBuffer *" type="LinphoneBuffer">
						<description>
							<para>The same LinphoneBuffer object. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneBuffer *" name="buffer" type="LinphoneBuffer">
							<description>
								

								<para>LinphoneBuffer object. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Acquire a reference to the buffer. 
							<description>
								<para>The same LinphoneBuffer object. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/buffer.h" name="linphone_buffer_set_content">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneBuffer *" name="buffer" type="LinphoneBuffer">
							<description>
								

								<para>LinphoneBuffer object. </para>
							</description>
							

						</argument>
						<argument completetype="const uint8_t *" name="content" type="uint8_t">
							<description>
								

								<para>The content of the data buffer. </para>
							</description>
							

						</argument>
						<argument completetype="size_t" name="size" type="size_t">
							<description>
								

								<para>The size of the content of the data buffer. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Set the content of the data buffer. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/buffer.h" name="linphone_buffer_unref">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneBuffer *" name="buffer" type="LinphoneBuffer">
							<description>
								

								<para>LinphoneBuffer object. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Release reference to the buffer. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
			</instancemethods>
			<properties>
				<property name="content">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/buffer.h" name="linphone_buffer_get_content">
						<return completetype="const uint8_t *" type="uint8_t">
							<description>
								<para>The content of the data buffer. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneBuffer *" name="buffer" type="LinphoneBuffer">
								<description>
									

									<para>LinphoneBuffer object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the content of the data buffer. 
								<description>
									<para>The content of the data buffer. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="empty">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/buffer.h" name="linphone_buffer_is_empty">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>A boolean value telling whether the LinphoneBuffer is empty or not. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneBuffer *" name="buffer" type="LinphoneBuffer">
								<description>
									

									<para>LinphoneBuffer object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Tell whether the LinphoneBuffer is empty. 
								<description>
									<para>A boolean value telling whether the LinphoneBuffer is empty or not. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="size">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/buffer.h" name="linphone_buffer_get_size">
						<return completetype="size_t" type="size_t">
							<description>
								<para>The size of the content of the data buffer. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneBuffer *" name="buffer" type="LinphoneBuffer">
								<description>
									

									<para>LinphoneBuffer object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the size of the content of the data buffer. 
								<description>
									<para>The size of the content of the data buffer. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/buffer.h" name="linphone_buffer_set_size">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneBuffer *" name="buffer" type="LinphoneBuffer">
								<description>
									

									<para>LinphoneBuffer object </para>
								</description>
								

							</argument>
							<argument completetype="size_t" name="size" type="size_t">
								<description>
									

									<para>The size of the content of the data buffer. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the size of the content of the data buffer. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="string_content">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/buffer.h" name="linphone_buffer_get_string_content">
						<return completetype="const char *" type="char">
							<description>
								<para>The string content of the data buffer. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneBuffer *" name="buffer" type="LinphoneBuffer">
								<description>
									

									<para>LinphoneBuffer object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the string content of the data buffer. 
								<description>
									<para>The string content of the data buffer. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/buffer.h" name="linphone_buffer_set_string_content">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneBuffer *" name="buffer" type="LinphoneBuffer">
								<description>
									

									<para>LinphoneBuffer object. </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="content" type="char">
								<description>
									

									<para>The string content of the data buffer. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the string content of the data buffer. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="user_data">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/buffer.h" name="linphone_buffer_get_user_data">
						<return completetype="void *" type="void">
							<description>
								<para>The user pointer associated with the buffer. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneBuffer *" name="buffer" type="LinphoneBuffer">
								<description>
									

									<para>LinphoneBuffer object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Retrieve the user pointer associated with the buffer. 
								<description>
									<para>The user pointer associated with the buffer. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/buffer.h" name="linphone_buffer_set_user_data">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneBuffer *" name="buffer" type="LinphoneBuffer">
								<description>
									

									<para>LinphoneBuffer object. </para>
								</description>
								

							</argument>
							<argument completetype="void *" name="ud" type="void">
								<description>
									

									<para>The user pointer to associate with the buffer. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Assign a user pointer to the buffer. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
			</properties>
			<detaileddescription>
				

				<para>The LinphoneContent object representing a data buffer. </para>
				        
			</detaileddescription>
			
        
		</class>
		<class cfunctionprefix="linphone_call_" deprecated="false" destroyable="false" name="LinphoneCall" refcountable="true">
			<instancemethods>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_asked_to_autoanswer">
					<return completetype="bool_t" type="bool_t">
						<description>
							<para>A boolean value telling whether the call has been asked to autoanswer </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCall *" name="call" type="LinphoneCall">
							<description>
								

								<para>LinphoneCall object </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Tell whether a call has been asked to autoanswer 
							<description>
								<para>A boolean value telling whether the call has been asked to autoanswer </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_cancel_dtmfs">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCall *" name="call" type="LinphoneCall">
							<description>
								

								<para>The LinphoneCall object </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Stop current DTMF sequence sending.</para>
						<para>
							Please note that some DTMF could be already sent, depending on when this function call is delayed from 
							<ref>linphone_call_send_dtmfs</ref>
							. This function will be automatically called if call state change to anything but LinphoneCallStreamsRunning. 
						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_get_meta_rtcp_transport">
					<return completetype="RtpTransport *" type="RtpTransport">
						<description>
							<para>a pointer to the meta rtcp transport if it exists, NULL otherwise </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCall *" name="call" type="LinphoneCall">
							<description>
								

								<para/>
							</description>
							

						</argument>
						<argument completetype="int" name="stream_index" type="int">
							<description>
								

								<para/>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Returns the meta rtcp transport for the given stream index. 
							<description>
								<para>a pointer to the meta rtcp transport if it exists, NULL otherwise </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_get_meta_rtp_transport">
					<return completetype="RtpTransport *" type="RtpTransport">
						<description>
							<para>a pointer to the meta rtp transport if it exists, NULL otherwise </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCall *" name="call" type="LinphoneCall">
							<description>
								

								<para/>
							</description>
							

						</argument>
						<argument completetype="int" name="stream_index" type="int">
							<description>
								

								<para/>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Returns the meta rtp transport for the given stream index. 
							<description>
								<para>a pointer to the meta rtp transport if it exists, NULL otherwise </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_get_stream_type">
					<return completetype="MSFormatType" type="MSFormatType">
						<description>
							<para>the type (MSAudio, MSVideo, MSText) of the stream of given index. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCall *" name="call" type="LinphoneCall">
							<description>
								

								<para/>
							</description>
							

						</argument>
						<argument completetype="int" name="stream_index" type="int">
							<description>
								

								<para/>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Returns the type of stream for the given stream index. 
							<description>
								<para>the type (MSAudio, MSVideo, MSText) of the stream of given index. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_has_transfer_pending">
					<return completetype="bool_t" type="bool_t"/>
					<arguments>
						<argument completetype="const LinphoneCall *" name="call" type="LinphoneCall"/>
					</arguments>
					<detaileddescription>
						

						<para>Returns true if this calls has received a transfer that has not been executed yet. Pending transfers are executed when this call is being paused or closed, locally or by remote endpoint. If the call is already paused while receiving the transfer request, the transfer immediately occurs. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_media_in_progress">
					<return completetype="bool_t" type="bool_t">
						<description>
							<para>TRUE if media is busy in establishing the connection, FALSE otherwise. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCall *" name="call" type="LinphoneCall">
							<description>
								

								<para>the call </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Indicates whether an operation is in progress at the media side. It can be a bad idea to initiate signaling operations (adding video, pausing the call, removing video, changing video parameters) while the media is busy in establishing the connection (typically ICE connectivity checks). It can result in failures generating loss of time in future operations in the call. Applications are invited to check this function after each call state change to decide whether certain operations are permitted or not. 
							<description>
								<para>TRUE if media is busy in establishing the connection, FALSE otherwise. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_ref">
					<return completetype="LinphoneCall *" type="LinphoneCall">
						<description>
							<para>The same call. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCall *" name="call" type="LinphoneCall">
							<description>
								

								<para>The call. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Acquire a reference to the call. An application that wishes to retain a pointer to call object must use this function to unsure the pointer remains valid. Once the application no more needs this pointer, it must call 
							<ref>linphone_call_unref()</ref>
							. 
							<description>
								<para>The same call. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_send_dtmf">
					<return completetype="int" type="int">
						<description>
							<para>0 if successful, -1 on error. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCall *" name="call" type="LinphoneCall">
							<description>
								

								<para>The LinphoneCall object </para>
							</description>
							

						</argument>
						<argument completetype="char" name="dtmf" type="char">
							<description>
								

								<para>The dtmf name specified as a char, such as '0', '#' etc... </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Send the specified dtmf.</para>
						<para>
							The dtmf is automatically played to the user. 
							<description>
								<para>0 if successful, -1 on error. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_send_dtmfs">
					<return completetype="int" type="int">
						<description>
							<para>-2 if there is already a DTMF sequence, -1 if call is not ready, 0 otherwise. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCall *" name="call" type="LinphoneCall">
							<description>
								

								<para>The LinphoneCall object </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="dtmfs" type="char">
							<description>
								

								<para>A dtmf sequence such as '123#123123' </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Send a list of dtmf.</para>
						<para>
							The dtmfs are automatically sent to remote, separated by some needed customizable delay. Sending is canceled if the call state changes to something not LinphoneCallStreamsRunning. 
							<description>
								<para>-2 if there is already a DTMF sequence, -1 if call is not ready, 0 otherwise. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_send_vfu_request">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCall *" name="call" type="LinphoneCall"/>
					</arguments>
					<detaileddescription>
						

						<para>Request remote side to send us a Video Fast Update. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_start_recording">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCall *" name="call" type="LinphoneCall"/>
					</arguments>
					<detaileddescription>
						

						<para>
							Start call recording. The output file where audio is recorded must be previously specified with 
							<ref>linphone_call_params_set_record_file()</ref>
							. 
						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_stop_recording">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCall *" name="call" type="LinphoneCall"/>
					</arguments>
					<detaileddescription>
						

						<para>Stop call recording. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_take_preview_snapshot">
					<return completetype="int" type="int">
						<description>
							<para>0 if successfull, -1 otherwise (typically if jpeg format is not supported). </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCall *" name="call" type="LinphoneCall">
							<description>
								

								<para>a LinphoneCall </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="file" type="char">
							<description>
								

								<para>a path where to write the jpeg content. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Take a photo of currently captured video and write it into a jpeg file. Note that the snapshot is asynchronous, an application shall not assume that the file is created when the function returns. 
							<description>
								<para>0 if successfull, -1 otherwise (typically if jpeg format is not supported). </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_take_video_snapshot">
					<return completetype="int" type="int">
						<description>
							<para>0 if successfull, -1 otherwise (typically if jpeg format is not supported). </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCall *" name="call" type="LinphoneCall">
							<description>
								

								<para>a LinphoneCall </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="file" type="char">
							<description>
								

								<para>a path where to write the jpeg content. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Take a photo of currently received video and write it into a jpeg file. Note that the snapshot is asynchronous, an application shall not assume that the file is created when the function returns. 
							<description>
								<para>0 if successfull, -1 otherwise (typically if jpeg format is not supported). </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_unref">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCall *" name="call" type="LinphoneCall">
							<description>
								

								<para>The call. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Release reference to the call. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_zoom_video">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCall *" name="call" type="LinphoneCall">
							<description>
								

								<para>the call. </para>
							</description>
							

						</argument>
						<argument completetype="float" name="zoom_factor" type="float">
							<description>
								

								<para>a floating point number describing the zoom factor. A value 1.0 corresponds to no zoom applied. </para>
							</description>
							

						</argument>
						<argument completetype="float *" name="cx" type="float">
							<description>
								

								<para>a floating point number pointing the horizontal center of the zoom to be applied. This value should be between 0.0 and 1.0. </para>
							</description>
							

						</argument>
						<argument completetype="float *" name="cy" type="float">
							<description>
								

								<para>a floating point number pointing the vertical center of the zoom to be applied. This value should be between 0.0 and 1.0.</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Perform a zoom of the video displayed during a call. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
			</instancemethods>
			<properties>
				<property name="audio_route">
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_set_audio_route">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCall *" name="call" type="LinphoneCall">
								<description>
									

									<para/>
								</description>
								

							</argument>
							<argument completetype="LinphoneAudioRoute" name="route" type="LinphoneAudioRoute">
								<description>
									

									<para>the wanted audio route (earpiece, speaker, ...) </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Change the playback output device (currently only used for blackberry) </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="authentication_token_verified">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_get_authentication_token_verified">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>TRUE if authentication token is verifed, false otherwise. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCall *" name="call" type="LinphoneCall">
								<description>
									

									<para>the LinphoneCall </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Returns whether ZRTP authentication token is verified. If not, it must be verified by users as described in ZRTP procedure. Once done, the application must inform of the results with 
								<ref>linphone_call_set_authentication_token_verified()</ref>
								. 
								<description>
									<para>TRUE if authentication token is verifed, false otherwise. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_set_authentication_token_verified">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCall *" name="call" type="LinphoneCall">
								<description>
									

									<para>the LinphoneCall </para>
								</description>
								

							</argument>
							<argument completetype="bool_t" name="verified" type="bool_t">
								<description>
									

									<para>whether the ZRTP SAS is verified. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the result of ZRTP short code verification by user. If remote party also does the same, it will update the ZRTP cache so that user's verification will not be required for the two users. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="average_quality">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_get_average_quality">
						<return completetype="float" type="float"/>
						<arguments>
							<argument completetype="LinphoneCall *" name="call" type="LinphoneCall"/>
						</arguments>
						<detaileddescription>
							

							<para>Returns call quality averaged over all the duration of the call.</para>
							<para>
								See 
								<ref>linphone_call_get_current_quality()</ref>
								 for more details about quality measurement. 
							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="call_log">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_get_call_log">
						<return completetype="LinphoneCallLog *" type="LinphoneCallLog">
							<description>
								<para>The LinphoneCallLog associated with the specified LinphoneCall </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCall *" name="call" type="LinphoneCall">
								<description>
									

									<para>LinphoneCall object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the call log associated to this call. 
								<description>
									<para>The LinphoneCallLog associated with the specified LinphoneCall </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="camera_enabled">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_camera_enabled">
						<return completetype="bool_t" type="bool_t"/>
						<arguments>
							<argument completetype="const LinphoneCall *" name="lc" type="LinphoneCall"/>
						</arguments>
						<detaileddescription>
							

							<para>Returns TRUE if camera pictures are allowed to be sent to the remote party. </para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_enable_camera">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCall *" name="lc" type="LinphoneCall"/>
							<argument completetype="bool_t" name="enabled" type="bool_t"/>
						</arguments>
						<detaileddescription>
							

							<para>Indicate whether camera input should be sent to remote end. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="chat_room">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_get_chat_room">
						<return completetype="struct _LinphoneChatRoom *" type="_LinphoneChatRoom">
							<description>
								<para>
									<ref>LinphoneChatRoom</ref>
									 where messaging can take place. 
								</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCall *" name="call" type="LinphoneCall">
								<description>
									

									<para>
										<ref>LinphoneCall</ref>
										 object 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Create a new chat room for messaging from a call if not already existing, else return existing one. No reference is given to the caller: the chat room will be deleted when the call is ended. 
								<description>
									<para>
										<ref>LinphoneChatRoom</ref>
										 where messaging can take place. 
									</para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="conference">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_get_conference">
						<return completetype="LinphoneConference *" type="LinphoneConference">
							<description>
								<para>
									A pointer on 
									<ref>LinphoneConference</ref>
									 or NULL if the call is not part of any conference. 
								</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCall *" name="call" type="LinphoneCall">
								<description>
									

									<para>
										<ref>LinphoneCall</ref>
										 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Return the associated conference object 
								<description>
									<para>
										A pointer on 
										<ref>LinphoneConference</ref>
										 or NULL if the call is not part of any conference. 
									</para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="core">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_get_core">
						<return completetype="LinphoneCore *" type="LinphoneCore">
							<description>
								<para>The LinphoneCore object that has created the specified call. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCall *" name="call" type="LinphoneCall">
								<description>
									

									<para>LinphoneCall object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the core that has created the specified call. 
								<description>
									<para>The LinphoneCore object that has created the specified call. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="current_params">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_get_current_params">
						<return completetype="const LinphoneCallParams *" type="LinphoneCallParams"/>
						<arguments>
							<argument completetype="LinphoneCall *" name="call" type="LinphoneCall"/>
						</arguments>
						<detaileddescription>
							

							<para>Returns current parameters associated to the call. </para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="current_quality">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_get_current_quality">
						<return completetype="float" type="float">
							<description>
								<para>The function returns -1 if no quality measurement is available, for example if no active audio stream exist. Otherwise it returns the quality rating. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCall *" name="call" type="LinphoneCall"/>
						</arguments>
						<detaileddescription>
							

							<para>Obtain real-time quality rating of the call</para>
							<para>Based on local RTP statistics and RTCP feedback, a quality rating is computed and updated during all the duration of the call. This function returns its value at the time of the function call. It is expected that the rating is updated at least every 5 seconds or so. The rating is a floating point number comprised between 0 and 5.</para>
							<para>
								4-5 = good quality 
								<linebreak/>
								
 3-4 = average quality 
								<linebreak/>
								
 2-3 = poor quality 
								<linebreak/>
								
 1-2 = very poor quality 
								<linebreak/>
								
 0-1 = can't be worse, mostly unusable 
								<linebreak/>
								

							</para>
							<para>
								<description>
									<para>The function returns -1 if no quality measurement is available, for example if no active audio stream exist. Otherwise it returns the quality rating. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="dir">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_get_dir">
						<return completetype="LinphoneCallDir" type="LinphoneCallDir"/>
						<arguments>
							<argument completetype="const LinphoneCall *" name="call" type="LinphoneCall"/>
						</arguments>
						<detaileddescription>
							

							<para>Returns direction of the call (incoming or outgoing). </para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="diversion_address">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_get_diversion_address">
						<return completetype="const LinphoneAddress *" type="LinphoneAddress"/>
						<arguments>
							<argument completetype="const LinphoneCall *" name="call" type="LinphoneCall"/>
						</arguments>
						<detaileddescription>
							

							<para>Returns the diversion address associated to this call </para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="duration">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_get_duration">
						<return completetype="int" type="int"/>
						<arguments>
							<argument completetype="const LinphoneCall *" name="call" type="LinphoneCall"/>
						</arguments>
						<detaileddescription>
							

							<para>Returns call's duration in seconds. </para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="echo_cancellation_enabled">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_echo_cancellation_enabled">
						<return completetype="bool_t" type="bool_t"/>
						<arguments>
							<argument completetype="LinphoneCall *" name="lc" type="LinphoneCall"/>
						</arguments>
						<detaileddescription>
							

							<para>Returns TRUE if echo cancellation is enabled. </para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_enable_echo_cancellation">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCall *" name="call" type="LinphoneCall">
								<description>
									

									<para/>
								</description>
								

							</argument>
							<argument completetype="bool_t" name="val" type="bool_t">
								<description>
									

									<para/>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Enables or disable echo cancellation for this call </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="echo_limiter_enabled">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_echo_limiter_enabled">
						<return completetype="bool_t" type="bool_t"/>
						<arguments>
							<argument completetype="const LinphoneCall *" name="call" type="LinphoneCall"/>
						</arguments>
						<detaileddescription>
							

							<para>Returns TRUE if echo limiter is enabled. </para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_enable_echo_limiter">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCall *" name="call" type="LinphoneCall">
								<description>
									

									<para/>
								</description>
								

							</argument>
							<argument completetype="bool_t" name="val" type="bool_t">
								<description>
									

									<para/>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Enables or disable echo limiter for this call </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="error_info">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_get_error_info">
						<return completetype="const LinphoneErrorInfo *" type="LinphoneErrorInfo"/>
						<arguments>
							<argument completetype="const LinphoneCall *" name="call" type="LinphoneCall"/>
						</arguments>
						<detaileddescription>
							

							<para>Returns full details about call errors or termination reasons. </para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="in_conference">
					<getter deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_is_in_conference">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>TRUE if part of a conference. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCall *" name="call" type="LinphoneCall">
								<description>
									

									<para>
										<ref>LinphoneCall</ref>
										 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Return TRUE if this call is currently part of a conference 
								<description>
									<para>TRUE if part of a conference. </para>
								</description>
								

							</para>
							<para>Return TRUE if this call is currently part of a conference </para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="microphone_volume_gain">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_get_microphone_volume_gain">
						<return completetype="float" type="float">
							<description>
								<para>double Percenatge of the max supported volume gain. Valid values are in [ 0.0 : 1.0 ]. In case of failure, a negative value is returned </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCall *" name="call" type="LinphoneCall">
								<description>
									

									<para>The call. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get microphone volume gain. If the sound backend supports it, the returned gain is equal to the gain set with the system mixer. 
								<description>
									<para>double Percenatge of the max supported volume gain. Valid values are in [ 0.0 : 1.0 ]. In case of failure, a negative value is returned </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_set_microphone_volume_gain">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCall *" name="call" type="LinphoneCall">
								<description>
									

									<para>The call. </para>
								</description>
								

							</argument>
							<argument completetype="float" name="volume" type="float">
								<description>
									

									<para>Percentage of the max supported gain. Valid values are in [ 0.0 : 1.0 ]. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set microphone volume gain. If the sound backend supports it, the new gain will synchronized with the system mixer. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="native_video_window_id">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_get_native_video_window_id">
						<return completetype="void *" type="void"/>
						<arguments>
							<argument completetype="const LinphoneCall *" name="call" type="LinphoneCall"/>
						</arguments>
						<detaileddescription>
							

							<para>Get the native window handle of the video window, casted as an unsigned long. </para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_set_native_video_window_id">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCall *" name="call" type="LinphoneCall"/>
							<argument completetype="void *" name="id" type="void"/>
						</arguments>
						<detaileddescription>
							

							<para>Set the native video window id where the video is to be displayed. For MacOS, Linux, Windows: if not set or 0 a window will be automatically created, unless the special id -1 is given. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="play_volume">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_get_play_volume">
						<return completetype="float" type="float">
							<description>
								<para>float Volume level in percentage. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCall *" name="call" type="LinphoneCall">
								<description>
									

									<para>The call. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the mesured playback volume level (received from remote) in dbm0. 
								<description>
									<para>float Volume level in percentage. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="reason">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_get_reason">
						<return completetype="LinphoneReason" type="LinphoneReason"/>
						<arguments>
							<argument completetype="const LinphoneCall *" name="call" type="LinphoneCall"/>
						</arguments>
						<detaileddescription>
							

							<para>Returns the reason for a call termination (either error or normal termination) </para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="record_volume">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_get_record_volume">
						<return completetype="float" type="float">
							<description>
								<para>float Volume level in percentage. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCall *" name="call" type="LinphoneCall">
								<description>
									

									<para>The call. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the mesured record volume level (sent to remote) in dbm0. 
								<description>
									<para>float Volume level in percentage. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="refer_to">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_get_refer_to">
						<return completetype="const char *" type="char">
							<description>
								<para>The refer-to uri of the call (if it was transfered) </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCall *" name="call" type="LinphoneCall">
								<description>
									

									<para>LinphoneCall object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the refer-to uri (if the call was transfered). 
								<description>
									<para>The refer-to uri of the call (if it was transfered) </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="remote_address">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_get_remote_address">
						<return completetype="const LinphoneAddress *" type="LinphoneAddress"/>
						<arguments>
							<argument completetype="const LinphoneCall *" name="call" type="LinphoneCall"/>
						</arguments>
						<detaileddescription>
							

							<para>Returns the remote address associated to this call </para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="remote_address_as_string">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_get_remote_address_as_string">
						<return completetype="char *" type="char"/>
						<arguments>
							<argument completetype="const LinphoneCall *" name="call" type="LinphoneCall"/>
						</arguments>
						<detaileddescription>
							

							<para>Returns the remote address associated to this call as a string. The result string must be freed by user using ms_free(). </para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="remote_contact">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_get_remote_contact">
						<return completetype="const char *" type="char"/>
						<arguments>
							<argument completetype="LinphoneCall *" name="call" type="LinphoneCall"/>
						</arguments>
						<detaileddescription>
							

							<para>Returns the far end's sip contact as a string, if available. </para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="remote_params">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_get_remote_params">
						<return completetype="const LinphoneCallParams *" type="LinphoneCallParams"/>
						<arguments>
							<argument completetype="LinphoneCall *" name="call" type="LinphoneCall"/>
						</arguments>
						<detaileddescription>
							

							<para>Returns call parameters proposed by remote.</para>
							<para>This is useful when receiving an incoming call, to know whether the remote party supports video, encryption or whatever. </para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="remote_user_agent">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_get_remote_user_agent">
						<return completetype="const char *" type="char"/>
						<arguments>
							<argument completetype="LinphoneCall *" name="call" type="LinphoneCall"/>
						</arguments>
						<detaileddescription>
							

							<para>Returns the far end's user agent description string, if available. </para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="replaced_call">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_get_replaced_call">
						<return completetype="LinphoneCall *" type="LinphoneCall"/>
						<arguments>
							<argument completetype="LinphoneCall *" name="call" type="LinphoneCall"/>
						</arguments>
						<detaileddescription>
							

							<para>Returns the call object this call is replacing, if any. Call replacement can occur during call transfers. By default, the core automatically terminates the replaced call and accept the new one. This function allows the application to know whether a new incoming call is a one that replaces another one. </para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="speaker_volume_gain">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_get_speaker_volume_gain">
						<return completetype="float" type="float">
							<description>
								<para>Percenatge of the max supported volume gain. Valid values are in [ 0.0 : 1.0 ]. In case of failure, a negative value is returned </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCall *" name="call" type="LinphoneCall">
								<description>
									

									<para>The call. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get speaker volume gain. If the sound backend supports it, the returned gain is equal to the gain set with the system mixer. 
								<description>
									<para>Percenatge of the max supported volume gain. Valid values are in [ 0.0 : 1.0 ]. In case of failure, a negative value is returned </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_set_speaker_volume_gain">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCall *" name="call" type="LinphoneCall">
								<description>
									

									<para>The call. </para>
								</description>
								

							</argument>
							<argument completetype="float" name="volume" type="float">
								<description>
									

									<para>Percentage of the max supported gain. Valid values are in [ 0.0 : 1.0 ]. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set speaker volume gain. If the sound backend supports it, the new gain will synchronized with the system mixer. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="state">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_get_state">
						<return completetype="LinphoneCallState" type="LinphoneCallState"/>
						<arguments>
							<argument completetype="const LinphoneCall *" name="call" type="LinphoneCall"/>
						</arguments>
						<detaileddescription>
							

							<para>Retrieves the call's current state. </para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="stream_count">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_get_stream_count">
						<return completetype="int" type="int">
							<description>
								<para>2 </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCall *" name="call" type="LinphoneCall">
								<description>
									

									<para/>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Returns the number of stream for the given call. Currently there is only two (Audio, Video), but later there will be more. 
								<description>
									<para>2 </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="transfer_state">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_get_transfer_state">
						<return completetype="LinphoneCallState" type="LinphoneCallState"/>
						<arguments>
							<argument completetype="LinphoneCall *" name="call" type="LinphoneCall"/>
						</arguments>
						<detaileddescription>
							

							<para>
								Returns the current transfer state, if a transfer has been initiated from this call. 
								<see>linphone_core_transfer_call() , linphone_core_transfer_call_to_another() </see>
							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="transfer_target_call">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_get_transfer_target_call">
						<return completetype="LinphoneCall *" type="LinphoneCall"/>
						<arguments>
							<argument completetype="const LinphoneCall *" name="call" type="LinphoneCall"/>
						</arguments>
						<detaileddescription>
							

							<para>When this call has received a transfer request, returns the new call that was automatically created as a result of the transfer. </para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="transferer_call">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_get_transferer_call">
						<return completetype="LinphoneCall *" type="LinphoneCall">
							<description>
								<para>The transferer call if the specified call was started automatically as a result of an incoming transfer request, NULL otherwise </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCall *" name="call" type="LinphoneCall">
								<description>
									

									<para>LinphoneCall object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the transferer if this call was started automatically as a result of an incoming transfer request. The call in which the transfer request was received is returned in this case. 
								<description>
									<para>The transferer call if the specified call was started automatically as a result of an incoming transfer request, NULL otherwise </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="user_data">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_get_user_data">
						<return completetype="void *" type="void">
							<description>
								<para>The user pointer associated with the call. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCall *" name="call" type="LinphoneCall">
								<description>
									

									<para>The call. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Retrieve the user pointer associated with the call. 
								<description>
									<para>The user pointer associated with the call. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call.h" name="linphone_call_set_user_data">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCall *" name="call" type="LinphoneCall">
								<description>
									

									<para>The call. </para>
								</description>
								

							</argument>
							<argument completetype="void *" name="ud" type="void">
								<description>
									

									<para>The user pointer to associate with the call. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Assign a user pointer to the call. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
			</properties>
			<detaileddescription>
				

				<para>The LinphoneCall object represents a call issued or received by the LinphoneCore </para>
				        
			</detaileddescription>
			
        
		</class>
		<class cfunctionprefix="linphone_call_log_" deprecated="false" destroyable="true" name="LinphoneCallLog" refcountable="true">
			<instancemethods>
				<instancemethod deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/call_log.h" name="linphone_call_log_destroy">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCallLog *" name="cl" type="LinphoneCallLog">
							<description>
								

								<para>LinphoneCallLog object </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Destroy a LinphoneCallLog. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_log.h" name="linphone_call_log_ref">
					<return completetype="LinphoneCallLog *" type="LinphoneCallLog">
						<description>
							<para>The same LinphoneCallLog object </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCallLog *" name="cl" type="LinphoneCallLog">
							<description>
								

								<para>LinphoneCallLog object </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Acquire a reference to the call log. 
							<description>
								<para>The same LinphoneCallLog object </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_log.h" name="linphone_call_log_to_str">
					<return completetype="char *" type="char">
						<description>
							<para>A human readable string describing the call. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCallLog *" name="cl" type="LinphoneCallLog">
							<description>
								

								<para>LinphoneCallLog object </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Get a human readable string describing the call. 
							<note>
								<para>: the returned string must be freed by the application (use ms_free()). </para>
							</note>
							

							<description>
								<para>A human readable string describing the call. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_log.h" name="linphone_call_log_unref">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCallLog *" name="cl" type="LinphoneCallLog">
							<description>
								

								<para>LinphoneCallLog object </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Release a reference to the call log. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_log.h" name="linphone_call_log_was_conference">
					<return completetype="bool_t" type="bool_t">
						<description>
							<para>TRUE if the call was a call to a conference server </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCallLog *" name="cl" type="LinphoneCallLog">
							<description>
								

								<para>
									<ref>LinphoneCallLog</ref>
									 object 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Tells whether that call was a call to a conference server 
							<description>
								<para>TRUE if the call was a call to a conference server </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
			</instancemethods>
			<properties>
				<property name="call_id">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_log.h" name="linphone_call_log_get_call_id">
						<return completetype="const char *" type="char">
							<description>
								<para>The call ID used by the call as a string. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCallLog *" name="cl" type="LinphoneCallLog">
								<description>
									

									<para>LinphoneCallLog object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the call ID used by the call. 
								<description>
									<para>The call ID used by the call as a string. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="dir">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_log.h" name="linphone_call_log_get_dir">
						<return completetype="LinphoneCallDir" type="LinphoneCallDir">
							<description>
								<para>The direction of the call. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCallLog *" name="cl" type="LinphoneCallLog">
								<description>
									

									<para>LinphoneCallLog object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the direction of the call. 
								<description>
									<para>The direction of the call. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="duration">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_log.h" name="linphone_call_log_get_duration">
						<return completetype="int" type="int">
							<description>
								<para>The duration of the call in seconds. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCallLog *" name="cl" type="LinphoneCallLog">
								<description>
									

									<para>LinphoneCallLog object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the duration of the call since connected. 
								<description>
									<para>The duration of the call in seconds. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="from_address">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_log.h" name="linphone_call_log_get_from_address">
						<return completetype="LinphoneAddress *" type="LinphoneAddress">
							<description>
								<para>The origin address (ie from) of the call. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCallLog *" name="cl" type="LinphoneCallLog">
								<description>
									

									<para>LinphoneCallLog object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the origin address (ie from) of the call. 
								<description>
									<para>The origin address (ie from) of the call. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="local_stats">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_log.h" name="linphone_call_log_get_local_stats">
						<return completetype="const rtp_stats_t *" type="rtp_stats_t">
							<description>
								<para>The RTP statistics that have been computed locally for the call. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCallLog *" name="cl" type="LinphoneCallLog">
								<description>
									

									<para>LinphoneCallLog object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the RTP statistics computed locally regarding the call. 
								<description>
									<para>The RTP statistics that have been computed locally for the call. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="quality">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_log.h" name="linphone_call_log_get_quality">
						<return completetype="float" type="float">
							<description>
								<para>The overall quality indication of the call. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCallLog *" name="cl" type="LinphoneCallLog">
								<description>
									

									<para>LinphoneCallLog object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the overall quality indication of the call. 
								<description>
									<para>The overall quality indication of the call. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="ref_key">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_log.h" name="linphone_call_log_get_ref_key">
						<return completetype="const char *" type="char">
							<description>
								<para>The reference key string that has been associated to the call log, or NULL if none has been associated. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCallLog *" name="cl" type="LinphoneCallLog">
								<description>
									

									<para>LinphoneCallLog object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Get the persistent reference key associated to the call log.</para>
							<para>The reference key can be for example an id to an external database. It is stored in the config file, thus can survive to process exits/restarts.</para>
							<para>
								<description>
									<para>The reference key string that has been associated to the call log, or NULL if none has been associated. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_log.h" name="linphone_call_log_set_ref_key">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCallLog *" name="cl" type="LinphoneCallLog">
								<description>
									

									<para>LinphoneCallLog object </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="refkey" type="char">
								<description>
									

									<para>The reference key string to associate to the call log. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Associate a persistent reference key to the call log.</para>
							<para>The reference key can be for example an id to an external database. It is stored in the config file, thus can survive to process exits/restarts.</para>
							<para/>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="remote_address">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_log.h" name="linphone_call_log_get_remote_address">
						<return completetype="LinphoneAddress *" type="LinphoneAddress">
							<description>
								<para>The remote address of the call. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCallLog *" name="cl" type="LinphoneCallLog">
								<description>
									

									<para>LinphoneCallLog object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the remote address (that is from or to depending on call direction). 
								<description>
									<para>The remote address of the call. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="remote_stats">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_log.h" name="linphone_call_log_get_remote_stats">
						<return completetype="const rtp_stats_t *" type="rtp_stats_t">
							<description>
								<para>The RTP statistics that have been computed by the remote end for the call. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCallLog *" name="cl" type="LinphoneCallLog">
								<description>
									

									<para>LinphoneCallLog object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the RTP statistics computed by the remote end and sent back via RTCP. 
								<note>
									<para>Not implemented yet. </para>
								</note>
								

								<description>
									<para>The RTP statistics that have been computed by the remote end for the call. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="start_date">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_log.h" name="linphone_call_log_get_start_date">
						<return completetype="time_t" type="time_t">
							<description>
								<para>The date of the beginning of the call. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCallLog *" name="cl" type="LinphoneCallLog">
								<description>
									

									<para>LinphoneCallLog object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the start date of the call. 
								<description>
									<para>The date of the beginning of the call. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="status">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_log.h" name="linphone_call_log_get_status">
						<return completetype="LinphoneCallStatus" type="LinphoneCallStatus">
							<description>
								<para>The status of the call. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCallLog *" name="cl" type="LinphoneCallLog">
								<description>
									

									<para>LinphoneCallLog object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the status of the call. 
								<description>
									<para>The status of the call. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="to_address">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_log.h" name="linphone_call_log_get_to_address">
						<return completetype="LinphoneAddress *" type="LinphoneAddress">
							<description>
								<para>The destination address (ie to) of the call. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCallLog *" name="cl" type="LinphoneCallLog">
								<description>
									

									<para>LinphoneCallLog object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the destination address (ie to) of the call. 
								<description>
									<para>The destination address (ie to) of the call. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="user_data">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_log.h" name="linphone_call_log_get_user_data">
						<return completetype="void *" type="void">
							<description>
								<para>The user data associated with the call log. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCallLog *" name="cl" type="LinphoneCallLog">
								<description>
									

									<para>LinphoneCallLog object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the user data associated with the call log. 
								<description>
									<para>The user data associated with the call log. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_log.h" name="linphone_call_log_set_user_data">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCallLog *" name="cl" type="LinphoneCallLog">
								<description>
									

									<para>LinphoneCallLog object </para>
								</description>
								

							</argument>
							<argument completetype="void *" name="ud" type="void">
								<description>
									

									<para>The user data to associate with the call log. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Assign a user data to the call log. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="video_enabled">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_log.h" name="linphone_call_log_video_enabled">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>A boolean value telling whether video was enabled at the end of the call. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCallLog *" name="cl" type="LinphoneCallLog">
								<description>
									

									<para>LinphoneCallLog object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Tell whether video was enabled at the end of the call or not. 
								<description>
									<para>A boolean value telling whether video was enabled at the end of the call. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
			</properties>
			<detaileddescription>
				

				<para>Structure representing a call log. </para>
				        
			</detaileddescription>
			
        
		</class>
		<class cfunctionprefix="linphone_call_params_" deprecated="false" destroyable="true" name="LinphoneCallParams" refcountable="true">
			<instancemethods>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_params.h" name="linphone_call_params_add_custom_header">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCallParams *" name="cp" type="LinphoneCallParams">
							<description>
								

								<para>
									The 
									<ref>LinphoneCallParams</ref>
									 to add a custom SIP header to. 
								</para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="header_name" type="char">
							<description>
								

								<para>The name of the header to add. </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="header_value" type="char">
							<description>
								

								<para>The content of the header to add. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Add a custom SIP header in the INVITE for a call. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_params.h" name="linphone_call_params_add_custom_sdp_attribute">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCallParams *" name="params" type="LinphoneCallParams">
							<description>
								

								<para>
									The 
									<ref>LinphoneCallParams</ref>
									 to add a custom SDP attribute to. 
								</para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="attribute_name" type="char">
							<description>
								

								<para>The name of the attribute to add. </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="attribute_value" type="char">
							<description>
								

								<para>The content value of the attribute to add. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Add a custom attribute related to all the streams in the SDP exchanged within SIP messages during a call. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_params.h" name="linphone_call_params_add_custom_sdp_media_attribute">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCallParams *" name="params" type="LinphoneCallParams">
							<description>
								

								<para>
									The 
									<ref>LinphoneCallParams</ref>
									 to add a custom SDP attribute to. 
								</para>
							</description>
							

						</argument>
						<argument completetype="LinphoneStreamType" name="type" type="LinphoneStreamType">
							<description>
								

								<para>The type of the stream to add a custom SDP attribute to. </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="attribute_name" type="char">
							<description>
								

								<para>The name of the attribute to add. </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="attribute_value" type="char">
							<description>
								

								<para>The content value of the attribute to add. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Add a custom attribute related to a specific stream in the SDP exchanged within SIP messages during a call. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_params.h" name="linphone_call_params_clear_custom_sdp_attributes">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCallParams *" name="params" type="LinphoneCallParams">
							<description>
								

								<para>
									The 
									<ref>LinphoneCallParams</ref>
									 to clear the custom SDP attributes from. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Clear the custom SDP attributes related to all the streams in the SDP exchanged within SIP messages during a call. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_params.h" name="linphone_call_params_clear_custom_sdp_media_attributes">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCallParams *" name="params" type="LinphoneCallParams">
							<description>
								

								<para>
									The 
									<ref>LinphoneCallParams</ref>
									 to clear the custom SDP attributes from. 
								</para>
							</description>
							

						</argument>
						<argument completetype="LinphoneStreamType" name="type" type="LinphoneStreamType">
							<description>
								

								<para>The type of the stream to clear the custom SDP attributes from. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Clear the custom SDP attributes related to a specific stream in the SDP exchanged within SIP messages during a call. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_params.h" name="linphone_call_params_copy">
					<return completetype="LinphoneCallParams *" type="LinphoneCallParams">
						<description>
							<para>A copy of the LinphoneCallParams object. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const LinphoneCallParams *" name="cp" type="LinphoneCallParams">
							<description>
								

								<para>The LinphoneCallParams object to copy. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Copy an existing LinphoneCallParams object to a new LinphoneCallParams object. 
							<description>
								<para>A copy of the LinphoneCallParams object. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/call_params.h" name="linphone_call_params_destroy">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCallParams *" name="cp" type="LinphoneCallParams">
							<description>
								

								<para>LinphoneCallParams object </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Destroy a LinphoneCallParams object. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_params.h" name="linphone_call_params_get_custom_header">
					<return completetype="const char *" type="char">
						<description>
							<para>The content of the header or NULL if not found. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const LinphoneCallParams *" name="cp" type="LinphoneCallParams">
							<description>
								

								<para>
									The 
									<ref>LinphoneCallParams</ref>
									 to get the custom SIP header from. 
								</para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="header_name" type="char">
							<description>
								

								<para>The name of the header to get. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Get a custom SIP header. 
							<description>
								<para>The content of the header or NULL if not found. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_params.h" name="linphone_call_params_get_custom_sdp_attribute">
					<return completetype="const char *" type="char">
						<description>
							<para>The content value of the attribute or NULL if not found. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const LinphoneCallParams *" name="params" type="LinphoneCallParams">
							<description>
								

								<para>
									The 
									<ref>LinphoneCallParams</ref>
									 to get the custom SDP attribute from. 
								</para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="attribute_name" type="char">
							<description>
								

								<para>The name of the attribute to get. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Get a custom SDP attribute that is related to all the streams. 
							<description>
								<para>The content value of the attribute or NULL if not found. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_params.h" name="linphone_call_params_get_custom_sdp_media_attribute">
					<return completetype="const char *" type="char">
						<description>
							<para>The content value of the attribute or NULL if not found. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const LinphoneCallParams *" name="params" type="LinphoneCallParams">
							<description>
								

								<para>
									The 
									<ref>LinphoneCallParams</ref>
									 to get the custom SDP attribute from. 
								</para>
							</description>
							

						</argument>
						<argument completetype="LinphoneStreamType" name="type" type="LinphoneStreamType">
							<description>
								

								<para>The type of the stream to add a custom SDP attribute to. </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="attribute_name" type="char">
							<description>
								

								<para>The name of the attribute to get. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Get a custom SDP attribute that is related to a specific stream. 
							<description>
								<para>The content value of the attribute or NULL if not found. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_params.h" name="linphone_call_params_ref">
					<return completetype="LinphoneCallParams *" type="LinphoneCallParams">
						<description>
							<para>The same LinphoneCallParams object </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCallParams *" name="cp" type="LinphoneCallParams">
							<description>
								

								<para>LinphoneCallParams object </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Acquire a reference to the call params. 
							<description>
								<para>The same LinphoneCallParams object </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_params.h" name="linphone_call_params_unref">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCallParams *" name="cp" type="LinphoneCallParams">
							<description>
								

								<para>LinphoneCallParams object </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Release a reference to the call params. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
			</instancemethods>
			<properties>
				<property name="audio_bandwidth_limit">
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_params.h" name="linphone_call_params_set_audio_bandwidth_limit">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCallParams *" name="cp" type="LinphoneCallParams">
								<description>
									

									<para>LinphoneCallParams object </para>
								</description>
								

							</argument>
							<argument completetype="int" name="bw" type="int">
								<description>
									

									<para>The audio bandwidth limit to set in kbit/s. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Refine bandwidth settings for this call by setting a bandwidth limit for audio streams. As a consequence, codecs whose bitrates are not compatible with this limit won't be used. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="audio_direction">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_params.h" name="linphone_call_params_get_audio_direction">
						<return completetype="LinphoneMediaDirection" type="LinphoneMediaDirection">
							<description>
								<para>The audio stream direction associated with the call params. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCallParams *" name="cp" type="LinphoneCallParams">
								<description>
									

									<para>LinphoneCallParams object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the audio stream direction. 
								<description>
									<para>The audio stream direction associated with the call params. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_params.h" name="linphone_call_params_set_audio_direction">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCallParams *" name="cp" type="LinphoneCallParams">
								<description>
									

									<para>LinphoneCallParams object </para>
								</description>
								

							</argument>
							<argument completetype="LinphoneMediaDirection" name="dir" type="LinphoneMediaDirection">
								<description>
									

									<para>The audio stream direction associated with this call params. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the audio stream direction. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="audio_enabled">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_params.h" name="linphone_call_params_audio_enabled">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>A boolean value telling whether audio is enabled or not. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCallParams *" name="cp" type="LinphoneCallParams">
								<description>
									

									<para>LinphoneCallParams object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Tell whether audio is enabled or not. 
								<description>
									<para>A boolean value telling whether audio is enabled or not. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_params.h" name="linphone_call_params_enable_audio">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCallParams *" name="cp" type="LinphoneCallParams">
								<description>
									

									<para>LinphoneCallParams object </para>
								</description>
								

							</argument>
							<argument completetype="bool_t" name="enabled" type="bool_t">
								<description>
									

									<para>A boolean value telling whether to enable audio or not. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Enable audio stream. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="audio_multicast_enabled">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_params.h" name="linphone_call_params_audio_multicast_enabled">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>
									true if subsequent calls will propose multicast ip set by 
									<ref>linphone_core_set_audio_multicast_addr</ref>
									 
								</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCallParams *" name="params" type="LinphoneCallParams">
								<description>
									

									<para>
										<ref>LinphoneCallParams</ref>
										 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Use to get multicast state of audio stream. 
								<description>
									<para>
										true if subsequent calls will propose multicast ip set by 
										<ref>linphone_core_set_audio_multicast_addr</ref>
										 
									</para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_params.h" name="linphone_call_params_enable_audio_multicast">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCallParams *" name="params" type="LinphoneCallParams"/>
							<argument completetype="bool_t" name="yesno" type="bool_t"/>
						</arguments>
						<detaileddescription>
							

							<para>
								Use to enable multicast rtp for audio stream.
								<itemizedlist>
									

									<listitem>
										<para>
											If enabled, outgoing calls put a multicast address from 
											<ref>linphone_core_get_video_multicast_addr</ref>
											 into audio cline. In case of outgoing call audio stream is sent to this multicast address. 
											<linebreak/>
											
 For incoming calls behavior is unchanged. 
											<parameterlist kind="param">
												<parameteritem>
													

													<parameternamelist>
														

														<parametername>params</parametername>
														

													</parameternamelist>
													

													<parameterdescription>
														

														<para>
															<ref>LinphoneCallParams</ref>
															 
														</para>
													</parameterdescription>
													

												</parameteritem>
												

												<parameteritem>
													

													<parameternamelist>
														

														<parametername>yesno</parametername>
														

													</parameternamelist>
													

													<parameterdescription>
														

														<para>
															if yes, subsequent calls will propose multicast ip set by 
															<ref>linphone_core_set_audio_multicast_addr</ref>
															 
														</para>
													</parameterdescription>
													

												</parameteritem>
												

											</parameterlist>
											

										</para>
									</listitem>
								</itemizedlist>
								

							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="early_media_sending_enabled">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_params.h" name="linphone_call_params_early_media_sending_enabled">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>A boolean value telling whether sending of early media was enabled. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCallParams *" name="cp" type="LinphoneCallParams">
								<description>
									

									<para>LinphoneCallParams object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Indicate whether sending of early media was enabled. 
								<description>
									<para>A boolean value telling whether sending of early media was enabled. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_params.h" name="linphone_call_params_enable_early_media_sending">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCallParams *" name="cp" type="LinphoneCallParams">
								<description>
									

									<para>LinphoneCallParams object </para>
								</description>
								

							</argument>
							<argument completetype="bool_t" name="enabled" type="bool_t">
								<description>
									

									<para>A boolean value telling whether to enable early media sending or not. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Enable sending of real early media (during outgoing calls). </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="local_conference_mode">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_params.h" name="linphone_call_params_get_local_conference_mode">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>A boolean value telling whether the call is part of the locally managed conference. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCallParams *" name="cp" type="LinphoneCallParams">
								<description>
									

									<para>LinphoneCallParams object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Tell whether the call is part of the locally managed conference. 
								<simplesect kind="warning">
									<para>
										If a conference server is used to manage conferences, that function does not return TRUE even if the conference is running.
										<linebreak/>
										
 If you want to test whether the conference is running, you should test whether 
										<ref>linphone_core_get_conference()</ref>
										 return a non-null pointer. 
									</para>
								</simplesect>
								

								<description>
									<para>A boolean value telling whether the call is part of the locally managed conference. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="low_bandwidth_enabled">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_params.h" name="linphone_call_params_low_bandwidth_enabled">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>A boolean value telling whether the low bandwidth mode has been configured/detected. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCallParams *" name="cp" type="LinphoneCallParams">
								<description>
									

									<para>LinphoneCallParams object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Tell whether the call has been configured in low bandwidth mode or not. This mode can be automatically discovered thanks to a stun server when activate_edge_workarounds=1 in section [net] of configuration file. An application that would have reliable way to know network capacity may not use activate_edge_workarounds=1 but instead manually configure low bandwidth mode with 
								<ref>linphone_call_params_enable_low_bandwidth()</ref>
								. When enabled, this param may transform a call request with video in audio only mode. 
								<description>
									<para>A boolean value telling whether the low bandwidth mode has been configured/detected. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_params.h" name="linphone_call_params_enable_low_bandwidth">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCallParams *" name="cp" type="LinphoneCallParams">
								<description>
									

									<para>LinphoneCallParams object </para>
								</description>
								

							</argument>
							<argument completetype="bool_t" name="enabled" type="bool_t">
								<description>
									

									<para>A boolean value telling whether to activate the low bandwidth mode or not. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Indicate low bandwith mode. Configuring a call to low bandwidth mode will result in the core to activate several settings for the call in order to ensure that bitrate usage is lowered to the minimum possible. Typically, ptime (packetization time) will be increased, audio codec's output bitrate will be targetted to 20kbit/s provided that it is achievable by the codec selected after SDP handshake. Video is automatically disabled. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="media_encryption">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_params.h" name="linphone_call_params_get_media_encryption">
						<return completetype="LinphoneMediaEncryption" type="LinphoneMediaEncryption">
							<description>
								<para>The kind of media encryption selected for the call. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCallParams *" name="cp" type="LinphoneCallParams">
								<description>
									

									<para>LinphoneCallParams object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the kind of media encryption selected for the call. 
								<description>
									<para>The kind of media encryption selected for the call. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_params.h" name="linphone_call_params_set_media_encryption">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCallParams *" name="cp" type="LinphoneCallParams">
								<description>
									

									<para>LinphoneCallParams object </para>
								</description>
								

							</argument>
							<argument completetype="LinphoneMediaEncryption" name="enc" type="LinphoneMediaEncryption">
								<description>
									

									<para>The media encryption to use for the call. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set requested media encryption for a call. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="privacy">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_params.h" name="linphone_call_params_get_privacy">
						<return completetype="LinphonePrivacyMask" type="LinphonePrivacyMask">
							<description>
								<para>The privacy mode used for the call. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCallParams *" name="cp" type="LinphoneCallParams">
								<description>
									

									<para>LinphoneCallParams object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get requested level of privacy for the call. 
								<description>
									<para>The privacy mode used for the call. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_params.h" name="linphone_call_params_set_privacy">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCallParams *" name="cp" type="LinphoneCallParams">
								<description>
									

									<para>LinphoneCallParams object </para>
								</description>
								

							</argument>
							<argument completetype="LinphonePrivacyMask" name="privacy" type="LinphonePrivacyMask">
								<description>
									

									<para>The privacy mode to used for the call. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Set requested level of privacy for the call.  
								<language-tags>javascript</language-tags>
								  
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="realtime_text_enabled">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_params.h" name="linphone_call_params_realtime_text_enabled">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>returns true if call rtt is activated. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCallParams *" name="params" type="LinphoneCallParams">
								<description>
									

									<para>
										<ref>LinphoneCallParams</ref>
										 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Use to get real time text following rfc4103. 
								<description>
									<para>returns true if call rtt is activated. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_params.h" name="linphone_call_params_enable_realtime_text">
						<return completetype="int" type="int"/>
						<arguments>
							<argument completetype="LinphoneCallParams *" name="params" type="LinphoneCallParams">
								<description>
									

									<para>
										<ref>LinphoneCallParams</ref>
										 
									</para>
								</description>
								

							</argument>
							<argument completetype="bool_t" name="yesno" type="bool_t">
								<description>
									

									<para>if yes, subsequent outgoing calls will propose rtt </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Use to enable real time text following rfc4103. If enabled, outgoing calls put a m=text line in SDP offer . </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="received_framerate">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_params.h" name="linphone_call_params_get_received_framerate">
						<return completetype="float" type="float">
							<description>
								<para>The actual received framerate in frames per seconds, 0 if not available. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCallParams *" name="cp" type="LinphoneCallParams">
								<description>
									

									<para>LinphoneCallParams object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the framerate of the video that is received. 
								<description>
									<para>The actual received framerate in frames per seconds, 0 if not available. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="received_video_size">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_params.h" name="linphone_call_params_get_received_video_size">
						<return completetype="MSVideoSize" type="MSVideoSize">
							<description>
								<para>The received video size or MS_VIDEO_SIZE_UNKNOWN if not available. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCallParams *" name="cp" type="LinphoneCallParams">
								<description>
									

									<para>LinphoneCallParams object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the size of the video that is received. 
								<description>
									<para>The received video size or MS_VIDEO_SIZE_UNKNOWN if not available. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="record_file">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_params.h" name="linphone_call_params_get_record_file">
						<return completetype="const char *" type="char">
							<description>
								<para>The path to the audio recording of the call. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCallParams *" name="cp" type="LinphoneCallParams">
								<description>
									

									<para>LinphoneCallParams object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the path for the audio recording of the call. 
								<description>
									<para>The path to the audio recording of the call. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_params.h" name="linphone_call_params_set_record_file">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCallParams *" name="cp" type="LinphoneCallParams">
								<description>
									

									<para>LinphoneCallParams object </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="path" type="char">
								<description>
									

									<para>A string containing the path and filename of the file where audio/video streams are to be written. The filename must have either .mkv or .wav extention. The video stream will be written only if a MKV file is given. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Enable recording of the call. This function must be used before the call parameters are assigned to the call. The call recording can be started and paused after the call is established with 
								<ref>linphone_call_start_recording()</ref>
								 and linphone_call_pause_recording(). 
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="rtp_profile">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_params.h" name="linphone_call_params_get_rtp_profile">
						<return completetype="const char *" type="char">
							<description>
								<para>The RTP profile. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCallParams *" name="cp" type="LinphoneCallParams">
								<description>
									

									<para>
										<ref>LinphoneCallParams</ref>
										 object 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the RTP profile being used. 
								<description>
									<para>The RTP profile. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="sent_framerate">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_params.h" name="linphone_call_params_get_sent_framerate">
						<return completetype="float" type="float">
							<description>
								<para>The actual sent framerate in frames per seconds, 0 if not available. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCallParams *" name="cp" type="LinphoneCallParams">
								<description>
									

									<para>LinphoneCallParams object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the framerate of the video that is sent. 
								<description>
									<para>The actual sent framerate in frames per seconds, 0 if not available. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="sent_video_size">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_params.h" name="linphone_call_params_get_sent_video_size">
						<return completetype="MSVideoSize" type="MSVideoSize">
							<description>
								<para>The sent video size or MS_VIDEO_SIZE_UNKNOWN if not available. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCallParams *" name="cp" type="LinphoneCallParams">
								<description>
									

									<para>LinphoneCalParams object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the size of the video that is sent. 
								<description>
									<para>The sent video size or MS_VIDEO_SIZE_UNKNOWN if not available. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="session_name">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_params.h" name="linphone_call_params_get_session_name">
						<return completetype="const char *" type="char">
							<description>
								<para>The session name of the media session. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCallParams *" name="cp" type="LinphoneCallParams">
								<description>
									

									<para>LinphoneCallParams object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the session name of the media session (ie in SDP). Subject from the SIP message can be retrieved using 
								<ref>linphone_call_params_get_custom_header()</ref>
								 and is different. 
								<description>
									<para>The session name of the media session. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_params.h" name="linphone_call_params_set_session_name">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCallParams *" name="cp" type="LinphoneCallParams">
								<description>
									

									<para>LinphoneCallParams object </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="name" type="char">
								<description>
									

									<para>The session name to be used. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the session name of the media session (ie in SDP). Subject from the SIP message (which is different) can be set using linphone_call_params_set_custom_header(). </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="used_audio_codec">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_params.h" name="linphone_call_params_get_used_audio_codec">
						<return completetype="const LinphonePayloadType *" type="LinphonePayloadType">
							<description>
								<para>The LinphonePayloadType object corresponding to the audio codec being used in the call. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCallParams *" name="cp" type="LinphoneCallParams">
								<description>
									

									<para>LinphoneCallParams object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the audio codec used in the call, described as a LinphonePayloadType object. 
								<description>
									<para>The LinphonePayloadType object corresponding to the audio codec being used in the call. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="used_text_codec">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_params.h" name="linphone_call_params_get_used_text_codec">
						<return completetype="const LinphonePayloadType *" type="LinphonePayloadType">
							<description>
								<para>The LinphonePayloadType object corresponding to the text codec being used in the call. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCallParams *" name="cp" type="LinphoneCallParams">
								<description>
									

									<para>LinphoneCallParams object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the text codec used in the call, described as a LinphonePayloadType structure. 
								<description>
									<para>The LinphonePayloadType object corresponding to the text codec being used in the call. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="used_video_codec">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_params.h" name="linphone_call_params_get_used_video_codec">
						<return completetype="const LinphonePayloadType *" type="LinphonePayloadType">
							<description>
								<para>The LinphonePayloadType object corresponding to the video codec being used in the call. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCallParams *" name="cp" type="LinphoneCallParams">
								<description>
									

									<para>LinphoneCallParams object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the video codec used in the call, described as a LinphonePayloadType structure. 
								<description>
									<para>The LinphonePayloadType object corresponding to the video codec being used in the call. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="user_data">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_params.h" name="linphone_call_params_get_user_data">
						<return completetype="void *" type="void">
							<description>
								<para>The user data associated with the call params. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCallParams *" name="cp" type="LinphoneCallParams">
								<description>
									

									<para>LinphoneCallParams object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the user data associated with the call params. 
								<description>
									<para>The user data associated with the call params. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_params.h" name="linphone_call_params_set_user_data">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCallParams *" name="cp" type="LinphoneCallParams">
								<description>
									

									<para>LinphoneCallParams object </para>
								</description>
								

							</argument>
							<argument completetype="void *" name="ud" type="void">
								<description>
									

									<para>The user data to associate with the call params. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Assign a user data to the call params. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="video_direction">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_params.h" name="linphone_call_params_get_video_direction">
						<return completetype="LinphoneMediaDirection" type="LinphoneMediaDirection">
							<description>
								<para>The video stream direction associated with the call params. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCallParams *" name="cp" type="LinphoneCallParams">
								<description>
									

									<para>LinphoneCallParams object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the video stream direction. 
								<description>
									<para>The video stream direction associated with the call params. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_params.h" name="linphone_call_params_set_video_direction">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCallParams *" name="cp" type="LinphoneCallParams">
								<description>
									

									<para>LinphoneCallParams object </para>
								</description>
								

							</argument>
							<argument completetype="LinphoneMediaDirection" name="dir" type="LinphoneMediaDirection">
								<description>
									

									<para>The video stream direction associated with this call params. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the video stream direction. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="video_enabled">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_params.h" name="linphone_call_params_video_enabled">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>A boolean value telling whether video is enabled or not. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCallParams *" name="cp" type="LinphoneCallParams">
								<description>
									

									<para>LinphoneCallParams object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Tell whether video is enabled or not. 
								<description>
									<para>A boolean value telling whether video is enabled or not. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_params.h" name="linphone_call_params_enable_video">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCallParams *" name="cp" type="LinphoneCallParams">
								<description>
									

									<para>LinphoneCallParams object </para>
								</description>
								

							</argument>
							<argument completetype="bool_t" name="enabled" type="bool_t">
								<description>
									

									<para>A boolean value telling whether to enable video or not. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Enable video stream. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="video_multicast_enabled">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_params.h" name="linphone_call_params_video_multicast_enabled">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>
									true if subsequent calls will propose multicast ip set by 
									<ref>linphone_core_set_video_multicast_addr</ref>
									 
								</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCallParams *" name="params" type="LinphoneCallParams">
								<description>
									

									<para>
										<ref>LinphoneCallParams</ref>
										 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Use to get multicast state of video stream. 
								<description>
									<para>
										true if subsequent calls will propose multicast ip set by 
										<ref>linphone_core_set_video_multicast_addr</ref>
										 
									</para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_params.h" name="linphone_call_params_enable_video_multicast">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCallParams *" name="params" type="LinphoneCallParams">
								<description>
									

									<para>
										<ref>LinphoneCallParams</ref>
										 
									</para>
								</description>
								

							</argument>
							<argument completetype="bool_t" name="yesno" type="bool_t">
								<description>
									

									<para>
										if yes, subsequent outgoing calls will propose multicast ip set by 
										<ref>linphone_core_set_video_multicast_addr</ref>
										 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Use to enable multicast rtp for video stream. If enabled, outgoing calls put a multicast address from 
								<ref>linphone_core_get_video_multicast_addr</ref>
								 into video cline. In case of outgoing call video stream is sent to this multicast address. 
								<linebreak/>
								
 For incoming calls behavior is unchanged. 
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
			</properties>
			<detaileddescription>
				

				<para>The LinphoneCallParams is an object containing various call related parameters. It can be used to retrieve parameters from a currently running call or modify the call's characteristics dynamically. </para>
				        
			</detaileddescription>
			
        
		</class>
		<class cfunctionprefix="linphone_call_stats_" deprecated="false" destroyable="false" name="LinphoneCallStats" refcountable="false">
			<instancemethods>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_stats.h" name="linphone_call_stats_get_late_packets_cumulative_number">
					<return completetype="uint64_t" type="uint64_t">
						<description>
							<para>The cumulative number of late packets </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const LinphoneCallStats *" name="stats" type="LinphoneCallStats"/>
						<argument completetype="LinphoneCall *" name="call" type="LinphoneCall"/>
					</arguments>
					<detaileddescription>
						

						<para>
							Gets the cumulative number of late packets 
							<description>
								<para>The cumulative number of late packets </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_stats.h" name="linphone_call_stats_get_receiver_interarrival_jitter">
					<return completetype="float" type="float">
						<description>
							<para>The interarrival jitter at last received receiver report </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const LinphoneCallStats *" name="stats" type="LinphoneCallStats"/>
						<argument completetype="LinphoneCall *" name="call" type="LinphoneCall"/>
					</arguments>
					<detaileddescription>
						

						<para>
							Gets the remote reported interarrival jitter 
							<description>
								<para>The interarrival jitter at last received receiver report </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_stats.h" name="linphone_call_stats_get_sender_interarrival_jitter">
					<return completetype="float" type="float">
						<description>
							<para>The interarrival jitter at last emitted sender report </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const LinphoneCallStats *" name="stats" type="LinphoneCallStats"/>
						<argument completetype="LinphoneCall *" name="call" type="LinphoneCall"/>
					</arguments>
					<detaileddescription>
						

						<para>
							Gets the local interarrival jitter 
							<description>
								<para>The interarrival jitter at last emitted sender report </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
			</instancemethods>
			<properties>
				<property name="download_bandwidth">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_stats.h" name="linphone_call_stats_get_download_bandwidth">
						<return completetype="float" type="float">
							<description>
								<para>The bandwidth measurement of the received stream in kbit/s. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCallStats *" name="stats" type="LinphoneCallStats">
								<description>
									

									<para>LinphoneCallStats object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the bandwidth measurement of the received stream, expressed in kbit/s, including IP/UDP/RTP headers. 
								<description>
									<para>The bandwidth measurement of the received stream in kbit/s. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="ice_state">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_stats.h" name="linphone_call_stats_get_ice_state">
						<return completetype="LinphoneIceState" type="LinphoneIceState">
							<description>
								<para>The state of ICE processing. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCallStats *" name="stats" type="LinphoneCallStats">
								<description>
									

									<para>LinphoneCallStats object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the state of ICE processing. 
								<description>
									<para>The state of ICE processing. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="receiver_loss_rate">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_stats.h" name="linphone_call_stats_get_receiver_loss_rate">
						<return completetype="float" type="float">
							<description>
								<para>The receiver loss rate </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCallStats *" name="stats" type="LinphoneCallStats"/>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the remote reported loss rate since last report 
								<description>
									<para>The receiver loss rate </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="sender_loss_rate">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_stats.h" name="linphone_call_stats_get_sender_loss_rate">
						<return completetype="float" type="float">
							<description>
								<para>The sender loss rate </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCallStats *" name="stats" type="LinphoneCallStats"/>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the local loss rate since last report 
								<description>
									<para>The sender loss rate </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="upload_bandwidth">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_stats.h" name="linphone_call_stats_get_upload_bandwidth">
						<return completetype="float" type="float">
							<description>
								<para>The bandwidth measurement of the sent stream in kbit/s. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCallStats *" name="stats" type="LinphoneCallStats">
								<description>
									

									<para>LinphoneCallStats object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the bandwidth measurement of the sent stream, expressed in kbit/s, including IP/UDP/RTP headers. 
								<description>
									<para>The bandwidth measurement of the sent stream in kbit/s. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="upnp_state">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/call_stats.h" name="linphone_call_stats_get_upnp_state">
						<return completetype="LinphoneUpnpState" type="LinphoneUpnpState">
							<description>
								<para>The state of uPnP processing. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCallStats *" name="stats" type="LinphoneCallStats">
								<description>
									

									<para>LinphoneCallStats object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the state of uPnP processing. 
								<description>
									<para>The state of uPnP processing. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
			</properties>
			<detaileddescription>
				

				<para>The LinphoneCallStats objects carries various statistic informations regarding quality of audio or video streams.</para>
				<para>
					To receive these informations periodically and as soon as they are computed, the application is invited to place a 
					<ref>LinphoneCoreCallStatsUpdatedCb</ref>
					 callback in the LinphoneCoreVTable structure it passes for instanciating the LinphoneCore object (see 
					<ref>linphone_core_new()</ref>
					 ).
				</para>
				<para>At any time, the application can access last computed statistics using linphone_call_get_audio_stats() or linphone_call_get_video_stats(). </para>
				        
			</detaileddescription>
			
        
		</class>
		<class cfunctionprefix="linphone_chat_message_" deprecated="false" destroyable="true" name="LinphoneChatMessage" refcountable="true">
			<events>
				<event deprecated="true" name="LinphoneChatMessageStateChangedCb">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneChatMessage *" name="msg" type="LinphoneChatMessage">
							<description>
								

								<para>
									<ref>LinphoneChatMessage</ref>
									 object 
								</para>
							</description>
							

						</argument>
						<argument completetype="LinphoneChatMessageState" name="state" type="LinphoneChatMessageState"/>
						<argument completetype="void *" name="ud" type="void">
							<description>
								

								<para>application user data </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Call back used to notify message delivery status </para>
						        
					</detaileddescription>
					
        
				</event>
			</events>
			<classmethods>
				<classmethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_message_state_to_string">
					<return completetype="const char *" type="char"/>
					<arguments>
						<argument completetype="const LinphoneChatMessageState" name="state" type="LinphoneChatMessageState"/>
					</arguments>
					<detaileddescription>
						

						<para>
							Returns a 
							<ref>LinphoneChatMessageState</ref>
							 as a string. 
						</para>
						        
					</detaileddescription>
					
        
				</classmethod>
			</classmethods>
			<instancemethods>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_message_add_custom_header">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneChatMessage *" name="message" type="LinphoneChatMessage">
							<description>
								

								<para>the message </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="header_name" type="char">
							<description>
								

								<para>name of the header_name </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="header_value" type="char">
							<description>
								

								<para>header value </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Add custom headers to the message. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_message_cancel_file_transfer">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneChatMessage *" name="msg" type="LinphoneChatMessage">
							<description>
								

								<para>
									<ref>LinphoneChatMessage</ref>
									 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Cancel an ongoing file transfer attached to this message.(upload or download) </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_message_clone">
					<return completetype="LinphoneChatMessage *" type="LinphoneChatMessage"/>
					<arguments>
						<argument completetype="const LinphoneChatMessage *" name="message" type="LinphoneChatMessage"/>
					</arguments>
					<detaileddescription>
						

						<para>Duplicate a LinphoneChatMessage </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_message_destroy">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneChatMessage *" name="msg" type="LinphoneChatMessage"/>
					</arguments>
					<detaileddescription>
						

						<para>Destroys a LinphoneChatMessage. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_message_download_file">
					<return completetype="int" type="int"/>
					<arguments>
						<argument completetype="LinphoneChatMessage *" name="message" type="LinphoneChatMessage">
							<description>
								

								<para>LinphoneChatMessage object. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Start the download of the file referenced in a LinphoneChatMessage from remote server. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_message_get_custom_header">
					<return completetype="const char *" type="char"/>
					<arguments>
						<argument completetype="LinphoneChatMessage *" name="message" type="LinphoneChatMessage">
							<description>
								

								<para>the message </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="header_name" type="char">
							<description>
								

								<para>header name searched </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Retrieve a custom header value given its name. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_message_put_char">
					<return completetype="int" type="int">
						<description>
							<para>0 if succeed. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneChatMessage *" name="msg" type="LinphoneChatMessage">
							<description>
								

								<para>LinphoneChatMessage </para>
							</description>
							

						</argument>
						<argument completetype="uint32_t" name="character" type="uint32_t">
							<description>
								

								<para>T.140 char </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Fulfill a chat message char by char. Message linked to a Real Time Text Call send char in realtime following RFC 4103/T.140 To commit a message, use 
							<ref>linphone_chat_room_send_message</ref>
							 
							<description>
								<para>0 if succeed. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_message_ref">
					<return completetype="LinphoneChatMessage *" type="LinphoneChatMessage">
						<description>
							<para>the same chat message </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneChatMessage *" name="msg" type="LinphoneChatMessage">
							<description>
								

								<para>the chat message </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Acquire a reference to the chat message. 
							<description>
								<para>the same chat message </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_message_remove_custom_header">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneChatMessage *" name="msg" type="LinphoneChatMessage"/>
						<argument completetype="const char *" name="header_name" type="char">
							<description>
								

								<para>name of the header to remove </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Removes a custom header from the message. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_message_start_file_download">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneChatMessage *" name="message" type="LinphoneChatMessage">
							<description>
								

								<para>
									<ref>LinphoneChatMessage</ref>
									 
								</para>
							</description>
							

						</argument>
						<argument completetype="LinphoneChatMessageStateChangedCb" name="status_cb" type="LinphoneChatMessageStateChangedCb">
							<description>
								

								<para>LinphoneChatMessageStateChangeCb status callback invoked when file is downloaded or could not be downloaded </para>
							</description>
							

						</argument>
						<argument completetype="void *" name="ud" type="void">
							<description>
								

								<para>user data </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Start the download of the file from remote server</para>
						<para/>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_message_unref">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneChatMessage *" name="msg" type="LinphoneChatMessage">
							<description>
								

								<para>the chat message. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Release reference to the chat message. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
			</instancemethods>
			<properties>
				<property name="appdata">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_message_get_appdata">
						<return completetype="const char *" type="char">
							<description>
								<para>the application-specific data or NULL if none has been stored. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneChatMessage *" name="message" type="LinphoneChatMessage">
								<description>
									

									<para>
										<ref>LinphoneChatMessage</ref>
										 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Linphone message has an app-specific field that can store a text. The application might want to use it for keeping data over restarts, like thumbnail image path. 
								<description>
									<para>the application-specific data or NULL if none has been stored. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_message_set_appdata">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneChatMessage *" name="message" type="LinphoneChatMessage">
								<description>
									

									<para>
										<ref>LinphoneChatMessage</ref>
										 
									</para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="data" type="char">
								<description>
									

									<para>the data to store into the message </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Linphone message has an app-specific field that can store a text. The application might want to use it for keeping data over restarts, like thumbnail image path.</para>
							<para>Invoking this function will attempt to update the message storage to reflect the changeif it is enabled.</para>
							<para/>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="callbacks">
					<getter deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_message_get_callbacks">
						<return completetype="LinphoneChatMessageCbs *" type="LinphoneChatMessageCbs">
							<description>
								<para>The LinphoneChatMessageCbs object associated with the LinphoneChatMessage. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneChatMessage *" name="msg" type="LinphoneChatMessage">
								<description>
									

									<para>LinphoneChatMessage object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the LinphoneChatMessageCbs object associated with the LinphoneChatMessage. 
								<description>
									<para>The LinphoneChatMessageCbs object associated with the LinphoneChatMessage. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="chat_room">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_message_get_chat_room">
						<return completetype="LinphoneChatRoom *" type="LinphoneChatRoom"/>
						<arguments>
							<argument completetype="LinphoneChatMessage *" name="msg" type="LinphoneChatMessage"/>
						</arguments>
						<detaileddescription>
							

							<para>Returns the chatroom this message belongs to. </para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="error_info">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_message_get_error_info">
						<return completetype="const LinphoneErrorInfo *" type="LinphoneErrorInfo">
							<description>
								<para>a LinphoneErrorInfo describing the details. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneChatMessage *" name="msg" type="LinphoneChatMessage">
								<description>
									

									<para>a LinphoneChatMessage </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get full details about delivery error of a chat message. 
								<description>
									<para>a LinphoneErrorInfo describing the details. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="external_body_url">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_message_get_external_body_url">
						<return completetype="const char *" type="char">
							<description>
								<para>external body url or NULL if not present. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneChatMessage *" name="message" type="LinphoneChatMessage">
								<description>
									

									<para>
										<ref>LinphoneChatMessage</ref>
										 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Linphone message can carry external body as defined by rfc2017 
								<description>
									<para>external body url or NULL if not present. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_message_set_external_body_url">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneChatMessage *" name="message" type="LinphoneChatMessage">
								<description>
									

									<para>a LinphoneChatMessage </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="url" type="char">
								<description>
									

									<para>ex: access-type=URL; URL=&quot;http://www.foo.com/file&quot; </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Linphone message can carry external body as defined by rfc2017</para>
							<para/>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="file_transfer_filepath">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_message_get_file_transfer_filepath">
						<return completetype="const char *" type="char">
							<description>
								<para>The path to the file to use for the file transfer. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneChatMessage *" name="msg" type="LinphoneChatMessage">
								<description>
									

									<para>LinphoneChatMessage object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the path to the file to read from or write to during the file transfer. 
								<description>
									<para>The path to the file to use for the file transfer. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_message_set_file_transfer_filepath">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneChatMessage *" name="msg" type="LinphoneChatMessage">
								<description>
									

									<para>LinphoneChatMessage object </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="filepath" type="char">
								<description>
									

									<para>The path to the file to use for the file transfer. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the path to the file to read from or write to during the file transfer. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="file_transfer_information">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_message_get_file_transfer_information">
						<return completetype="const LinphoneContent *" type="LinphoneContent">
							<description>
								<para>a pointer to the LinphoneContent structure or NULL if not present. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneChatMessage *" name="message" type="LinphoneChatMessage">
								<description>
									

									<para>
										<ref>LinphoneChatMessage</ref>
										 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Get the file_transfer_information (used by call backs to recover informations during a rcs file transfer)</para>
							<para>
								<description>
									<para>a pointer to the LinphoneContent structure or NULL if not present. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="from_address">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_message_get_from_address">
						<return completetype="const LinphoneAddress *" type="LinphoneAddress">
							<description>
								<para>
									<ref>LinphoneAddress</ref>
									 
								</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneChatMessage *" name="message" type="LinphoneChatMessage">
								<description>
									

									<para>
										<ref>LinphoneChatMessage</ref>
										 obj 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get origin of the message 
								<description>
									<para>
										<ref>LinphoneAddress</ref>
										 
									</para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_message_set_from_address">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneChatMessage *" name="message" type="LinphoneChatMessage">
								<description>
									

									<para>
										<ref>LinphoneChatMessage</ref>
										 obj 
									</para>
								</description>
								

							</argument>
							<argument completetype="const LinphoneAddress *" name="from" type="LinphoneAddress">
								<description>
									

									<para>
										<ref>LinphoneAddress</ref>
										 origin of this message (copied) 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set origin of the message </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="local_address">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_message_get_local_address">
						<return completetype="LinphoneAddress *" type="LinphoneAddress">
							<description>
								<para>
									<ref>LinphoneAddress</ref>
									 
								</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneChatMessage *" name="message" type="LinphoneChatMessage">
								<description>
									

									<para>
										<ref>LinphoneChatMessage</ref>
										 obj 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Returns the origin address of a message if it was a outgoing message, or the destination address if it was an incoming message. 
								<description>
									<para>
										<ref>LinphoneAddress</ref>
										 
									</para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="message_id">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_message_get_message_id">
						<return completetype="const char *" type="char">
							<description>
								<para>The message identifier. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneChatMessage *" name="cm" type="LinphoneChatMessage">
								<description>
									

									<para>LinphoneChatMessage object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the message identifier. It is used to identify a message so that it can be notified as delivered and/or displayed. 
								<description>
									<para>The message identifier. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="outgoing">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_message_is_outgoing">
						<return completetype="bool_t" type="bool_t"/>
						<arguments>
							<argument completetype="LinphoneChatMessage *" name="message" type="LinphoneChatMessage">
								<description>
									

									<para>the message </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Returns TRUE if the message has been sent, returns FALSE if the message has been received. </para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="read">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_message_is_read">
						<return completetype="bool_t" type="bool_t"/>
						<arguments>
							<argument completetype="LinphoneChatMessage *" name="message" type="LinphoneChatMessage">
								<description>
									

									<para>the message </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Returns TRUE if the message has been read, otherwise returns FALSE. </para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="state">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_message_get_state">
						<return completetype="LinphoneChatMessageState" type="LinphoneChatMessageState">
							<description>
								<para>
									<ref>LinphoneChatMessageState</ref>
									 
								</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneChatMessage *" name="message" type="LinphoneChatMessage">
								<description>
									

									<para>
										<ref>LinphoneChatMessage</ref>
										 obj 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the state of the message 
								<description>
									<para>
										<ref>LinphoneChatMessageState</ref>
										 
									</para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="storage_id">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_message_get_storage_id">
						<return completetype="unsigned int" type="int">
							<description>
								<para>the id </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneChatMessage *" name="message" type="LinphoneChatMessage">
								<description>
									

									<para>the message </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Returns the id used to identify this message in the storage database 
								<description>
									<para>the id </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="text">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_message_get_text">
						<return completetype="const char *" type="char">
							<description>
								<para>text or NULL if no text. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneChatMessage *" name="message" type="LinphoneChatMessage"/>
						</arguments>
						<detaileddescription>
							

							<para>
								Get text part of this message 
								<description>
									<para>text or NULL if no text. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="time">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_message_get_time">
						<return completetype="time_t" type="time_t"/>
						<arguments>
							<argument completetype="const LinphoneChatMessage *" name="message" type="LinphoneChatMessage"/>
						</arguments>
						<detaileddescription>
							

							<para>Get the time the message was sent. </para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="to_address">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_message_get_to_address">
						<return completetype="const LinphoneAddress *" type="LinphoneAddress">
							<description>
								<para>
									<ref>LinphoneAddress</ref>
									 
								</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneChatMessage *" name="message" type="LinphoneChatMessage">
								<description>
									

									<para>
										<ref>LinphoneChatMessage</ref>
										 obj 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get destination of the message 
								<description>
									<para>
										<ref>LinphoneAddress</ref>
										 
									</para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_message_set_to_address">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneChatMessage *" name="message" type="LinphoneChatMessage">
								<description>
									

									<para>
										<ref>LinphoneChatMessage</ref>
										 obj 
									</para>
								</description>
								

							</argument>
							<argument completetype="const LinphoneAddress *" name="addr" type="LinphoneAddress">
								<description>
									

									<para>
										<ref>LinphoneAddress</ref>
										 destination of this message (copied) 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set destination of the message </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="user_data">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_message_get_user_data">
						<return completetype="void *" type="void"/>
						<arguments>
							<argument completetype="const LinphoneChatMessage *" name="message" type="LinphoneChatMessage"/>
						</arguments>
						<detaileddescription>
							

							<para>User pointer get function </para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_message_set_user_data">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneChatMessage *" name="message" type="LinphoneChatMessage"/>
							<argument completetype="void *" name="" type="void"/>
						</arguments>
						<detaileddescription>
							

							<para>User pointer set function </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
			</properties>
			<detaileddescription>
				

				<para>
					A chat room message to hold content to be sent. 
					<linebreak/>
					
 Can be created by 
					<ref>linphone_chat_room_create_message()</ref>
					. 
				</para>
				        
			</detaileddescription>
			
        
		</class>
		<class cfunctionprefix="linphone_chat_message_cbs_" deprecated="false" destroyable="false" name="LinphoneChatMessageCbs" refcountable="true">
			<events>
				<event deprecated="false" name="LinphoneChatMessageCbsFileTransferProgressIndicationCb">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneChatMessage *" name="message" type="LinphoneChatMessage">
							<description>
								

								<para>
									<ref>LinphoneChatMessage</ref>
									 message from which the body is received. 
								</para>
							</description>
							

						</argument>
						<argument completetype="const LinphoneContent *" name="content" type="LinphoneContent">
							<description>
								

								<para>
									<ref>LinphoneContent</ref>
									 incoming content information 
								</para>
							</description>
							

						</argument>
						<argument completetype="size_t" name="offset" type="size_t">
							<description>
								

								<para>The number of bytes sent/received since the beginning of the transfer. </para>
							</description>
							

						</argument>
						<argument completetype="size_t" name="total" type="size_t">
							<description>
								

								<para>The total number of bytes to be sent/received. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>File transfer progress indication callback prototype. </para>
						        
					</detaileddescription>
					
        
				</event>
				<event deprecated="false" name="LinphoneChatMessageCbsFileTransferRecvCb">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneChatMessage *" name="message" type="LinphoneChatMessage">
							<description>
								

								<para>
									<ref>LinphoneChatMessage</ref>
									 message from which the body is received. 
								</para>
							</description>
							

						</argument>
						<argument completetype="const LinphoneContent *" name="content" type="LinphoneContent">
							<description>
								

								<para>
									<ref>LinphoneContent</ref>
									 incoming content information 
								</para>
							</description>
							

						</argument>
						<argument completetype="const LinphoneBuffer *" name="buffer" type="LinphoneBuffer">
							<description>
								

								<para>
									<ref>LinphoneBuffer</ref>
									 holding the received data. Empty buffer means end of file. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>File transfer receive callback prototype. This function is called by the core upon an incoming File transfer is started. This function may be call several time for the same file in case of large file. </para>
						        
					</detaileddescription>
					
        
				</event>
				<event deprecated="false" name="LinphoneChatMessageCbsFileTransferSendCb">
					<return completetype="LinphoneBuffer *" type="LinphoneBuffer">
						<description>
							<para>A LinphoneBuffer object holding the data written by the application. An empty buffer means end of file. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneChatMessage *" name="message" type="LinphoneChatMessage">
							<description>
								

								<para>
									<ref>LinphoneChatMessage</ref>
									 message from which the body is received. 
								</para>
							</description>
							

						</argument>
						<argument completetype="const LinphoneContent *" name="content" type="LinphoneContent">
							<description>
								

								<para>
									<ref>LinphoneContent</ref>
									 outgoing content 
								</para>
							</description>
							

						</argument>
						<argument completetype="size_t" name="offset" type="size_t">
							<description>
								

								<para>the offset in the file from where to get the data to be sent </para>
							</description>
							

						</argument>
						<argument completetype="size_t" name="size" type="size_t">
							<description>
								

								<para>the number of bytes expected by the framework </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							File transfer send callback prototype. This function is called by the core when an outgoing file transfer is started. This function is called until size is set to 0. 
							<description>
								<para>A LinphoneBuffer object holding the data written by the application. An empty buffer means end of file. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</event>
				<event deprecated="false" name="LinphoneChatMessageCbsMsgStateChangedCb">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneChatMessage *" name="msg" type="LinphoneChatMessage">
							<description>
								

								<para>
									<ref>LinphoneChatMessage</ref>
									 object 
								</para>
							</description>
							

						</argument>
						<argument completetype="LinphoneChatMessageState" name="state" type="LinphoneChatMessageState"/>
					</arguments>
					<detaileddescription>
						

						<para>Call back used to notify message delivery status </para>
						        
					</detaileddescription>
					
        
				</event>
			</events>
			<instancemethods>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_message_cbs_ref">
					<return completetype="LinphoneChatMessageCbs *" type="LinphoneChatMessageCbs">
						<description>
							<para>The same LinphoneChatMessageCbs object. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneChatMessageCbs *" name="cbs" type="LinphoneChatMessageCbs">
							<description>
								

								<para>LinphoneChatMessageCbs object. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Acquire a reference to the LinphoneChatMessageCbs object. 
							<description>
								<para>The same LinphoneChatMessageCbs object. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_message_cbs_unref">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneChatMessageCbs *" name="cbs" type="LinphoneChatMessageCbs">
							<description>
								

								<para>LinphoneChatMessageCbs object. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Release reference to the LinphoneChatMessageCbs object. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
			</instancemethods>
			<properties>
				<property name="file_transfer_progress_indication">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_message_cbs_get_file_transfer_progress_indication">
						<return completetype="LinphoneChatMessageCbsFileTransferProgressIndicationCb" type="LinphoneChatMessageCbsFileTransferProgressIndicationCb">
							<description>
								<para>The current file transfer progress indication callback. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneChatMessageCbs *" name="cbs" type="LinphoneChatMessageCbs">
								<description>
									

									<para>LinphoneChatMessageCbs object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the file transfer progress indication callback. 
								<description>
									<para>The current file transfer progress indication callback. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_message_cbs_set_file_transfer_progress_indication">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneChatMessageCbs *" name="cbs" type="LinphoneChatMessageCbs">
								<description>
									

									<para>LinphoneChatMessageCbs object. </para>
								</description>
								

							</argument>
							<argument completetype="LinphoneChatMessageCbsFileTransferProgressIndicationCb" name="cb" type="LinphoneChatMessageCbsFileTransferProgressIndicationCb">
								<description>
									

									<para>The file transfer progress indication callback to be used. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the file transfer progress indication callback. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="file_transfer_recv">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_message_cbs_get_file_transfer_recv">
						<return completetype="LinphoneChatMessageCbsFileTransferRecvCb" type="LinphoneChatMessageCbsFileTransferRecvCb">
							<description>
								<para>The current file transfer receive callback. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneChatMessageCbs *" name="cbs" type="LinphoneChatMessageCbs">
								<description>
									

									<para>LinphoneChatMessageCbs object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the file transfer receive callback. 
								<description>
									<para>The current file transfer receive callback. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_message_cbs_set_file_transfer_recv">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneChatMessageCbs *" name="cbs" type="LinphoneChatMessageCbs">
								<description>
									

									<para>LinphoneChatMessageCbs object. </para>
								</description>
								

							</argument>
							<argument completetype="LinphoneChatMessageCbsFileTransferRecvCb" name="cb" type="LinphoneChatMessageCbsFileTransferRecvCb">
								<description>
									

									<para>The file transfer receive callback to be used. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the file transfer receive callback. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="file_transfer_send">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_message_cbs_get_file_transfer_send">
						<return completetype="LinphoneChatMessageCbsFileTransferSendCb" type="LinphoneChatMessageCbsFileTransferSendCb">
							<description>
								<para>The current file transfer send callback. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneChatMessageCbs *" name="cbs" type="LinphoneChatMessageCbs">
								<description>
									

									<para>LinphoneChatMessageCbs object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the file transfer send callback. 
								<description>
									<para>The current file transfer send callback. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_message_cbs_set_file_transfer_send">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneChatMessageCbs *" name="cbs" type="LinphoneChatMessageCbs">
								<description>
									

									<para>LinphoneChatMessageCbs object. </para>
								</description>
								

							</argument>
							<argument completetype="LinphoneChatMessageCbsFileTransferSendCb" name="cb" type="LinphoneChatMessageCbsFileTransferSendCb">
								<description>
									

									<para>The file transfer send callback to be used. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the file transfer send callback. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="msg_state_changed">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_message_cbs_get_msg_state_changed">
						<return completetype="LinphoneChatMessageCbsMsgStateChangedCb" type="LinphoneChatMessageCbsMsgStateChangedCb">
							<description>
								<para>The current message state changed callback. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneChatMessageCbs *" name="cbs" type="LinphoneChatMessageCbs">
								<description>
									

									<para>LinphoneChatMessageCbs object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the message state changed callback. 
								<description>
									<para>The current message state changed callback. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_message_cbs_set_msg_state_changed">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneChatMessageCbs *" name="cbs" type="LinphoneChatMessageCbs">
								<description>
									

									<para>LinphoneChatMessageCbs object. </para>
								</description>
								

							</argument>
							<argument completetype="LinphoneChatMessageCbsMsgStateChangedCb" name="cb" type="LinphoneChatMessageCbsMsgStateChangedCb">
								<description>
									

									<para>The message state changed callback to be used. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the message state changed callback. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="user_data">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_message_cbs_get_user_data">
						<return completetype="void *" type="void">
							<description>
								<para>The user pointer associated with the LinphoneChatMessageCbs object. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneChatMessageCbs *" name="cbs" type="LinphoneChatMessageCbs">
								<description>
									

									<para>LinphoneChatMessageCbs object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Retrieve the user pointer associated with the LinphoneChatMessageCbs object. 
								<description>
									<para>The user pointer associated with the LinphoneChatMessageCbs object. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_message_cbs_set_user_data">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneChatMessageCbs *" name="cbs" type="LinphoneChatMessageCbs">
								<description>
									

									<para>LinphoneChatMessageCbs object. </para>
								</description>
								

							</argument>
							<argument completetype="void *" name="ud" type="void">
								<description>
									

									<para>The user pointer to associate with the LinphoneChatMessageCbs object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Assign a user pointer to the LinphoneChatMessageCbs object. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
			</properties>
			<detaileddescription>
				

				<para>An object to handle the callbacks for the handling a LinphoneChatMessage objects. </para>
				        
			</detaileddescription>
			
        
		</class>
		<class cfunctionprefix="linphone_chat_room_" deprecated="false" destroyable="true" name="LinphoneChatRoom" refcountable="true">
			<instancemethods>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_room_compose">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneChatRoom *" name="cr" type="LinphoneChatRoom">
							<description>
								

								<para>
									The 
									<ref>LinphoneChatRoom</ref>
									 object corresponding to the conversation for which a new message is being typed. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Notifies the destination of the chat message being composed that the user is typing a new message. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_room_create_file_transfer_message">
					<return completetype="LinphoneChatMessage *" type="LinphoneChatMessage">
						<description>
							<para>
								a new 
								<ref>LinphoneChatMessage</ref>
								 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneChatRoom *" name="cr" type="LinphoneChatRoom">
							<description>
								

								<para>the chat room. </para>
							</description>
							

						</argument>
						<argument completetype="const LinphoneContent *" name="initial_content" type="LinphoneContent">
							<description>
								

								<para>
									<ref>LinphoneContent</ref>
									 initial content. 
									<ref>LinphoneCoreVTable.file_transfer_send</ref>
									 is invoked later to notify file transfer progress and collect next chunk of the message if #LinphoneContent.data is NULL. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Create a message attached to a dedicated chat room with a particular content. Use 
							<ref>linphone_chat_room_send_message</ref>
							 to initiate the transfer 
							<description>
								<para>
									a new 
									<ref>LinphoneChatMessage</ref>
									 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_room_create_message">
					<return completetype="LinphoneChatMessage *" type="LinphoneChatMessage">
						<description>
							<para>
								a new 
								<ref>LinphoneChatMessage</ref>
								 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneChatRoom *" name="cr" type="LinphoneChatRoom">
							<description>
								

								<para>the chat room. </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="message" type="char">
							<description>
								

								<para>text message, NULL if absent. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Create a message attached to a dedicated chat room; 
							<description>
								<para>
									a new 
									<ref>LinphoneChatMessage</ref>
									 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_room_create_message_2">
					<return completetype="LinphoneChatMessage *" type="LinphoneChatMessage">
						<description>
							<para>
								a new 
								<ref>LinphoneChatMessage</ref>
								 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneChatRoom *" name="cr" type="LinphoneChatRoom">
							<description>
								

								<para>the chat room. </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="message" type="char">
							<description>
								

								<para>text message, NULL if absent. </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="external_body_url" type="char">
							<description>
								

								<para>the URL given in external body or NULL. </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneChatMessageState" name="state" type="LinphoneChatMessageState">
							<description>
								

								<para>the LinphoneChatMessage.State of the message. </para>
							</description>
							

						</argument>
						<argument completetype="time_t" name="time" type="time_t">
							<description>
								

								<para>the time_t at which the message has been received/sent. </para>
							</description>
							

						</argument>
						<argument completetype="bool_t" name="is_read" type="bool_t">
							<description>
								

								<para>TRUE if the message should be flagged as read, FALSE otherwise. </para>
							</description>
							

						</argument>
						<argument completetype="bool_t" name="is_incoming" type="bool_t">
							<description>
								

								<para>TRUE if the message has been received, FALSE otherwise. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Create a message attached to a dedicated chat room; 
							<description>
								<para>
									a new 
									<ref>LinphoneChatMessage</ref>
									 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_room_delete_history">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneChatRoom *" name="cr" type="LinphoneChatRoom">
							<description>
								

								<para>
									The 
									<ref>LinphoneChatRoom</ref>
									 object corresponding to the conversation. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Delete all messages from the history </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_room_delete_message">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneChatRoom *" name="cr" type="LinphoneChatRoom">
							<description>
								

								<para>
									The 
									<ref>LinphoneChatRoom</ref>
									 object corresponding to the conversation. 
								</para>
							</description>
							

						</argument>
						<argument completetype="LinphoneChatMessage *" name="msg" type="LinphoneChatMessage">
							<description>
								

								<para>
									The 
									<ref>LinphoneChatMessage</ref>
									 object to remove. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Delete a message from the chat room history. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_room_destroy">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneChatRoom *" name="cr" type="LinphoneChatRoom">
							<description>
								

								<para>
									<ref>LinphoneChatRoom</ref>
									 object 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Destroy a LinphoneChatRoom. </para>
						<para>Destroy a LinphoneChatRoom. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_room_get_history">
					<return completetype="bctbx_list_t *" containedtype="LinphoneChatMessage" type="bctbx_list_t">
						<description>
							<para>
								A list of 
								<ref>LinphoneChatMessage</ref>
								 objects. 
								<bctbxlist>LinphoneChatMessage</bctbxlist>
								  
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneChatRoom *" name="cr" type="LinphoneChatRoom">
							<description>
								

								<para>
									The 
									<ref>LinphoneChatRoom</ref>
									 object corresponding to the conversation for which messages should be retrieved 
								</para>
							</description>
							

						</argument>
						<argument completetype="int" name="nb_message" type="int">
							<description>
								

								<para>Number of message to retrieve. 0 means everything. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Gets nb_message most recent messages from cr chat room, sorted from oldest to most recent. 
							<description>
								<para>
									A list of 
									<ref>LinphoneChatMessage</ref>
									 objects. 
									<bctbxlist>LinphoneChatMessage</bctbxlist>
									  
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_room_get_history_range">
					<return completetype="bctbx_list_t *" containedtype="LinphoneChatMessage" type="bctbx_list_t">
						<description>
							<para>
								A list of 
								<ref>LinphoneChatMessage</ref>
								 objects. 
								<bctbxlist>LinphoneChatMessage</bctbxlist>
								  
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneChatRoom *" name="cr" type="LinphoneChatRoom">
							<description>
								

								<para>
									The 
									<ref>LinphoneChatRoom</ref>
									 object corresponding to the conversation for which messages should be retrieved 
								</para>
							</description>
							

						</argument>
						<argument completetype="int" name="begin" type="int">
							<description>
								

								<para>The first message of the range to be retrieved. History most recent message has index 0. </para>
							</description>
							

						</argument>
						<argument completetype="int" name="end" type="int">
							<description>
								

								<para>
									The last message of the range to be retrieved. History oldest message has index of history size - 1 (use 
									<ref>linphone_chat_room_get_history_size</ref>
									 to retrieve history size) 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Gets the partial list of messages in the given range, sorted from oldest to most recent. 
							<description>
								<para>
									A list of 
									<ref>LinphoneChatMessage</ref>
									 objects. 
									<bctbxlist>LinphoneChatMessage</bctbxlist>
									  
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_room_lime_available">
					<return completetype="bool_t" type="bool_t">
						<description>
							<para>true if zrtp secrets have already been shared and ready to use </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneChatRoom *" name="cr" type="LinphoneChatRoom"/>
					</arguments>
					<detaileddescription>
						

						<para>Returns true if lime is available for given peer</para>
						<para>
							<description>
								<para>true if zrtp secrets have already been shared and ready to use </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_room_mark_as_read">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneChatRoom *" name="cr" type="LinphoneChatRoom">
							<description>
								

								<para>
									The 
									<ref>LinphoneChatRoom</ref>
									 object corresponding to the conversation. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Mark all messages of the conversation as read </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_room_ref">
					<return completetype="LinphoneChatRoom *" type="LinphoneChatRoom">
						<description>
							<para>The same chat room. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneChatRoom *" name="cr" type="LinphoneChatRoom">
							<description>
								

								<para>The chat room. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Acquire a reference to the chat room. 
							<description>
								<para>The same chat room. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_room_send_chat_message">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneChatRoom *" name="cr" type="LinphoneChatRoom">
							<description>
								

								<para>LinphoneChatRoom object </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneChatMessage *" name="msg" type="LinphoneChatMessage">
							<description>
								

								<para>
									LinphoneChatMessage object The state of the message sending will be notified via the callbacks defined in the LinphoneChatMessageCbs object that can be obtained by calling 
									<ref>linphone_chat_message_get_callbacks()</ref>
									. The LinphoneChatMessage reference is transfered to the function and thus doesn't need to be unref'd by the application. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Send a message to peer member of this chat room. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_room_send_message">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneChatRoom *" name="cr" type="LinphoneChatRoom">
							<description>
								

								<para>
									<ref>LinphoneChatRoom</ref>
									 object 
								</para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="msg" type="char">
							<description>
								

								<para>message to be sent </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Send a message to peer member of this chat room. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_room_send_message2">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneChatRoom *" name="cr" type="LinphoneChatRoom">
							<description>
								

								<para>
									<ref>LinphoneChatRoom</ref>
									 object 
								</para>
							</description>
							

						</argument>
						<argument completetype="LinphoneChatMessage *" name="msg" type="LinphoneChatMessage">
							<description>
								

								<para>
									<ref>LinphoneChatMessage</ref>
									 message to be sent 
								</para>
							</description>
							

						</argument>
						<argument completetype="LinphoneChatMessageStateChangedCb" name="status_cb" type="LinphoneChatMessageStateChangedCb">
							<description>
								

								<para>LinphoneChatMessageStateChangeCb status callback invoked when message is delivered or could not be delivered. May be NULL </para>
							</description>
							

						</argument>
						<argument completetype="void *" name="ud" type="void">
							<description>
								

								<para>user data for the status cb. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Send a message to peer member of this chat room. 
							<note>
								<para>The LinphoneChatMessage must not be destroyed until the the callback is called. The LinphoneChatMessage reference is transfered to the function and thus doesn't need to be unref'd by the application. </para>
							</note>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_chat_room_send_message_3">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneChatRoom *" name="cr" type="LinphoneChatRoom">
							<description>
								

								<para>LinphoneChatRoom object </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneChatMessage *" name="msg" type="LinphoneChatMessage">
							<description>
								

								<para>
									LinphoneChatMessage object The state of the message sending will be notified via the callbacks defined in the LinphoneChatMessageCbs object that can be obtained by calling 
									<ref>linphone_chat_message_get_callbacks()</ref>
									. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Send a message to peer member of this chat room. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_room_unref">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneChatRoom *" name="cr" type="LinphoneChatRoom">
							<description>
								

								<para>The chat room. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Release reference to the chat room. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
			</instancemethods>
			<properties>
				<property name="call">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_room_get_call">
						<return completetype="LinphoneCall *" type="LinphoneCall">
							<description>
								<para>LinphoneCall or NULL. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneChatRoom *" name="room" type="LinphoneChatRoom">
								<description>
									

									<para>LinphoneChatRomm </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								get Curent Call associated to this chatroom if any To commit a message, use 
								<ref>linphone_chat_room_send_message</ref>
								 
								<description>
									<para>LinphoneCall or NULL. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="char">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_room_get_char">
						<return completetype="uint32_t" type="uint32_t">
							<description>
								<para>RFC 4103/T.140 char </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneChatRoom *" name="cr" type="LinphoneChatRoom">
								<description>
									

									<para>
										<ref>LinphoneChatRoom</ref>
										 object 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								When realtime text is enabled 
								<ref>linphone_call_params_realtime_text_enabled</ref>
								, 
								<ref>LinphoneCoreIsComposingReceivedCb</ref>
								 is call everytime a char is received from peer. At the end of remote typing a regular 
								<ref>LinphoneChatMessage</ref>
								 is received with committed data from 
								<ref>LinphoneCoreMessageReceivedCb</ref>
								. 
								<description>
									<para>RFC 4103/T.140 char </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="core">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_room_get_core">
						<return completetype="LinphoneCore *" type="LinphoneCore"/>
						<arguments>
							<argument completetype="LinphoneChatRoom *" name="cr" type="LinphoneChatRoom"/>
						</arguments>
						<detaileddescription>
							

							<para>
								Returns back pointer to 
								<ref>LinphoneCore</ref>
								 object. 
							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="history_size">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_room_get_history_size">
						<return completetype="int" type="int">
							<description>
								<para>the number of messages. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneChatRoom *" name="cr" type="LinphoneChatRoom">
								<description>
									

									<para>
										The 
										<ref>LinphoneChatRoom</ref>
										 object corresponding to the conversation for which size has to be computed 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the number of messages in a chat room. 
								<description>
									<para>the number of messages. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="lc">
					<getter deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_room_get_lc">
						<return completetype="LinphoneCore *" type="LinphoneCore"/>
						<arguments>
							<argument completetype="LinphoneChatRoom *" name="cr" type="LinphoneChatRoom"/>
						</arguments>
						<detaileddescription>
							

							<para>
								Returns back pointer to 
								<ref>LinphoneCore</ref>
								 object. 
							</para>
							<para>
								Returns back pointer to 
								<ref>LinphoneCore</ref>
								 object. 
							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="peer_address">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_room_get_peer_address">
						<return completetype="const LinphoneAddress *" type="LinphoneAddress">
							<description>
								<para>
									<ref>LinphoneAddress</ref>
									 peer address 
								</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneChatRoom *" name="cr" type="LinphoneChatRoom">
								<description>
									

									<para>
										<ref>LinphoneChatRoom</ref>
										 object 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								get peer address 
								<ref>associated to </ref>
								 this 
								<ref>LinphoneChatRoom</ref>
								 
								<description>
									<para>
										<ref>LinphoneAddress</ref>
										 peer address 
									</para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="remote_composing">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_room_is_remote_composing">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>TRUE if the remote is currently composing a message, FALSE otherwise. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneChatRoom *" name="cr" type="LinphoneChatRoom">
								<description>
									

									<para>
										The 
										<ref>LinphoneChatRoom</ref>
										 object corresponding to the conversation. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Tells whether the remote is currently composing a message. 
								<description>
									<para>TRUE if the remote is currently composing a message, FALSE otherwise. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="unread_messages_count">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_room_get_unread_messages_count">
						<return completetype="int" type="int">
							<description>
								<para>the number of unread messages. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneChatRoom *" name="cr" type="LinphoneChatRoom">
								<description>
									

									<para>
										The 
										<ref>LinphoneChatRoom</ref>
										 object corresponding to the conversation. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the number of unread messages in the chatroom. 
								<description>
									<para>the number of unread messages. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="user_data">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_room_get_user_data">
						<return completetype="void *" type="void">
							<description>
								<para>The user pointer associated with the chat room. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneChatRoom *" name="cr" type="LinphoneChatRoom">
								<description>
									

									<para>The chat room. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Retrieve the user pointer associated with the chat room. 
								<description>
									<para>The user pointer associated with the chat room. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_chat_room_set_user_data">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneChatRoom *" name="cr" type="LinphoneChatRoom">
								<description>
									

									<para>The chat room. </para>
								</description>
								

							</argument>
							<argument completetype="void *" name="ud" type="void">
								<description>
									

									<para>The user pointer to associate with the chat room. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Assign a user pointer to the chat room. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
			</properties>
			<detaileddescription>
				

				<para>
					A chat room is the place where text messages are exchanged. 
					<linebreak/>
					
 Can be created by linphone_core_create_chat_room(). 
				</para>
				        
			</detaileddescription>
			
        
		</class>
		<class cfunctionprefix="linphone_conference_" deprecated="false" destroyable="false" name="LinphoneConference" refcountable="false">
			<instancemethods>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/conference.h" name="linphone_conference_remove_participant">
					<return completetype="int" type="int">
						<description>
							<para>0 if succeeded, -1 if failed </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneConference *" name="obj" type="LinphoneConference">
							<description>
								

								<para>
									A 
									<ref>LinphoneConference</ref>
									 
								</para>
							</description>
							

						</argument>
						<argument completetype="const LinphoneAddress *" name="uri" type="LinphoneAddress">
							<description>
								

								<para>SIP URI of the participant to remove </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Remove a participant from a conference 
							<simplesect kind="warning">
								<para>
									The passed SIP URI must be one of the URIs returned by 
									<ref>linphone_conference_get_participants()</ref>
									 
								</para>
							</simplesect>
							

							<description>
								<para>0 if succeeded, -1 if failed </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
			</instancemethods>
			<properties>
				<property name="participants">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/conference.h" name="linphone_conference_get_participants">
						<return completetype="bctbx_list_t *" containedtype="LinphoneAddress" type="bctbx_list_t">
							<description>
								<para>
									A list of 
									<ref>LinphoneAddress</ref>
									 objects. 
									<bctbxlist>LinphoneAddress</bctbxlist>
									  
								</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneConference *" name="obj" type="LinphoneConference">
								<description>
									

									<para>
										A 
										<ref>LinphoneConference</ref>
										 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get URIs of all participants of one conference The returned bctbx_list_t contains URIs of all participant. That list must be freed after use and each URI must be unref with 
								<ref>linphone_address_unref()</ref>
								 
								<description>
									<para>
										A list of 
										<ref>LinphoneAddress</ref>
										 objects. 
										<bctbxlist>LinphoneAddress</bctbxlist>
										  
									</para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
			</properties>
			<detaileddescription>
				

				<para>LinphoneConference class The _LinphoneConference struct does not exists, it's the Conference C++ class that is used behind </para>
				        
			</detaileddescription>
			
        
		</class>
		<class cfunctionprefix="linphone_conference_params_" deprecated="false" destroyable="false" name="LinphoneConferenceParams" refcountable="false">
			<classmethods>
				<classmethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/conference.h" name="linphone_conference_params_new">
					<return completetype="LinphoneConferenceParams *" type="LinphoneConferenceParams">
						<description>
							<para>
								A freshly allocated 
								<ref>LinphoneConferenceParams</ref>
								 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const LinphoneCore *" name="core" type="LinphoneCore">
							<description>
								

								<para>
									<ref>LinphoneCore</ref>
									 to use to find out the default parameters. Can be NULL. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Create a 
							<ref>LinphoneConferenceParams</ref>
							 with default parameters set. 
							<description>
								<para>
									A freshly allocated 
									<ref>LinphoneConferenceParams</ref>
									 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</classmethod>
			</classmethods>
			<instancemethods>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/conference.h" name="linphone_conference_params_clone">
					<return completetype="LinphoneConferenceParams *" type="LinphoneConferenceParams">
						<description>
							<para>
								An allocated 
								<ref>LinphoneConferenceParams</ref>
								 with the same parameters than params 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const LinphoneConferenceParams *" name="params" type="LinphoneConferenceParams">
							<description>
								

								<para>
									The 
									<ref>LinphoneConferenceParams</ref>
									 to clone 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Clone a 
							<ref>LinphoneConferenceParams</ref>
							 
							<description>
								<para>
									An allocated 
									<ref>LinphoneConferenceParams</ref>
									 with the same parameters than params 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/conference.h" name="linphone_conference_params_free">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneConferenceParams *" name="params" type="LinphoneConferenceParams">
							<description>
								

								<para>
									<ref>LinphoneConferenceParams</ref>
									 to free 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Free a 
							<ref>LinphoneConferenceParams</ref>
							 
						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/conference.h" name="linphone_conference_params_video_requested">
					<return completetype="bool_t" type="bool_t">
						<description>
							<para>if true, the video will be enable at conference starting </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const LinphoneConferenceParams *" name="params" type="LinphoneConferenceParams"/>
					</arguments>
					<detaileddescription>
						

						<para>
							Check whether video will be enable at conference starting 
							<description>
								<para>if true, the video will be enable at conference starting </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
			</instancemethods>
			<properties>
				<property name="video_enabled">
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/conference.h" name="linphone_conference_params_enable_video">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneConferenceParams *" name="params" type="LinphoneConferenceParams">
								<description>
									

									<para>
										A 
										<ref>LinphoneConferenceParams</ref>
										 
									</para>
								</description>
								

							</argument>
							<argument completetype="bool_t" name="enable" type="bool_t">
								<description>
									

									<para>If true, video will be enabled during conference </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Enable video when starting a conference </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
			</properties>
			<detaileddescription>
				

				<para>Parameters for initialization of conferences The _LinphoneConferenceParams struct does not exists, it's the ConferenceParams C++ class that is used behind </para>
				        
			</detaileddescription>
			
        
		</class>
		<class cfunctionprefix="linphone_config_" deprecated="false" destroyable="false" name="LinphoneConfig" refcountable="true">
			<classmethods>
				<classmethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/lpconfig.h" name="linphone_config_new">
					<return completetype="LinphoneConfig *" type="LinphoneConfig"/>
					<arguments>
						<argument completetype="const char *" name="filename" type="char">
							<description>
								

								<para>the filename of the config file to read to fill the instantiated LinphoneConfig </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Instantiates a LinphoneConfig object from a user config file. The caller of this constructor owns a reference. 
							<ref>linphone_config_unref()</ref>
							 must be called when this object is no longer needed.
						</para>
						<para>
							<see>linphone_config_new_with_factory </see>
						</para>
						        
					</detaileddescription>
					
        
				</classmethod>
				<classmethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/lpconfig.h" name="linphone_config_new_from_buffer">
					<return completetype="LinphoneConfig *" type="LinphoneConfig"/>
					<arguments>
						<argument completetype="const char *" name="buffer" type="char">
							<description>
								

								<para>the buffer from which the LinphoneConfig will be retrieved. We expect the buffer to be null-terminated. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Instantiates a LinphoneConfig object from a user provided buffer. The caller of this constructor owns a reference. 
							<ref>linphone_config_unref()</ref>
							 must be called when this object is no longer needed.
						</para>
						<para>
							<see>linphone_config_new_with_factory </see>
							<see>linphone_config_new </see>
						</para>
						        
					</detaileddescription>
					
        
				</classmethod>
				<classmethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/lpconfig.h" name="linphone_config_new_with_factory">
					<return completetype="LinphoneConfig *" type="LinphoneConfig"/>
					<arguments>
						<argument completetype="const char *" name="config_filename" type="char">
							<description>
								

								<para>the filename of the user config file to read to fill the instantiated LinphoneConfig </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="factory_config_filename" type="char">
							<description>
								

								<para>the filename of the factory config file to read to fill the instantiated LinphoneConfig </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Instantiates a LinphoneConfig object from a user config file and a factory config file. The caller of this constructor owns a reference. 
							<ref>linphone_config_unref()</ref>
							 must be called when this object is no longer needed.
						</para>
						<para>
							<see>linphone_config_new</see>
						</para>
						        
					</detaileddescription>
					
        
				</classmethod>
			</classmethods>
			<instancemethods>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/lpconfig.h" name="linphone_config_clean_entry">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneConfig *" name="lpconfig" type="LinphoneConfig">
							<description>
								

								<para>The LinphoneConfig object </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="section" type="char">
							<description>
								

								<para/>
							</description>
							

						</argument>
						<argument completetype="const char *" name="key" type="char">
							<description>
								

								<para/>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Removes entries for key,value in a section. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/lpconfig.h" name="linphone_config_clean_section">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneConfig *" name="lpconfig" type="LinphoneConfig"/>
						<argument completetype="const char *" name="section" type="char"/>
					</arguments>
					<detaileddescription>
						

						<para>Removes every pair of key,value in a section and remove the section. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/lpconfig.h" name="linphone_config_dump">
					<return completetype="char *" type="char">
						<description>
							<para>The buffer that contains the config dump </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const LinphoneConfig *" name="lpconfig" type="LinphoneConfig">
							<description>
								

								<para>The LinphoneConfig object </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Dumps the LinphoneConfig as INI into a buffer 
							<description>
								<para>The buffer that contains the config dump </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/lpconfig.h" name="linphone_config_dump_as_xml">
					<return completetype="char *" type="char">
						<description>
							<para>The buffer that contains the XML dump </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const LinphoneConfig *" name="lpconfig" type="LinphoneConfig">
							<description>
								

								<para>The LinphoneConfig object </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Dumps the LinphoneConfig as XML into a buffer 
							<description>
								<para>The buffer that contains the XML dump </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/lpconfig.h" name="linphone_config_for_each_entry">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="const LinphoneConfig *" name="lpconfig" type="LinphoneConfig"/>
						<argument completetype="const char *" name="section" type="char"/>
						<argument completetype="void(*)(const char * entry, void * ctx)" name="callback" type="ctx)"/>
						<argument completetype="void *" name="ctx" type="void"/>
					</arguments>
					<detaileddescription>
						

						<para>Call a function for each entry present in a section configuration. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/lpconfig.h" name="linphone_config_for_each_section">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="const LinphoneConfig *" name="lpconfig" type="LinphoneConfig"/>
						<argument completetype="void(*)(const char * section, void * ctx)" name="callback" type="ctx)"/>
						<argument completetype="void *" name="ctx" type="void"/>
					</arguments>
					<detaileddescription>
						

						<para>Call a function for each section present in the configuration. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/lpconfig.h" name="linphone_config_get_default_float">
					<return completetype="float" type="float"/>
					<arguments>
						<argument completetype="const LinphoneConfig *" name="lpconfig" type="LinphoneConfig"/>
						<argument completetype="const char *" name="section" type="char"/>
						<argument completetype="const char *" name="key" type="char"/>
						<argument completetype="float" name="default_value" type="float"/>
					</arguments>
					<detaileddescription>
						

						<para>Retrieves a default configuration item as a float, given its section, key, and default value. The default float value is returned if the config item isn't found. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/lpconfig.h" name="linphone_config_get_default_int">
					<return completetype="int" type="int"/>
					<arguments>
						<argument completetype="const LinphoneConfig *" name="lpconfig" type="LinphoneConfig"/>
						<argument completetype="const char *" name="section" type="char"/>
						<argument completetype="const char *" name="key" type="char"/>
						<argument completetype="int" name="default_value" type="int"/>
					</arguments>
					<detaileddescription>
						

						<para>Retrieves a default configuration item as an integer, given its section, key, and default value. The default integer value is returned if the config item isn't found. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/lpconfig.h" name="linphone_config_get_default_int64">
					<return completetype="int64_t" type="int64_t"/>
					<arguments>
						<argument completetype="const LinphoneConfig *" name="lpconfig" type="LinphoneConfig"/>
						<argument completetype="const char *" name="section" type="char"/>
						<argument completetype="const char *" name="key" type="char"/>
						<argument completetype="int64_t" name="default_value" type="int64_t"/>
					</arguments>
					<detaileddescription>
						

						<para>Retrieves a default configuration item as a 64 bit integer, given its section, key, and default value. The default integer value is returned if the config item isn't found. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/lpconfig.h" name="linphone_config_get_default_string">
					<return completetype="const char *" type="char"/>
					<arguments>
						<argument completetype="const LinphoneConfig *" name="lpconfig" type="LinphoneConfig"/>
						<argument completetype="const char *" name="section" type="char"/>
						<argument completetype="const char *" name="key" type="char"/>
						<argument completetype="const char *" name="default_value" type="char"/>
					</arguments>
					<detaileddescription>
						

						<para>Retrieves a default configuration item as a string, given its section, key, and default value. The default value string is returned if the config item isn't found. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/lpconfig.h" name="linphone_config_get_float">
					<return completetype="float" type="float"/>
					<arguments>
						<argument completetype="const LinphoneConfig *" name="lpconfig" type="LinphoneConfig"/>
						<argument completetype="const char *" name="section" type="char"/>
						<argument completetype="const char *" name="key" type="char"/>
						<argument completetype="float" name="default_value" type="float"/>
					</arguments>
					<detaileddescription>
						

						<para>Retrieves a configuration item as a float, given its section, key, and default value.</para>
						<para>The default float value is returned if the config item isn't found. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/lpconfig.h" name="linphone_config_get_int">
					<return completetype="int" type="int"/>
					<arguments>
						<argument completetype="const LinphoneConfig *" name="lpconfig" type="LinphoneConfig"/>
						<argument completetype="const char *" name="section" type="char"/>
						<argument completetype="const char *" name="key" type="char"/>
						<argument completetype="int" name="default_value" type="int"/>
					</arguments>
					<detaileddescription>
						

						<para>Retrieves a configuration item as an integer, given its section, key, and default value.</para>
						<para>The default integer value is returned if the config item isn't found. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/lpconfig.h" name="linphone_config_get_int64">
					<return completetype="int64_t" type="int64_t"/>
					<arguments>
						<argument completetype="const LinphoneConfig *" name="lpconfig" type="LinphoneConfig"/>
						<argument completetype="const char *" name="section" type="char"/>
						<argument completetype="const char *" name="key" type="char"/>
						<argument completetype="int64_t" name="default_value" type="int64_t"/>
					</arguments>
					<detaileddescription>
						

						<para>Retrieves a configuration item as a 64 bit integer, given its section, key, and default value.</para>
						<para>The default integer value is returned if the config item isn't found. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/lpconfig.h" name="linphone_config_get_overwrite_flag_for_entry">
					<return completetype="bool_t" type="bool_t"/>
					<arguments>
						<argument completetype="const LinphoneConfig *" name="lpconfig" type="LinphoneConfig"/>
						<argument completetype="const char *" name="section" type="char"/>
						<argument completetype="const char *" name="key" type="char"/>
					</arguments>
					<detaileddescription>
						

						<para>Retrieves the overwrite flag for a config item </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/lpconfig.h" name="linphone_config_get_overwrite_flag_for_section">
					<return completetype="bool_t" type="bool_t"/>
					<arguments>
						<argument completetype="const LinphoneConfig *" name="lpconfig" type="LinphoneConfig"/>
						<argument completetype="const char *" name="section" type="char"/>
					</arguments>
					<detaileddescription>
						

						<para>Retrieves the overwrite flag for a config section </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/lpconfig.h" name="linphone_config_get_range">
					<return completetype="bool_t" type="bool_t">
						<description>
							<para>TRUE if the value is successfully parsed as a range, FALSE otherwise. If FALSE is returned, min and max are filled respectively with default_min and default_max values. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const LinphoneConfig *" name="lpconfig" type="LinphoneConfig"/>
						<argument completetype="const char *" name="section" type="char"/>
						<argument completetype="const char *" name="key" type="char"/>
						<argument completetype="int *" name="min" type="int"/>
						<argument completetype="int *" name="max" type="int"/>
						<argument completetype="int" name="default_min" type="int"/>
						<argument completetype="int" name="default_max" type="int"/>
					</arguments>
					<detaileddescription>
						

						<para>Retrieves a configuration item as a range, given its section, key, and default min and max values.</para>
						<para>
							<description>
								<para>TRUE if the value is successfully parsed as a range, FALSE otherwise. If FALSE is returned, min and max are filled respectively with default_min and default_max values. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/lpconfig.h" name="linphone_config_get_section_param_string">
					<return completetype="const char *" type="char"/>
					<arguments>
						<argument completetype="const LinphoneConfig *" name="lpconfig" type="LinphoneConfig"/>
						<argument completetype="const char *" name="section" type="char"/>
						<argument completetype="const char *" name="key" type="char"/>
						<argument completetype="const char *" name="default_value" type="char"/>
					</arguments>
					<detaileddescription>
						

						<para>Retrieves a section parameter item as a string, given its section and key. The default value string is returned if the config item isn't found. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/lpconfig.h" name="linphone_config_get_skip_flag_for_entry">
					<return completetype="bool_t" type="bool_t"/>
					<arguments>
						<argument completetype="const LinphoneConfig *" name="lpconfig" type="LinphoneConfig"/>
						<argument completetype="const char *" name="section" type="char"/>
						<argument completetype="const char *" name="key" type="char"/>
					</arguments>
					<detaileddescription>
						

						<para>Retrieves the skip flag for a config item </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/lpconfig.h" name="linphone_config_get_skip_flag_for_section">
					<return completetype="bool_t" type="bool_t"/>
					<arguments>
						<argument completetype="const LinphoneConfig *" name="lpconfig" type="LinphoneConfig"/>
						<argument completetype="const char *" name="section" type="char"/>
					</arguments>
					<detaileddescription>
						

						<para>Retrieves the skip flag for a config section </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/lpconfig.h" name="linphone_config_get_string">
					<return completetype="const char *" type="char"/>
					<arguments>
						<argument completetype="const LinphoneConfig *" name="lpconfig" type="LinphoneConfig"/>
						<argument completetype="const char *" name="section" type="char"/>
						<argument completetype="const char *" name="key" type="char"/>
						<argument completetype="const char *" name="default_string" type="char"/>
					</arguments>
					<detaileddescription>
						

						<para>Retrieves a configuration item as a string, given its section, key, and default value.</para>
						<para>The default value string is returned if the config item isn't found. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/lpconfig.h" name="linphone_config_get_string_list">
					<return completetype="bctbx_list_t *" containedtype="const char *" type="bctbx_list_t">
						<description>
							<para>
								A list of const char * objects. 
								<bctbxlist>const char *</bctbxlist>
								  
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const LinphoneConfig *" name="lpconfig" type="LinphoneConfig">
							<description>
								

								<para>
									A 
									<ref>LinphoneConfig</ref>
									 object 
								</para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="section" type="char">
							<description>
								

								<para>The section from which to retrieve a configuration item </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="key" type="char">
							<description>
								

								<para>The name of the configuration item to retrieve </para>
							</description>
							

						</argument>
						<argument completetype="bctbx_list_t *" containedtype="const char *" name="default_list" type="bctbx_list_t">
							<description>
								

								<para>
									A list of const char * objects. 
									<bctbxlist>const char *</bctbxlist>
									  
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Retrieves a configuration item as a list of strings, given its section, key, and default value. The default value is returned if the config item is not found. 
							<description>
								<para>
									A list of const char * objects. 
									<bctbxlist>const char *</bctbxlist>
									  
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/lpconfig.h" name="linphone_config_has_entry">
					<return completetype="int" type="int"/>
					<arguments>
						<argument completetype="const LinphoneConfig *" name="lpconfig" type="LinphoneConfig">
							<description>
								

								<para>The LinphoneConfig object </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="section" type="char">
							<description>
								

								<para/>
							</description>
							

						</argument>
						<argument completetype="const char *" name="key" type="char">
							<description>
								

								<para/>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Returns 1 if a given section with a given key is present in the configuration. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/lpconfig.h" name="linphone_config_has_section">
					<return completetype="int" type="int"/>
					<arguments>
						<argument completetype="const LinphoneConfig *" name="lpconfig" type="LinphoneConfig"/>
						<argument completetype="const char *" name="section" type="char"/>
					</arguments>
					<detaileddescription>
						

						<para>Returns 1 if a given section is present in the configuration. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/lpconfig.h" name="linphone_config_read_file">
					<return completetype="int" type="int"/>
					<arguments>
						<argument completetype="LinphoneConfig *" name="lpconfig" type="LinphoneConfig">
							<description>
								

								<para>The LinphoneConfig object to fill with the content of the file </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="filename" type="char">
							<description>
								

								<para>The filename of the config file to read to fill the LinphoneConfig </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Reads a user config file and fill the LinphoneConfig with the read config values.</para>
						<para/>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/lpconfig.h" name="linphone_config_read_relative_file">
					<return completetype="int" type="int">
						<description>
							<para>0 on success, -1 on failure </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const LinphoneConfig *" name="lpconfig" type="LinphoneConfig">
							<description>
								

								<para>LinphoneConfig instance used as a reference </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="filename" type="char">
							<description>
								

								<para>Name of the file where data will be read from. The name is relative to the place of the config file </para>
							</description>
							

						</argument>
						<argument completetype="char *" name="data" type="char">
							<description>
								

								<para>Buffer where read string will be stored </para>
							</description>
							

						</argument>
						<argument completetype="size_t" name="max_length" type="size_t">
							<description>
								

								<para>Length of the buffer </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Read a string from a file placed beside the Linphone configuration file 
							<description>
								<para>0 on success, -1 on failure </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/lpconfig.h" name="linphone_config_ref">
					<return completetype="LinphoneConfig *" type="LinphoneConfig"/>
					<arguments>
						<argument completetype="LinphoneConfig *" name="lpconfig" type="LinphoneConfig"/>
					</arguments>
					<detaileddescription>
						

						<para>increment reference count </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/lpconfig.h" name="linphone_config_relative_file_exists">
					<return completetype="bool_t" type="bool_t">
						<description>
							<para>TRUE if file exists relative to the to the current location </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const LinphoneConfig *" name="lpconfig" type="LinphoneConfig"/>
						<argument completetype="const char *" name="filename" type="char"/>
					</arguments>
					<detaileddescription>
						

						<para>
							<description>
								<para>TRUE if file exists relative to the to the current location </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/lpconfig.h" name="linphone_config_set_float">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneConfig *" name="lpconfig" type="LinphoneConfig"/>
						<argument completetype="const char *" name="section" type="char"/>
						<argument completetype="const char *" name="key" type="char"/>
						<argument completetype="float" name="value" type="float"/>
					</arguments>
					<detaileddescription>
						

						<para>Sets a float config item </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/lpconfig.h" name="linphone_config_set_int">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneConfig *" name="lpconfig" type="LinphoneConfig"/>
						<argument completetype="const char *" name="section" type="char"/>
						<argument completetype="const char *" name="key" type="char"/>
						<argument completetype="int" name="value" type="int"/>
					</arguments>
					<detaileddescription>
						

						<para>Sets an integer config item </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/lpconfig.h" name="linphone_config_set_int64">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneConfig *" name="lpconfig" type="LinphoneConfig"/>
						<argument completetype="const char *" name="section" type="char"/>
						<argument completetype="const char *" name="key" type="char"/>
						<argument completetype="int64_t" name="value" type="int64_t"/>
					</arguments>
					<detaileddescription>
						

						<para>Sets a 64 bits integer config item </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/lpconfig.h" name="linphone_config_set_int_hex">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneConfig *" name="lpconfig" type="LinphoneConfig"/>
						<argument completetype="const char *" name="section" type="char"/>
						<argument completetype="const char *" name="key" type="char"/>
						<argument completetype="int" name="value" type="int"/>
					</arguments>
					<detaileddescription>
						

						<para>Sets an integer config item, but store it as hexadecimal </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/lpconfig.h" name="linphone_config_set_overwrite_flag_for_entry">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneConfig *" name="lpconfig" type="LinphoneConfig"/>
						<argument completetype="const char *" name="section" type="char"/>
						<argument completetype="const char *" name="key" type="char"/>
						<argument completetype="bool_t" name="value" type="bool_t"/>
					</arguments>
					<detaileddescription>
						

						<para>Sets the overwrite flag for a config item (used when dumping config as xml) </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/lpconfig.h" name="linphone_config_set_overwrite_flag_for_section">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneConfig *" name="lpconfig" type="LinphoneConfig"/>
						<argument completetype="const char *" name="section" type="char"/>
						<argument completetype="bool_t" name="value" type="bool_t"/>
					</arguments>
					<detaileddescription>
						

						<para>Sets the overwrite flag for a config section (used when dumping config as xml) </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/lpconfig.h" name="linphone_config_set_range">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneConfig *" name="lpconfig" type="LinphoneConfig"/>
						<argument completetype="const char *" name="section" type="char"/>
						<argument completetype="const char *" name="key" type="char"/>
						<argument completetype="int" name="min_value" type="int"/>
						<argument completetype="int" name="max_value" type="int"/>
					</arguments>
					<detaileddescription>
						

						<para>Sets a range config item </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/lpconfig.h" name="linphone_config_set_skip_flag_for_entry">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneConfig *" name="lpconfig" type="LinphoneConfig"/>
						<argument completetype="const char *" name="section" type="char"/>
						<argument completetype="const char *" name="key" type="char"/>
						<argument completetype="bool_t" name="value" type="bool_t"/>
					</arguments>
					<detaileddescription>
						

						<para>Sets the skip flag for a config item (used when dumping config as xml) </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/lpconfig.h" name="linphone_config_set_skip_flag_for_section">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneConfig *" name="lpconfig" type="LinphoneConfig"/>
						<argument completetype="const char *" name="section" type="char"/>
						<argument completetype="bool_t" name="value" type="bool_t"/>
					</arguments>
					<detaileddescription>
						

						<para>Sets the skip flag for a config section (used when dumping config as xml) </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/lpconfig.h" name="linphone_config_set_string">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneConfig *" name="lpconfig" type="LinphoneConfig"/>
						<argument completetype="const char *" name="section" type="char"/>
						<argument completetype="const char *" name="key" type="char"/>
						<argument completetype="const char *" name="value" type="char"/>
					</arguments>
					<detaileddescription>
						

						<para>Sets a string config item </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/lpconfig.h" name="linphone_config_set_string_list">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneConfig *" name="lpconfig" type="LinphoneConfig">
							<description>
								

								<para>
									A 
									<ref>LinphoneConfig</ref>
									 object 
								</para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="section" type="char">
							<description>
								

								<para>The name of the section to put the configuration item into </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="key" type="char">
							<description>
								

								<para>The name of the configuration item to set </para>
							</description>
							

						</argument>
						<argument completetype="const bctbx_list_t *" containedtype="const char *" name="value" type="bctbx_list_t">
							<description>
								

								<para>
									A list of const char * objects. 
									<bctbxlist>const char *</bctbxlist>
									  The value to set 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Sets a string list config item </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/lpconfig.h" name="linphone_config_sync">
					<return completetype="int" type="int"/>
					<arguments>
						<argument completetype="LinphoneConfig *" name="lpconfig" type="LinphoneConfig"/>
					</arguments>
					<detaileddescription>
						

						<para>Writes the config file to disk. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/lpconfig.h" name="linphone_config_unref">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneConfig *" name="lpconfig" type="LinphoneConfig"/>
					</arguments>
					<detaileddescription>
						

						<para>Decrement reference count, which will eventually free the object. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/lpconfig.h" name="linphone_config_write_relative_file">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="const LinphoneConfig *" name="lpconfig" type="LinphoneConfig">
							<description>
								

								<para>LinphoneConfig instance used as a reference </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="filename" type="char">
							<description>
								

								<para>Name of the file where to write data. The name is relative to the place of the config file </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="data" type="char">
							<description>
								

								<para>String to write </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Write a string in a file placed relatively with the Linphone configuration file. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
			</instancemethods>
			<properties>
				<property name="sections_names">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/lpconfig.h" name="linphone_config_get_sections_names">
						<return completetype="const char * *" type="char">
							<description>
								<para>a null terminated static array of strings </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneConfig *" name="lpconfig" type="LinphoneConfig">
								<description>
									

									<para>The LinphoneConfig object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Returns the list of sections' names in the LinphoneConfig. 
								<description>
									<para>a null terminated static array of strings </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
			</properties>
			<detaileddescription>
				

				<para>The LinphoneConfig object is used to manipulate a configuration file.</para>
				<para>
					The format of the configuration file is a .ini like format:
					<itemizedlist>
						

						<listitem>
							<para>sections are defined in []</para>
						</listitem>
						<listitem>
							<para>each section contains a sequence of key=value pairs.</para>
						</listitem>
					</itemizedlist>
					

				</para>
				<para>
					Example: 
					<programlisting>
						<codeline>
							<highlight class="normal">[sound]</highlight>
						</codeline>
						

						<codeline>
							<highlight class="normal">echocanceler=1</highlight>
						</codeline>
						

						<codeline>
							<highlight class="normal">
								playback_dev=ALSA:
								<sp/>
								Default
								<sp/>
								device
							</highlight>
						</codeline>
						

						<codeline/>
						

						<codeline>
							<highlight class="normal">[video]</highlight>
						</codeline>
						

						<codeline>
							<highlight class="normal">enabled=1</highlight>
						</codeline>
						

					</programlisting>
					 
				</para>
				        
			</detaileddescription>
			
        
		</class>
		<class cfunctionprefix="linphone_content_" deprecated="false" destroyable="false" name="LinphoneContent" refcountable="true">
			<instancemethods>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/content.h" name="linphone_content_find_part_by_header">
					<return completetype="LinphoneContent *" type="LinphoneContent">
						<description>
							<para>A LinphoneContent object object the part if found, NULL otherwise. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const LinphoneContent *" name="content" type="LinphoneContent">
							<description>
								

								<para>LinphoneContent object. </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="header_name" type="char">
							<description>
								

								<para>The name of the header to look for. </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="header_value" type="char">
							<description>
								

								<para>The value of the header to look for. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Find a part from a multipart content looking for a part header with a specified value. 
							<description>
								<para>A LinphoneContent object object the part if found, NULL otherwise. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/content.h" name="linphone_content_get_custom_header">
					<return completetype="const char *" type="char">
						<description>
							<para>The value of the header if found, NULL otherwise. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const LinphoneContent *" name="content" type="LinphoneContent">
							<description>
								

								<para>LinphoneContent object. </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="header_name" type="char">
							<description>
								

								<para>The name of the header to get the value from. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Get a custom header value of a content. 
							<description>
								<para>The value of the header if found, NULL otherwise. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/content.h" name="linphone_content_get_part">
					<return completetype="LinphoneContent *" type="LinphoneContent">
						<description>
							<para>A LinphoneContent object holding the part if found, NULL otherwise. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const LinphoneContent *" name="content" type="LinphoneContent">
							<description>
								

								<para>LinphoneContent object. </para>
							</description>
							

						</argument>
						<argument completetype="int" name="idx" type="int">
							<description>
								

								<para>The index of the part to get. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Get a part from a multipart content according to its index. 
							<description>
								<para>A LinphoneContent object holding the part if found, NULL otherwise. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/content.h" name="linphone_content_ref">
					<return completetype="LinphoneContent *" type="LinphoneContent">
						<description>
							<para>The same LinphoneContent object. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneContent *" name="content" type="LinphoneContent">
							<description>
								

								<para>LinphoneContent object. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Acquire a reference to the content. 
							<description>
								<para>The same LinphoneContent object. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/content.h" name="linphone_content_set_buffer">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneContent *" name="content" type="LinphoneContent">
							<description>
								

								<para>LinphoneContent object. </para>
							</description>
							

						</argument>
						<argument completetype="const void *" name="buffer" type="void">
							<description>
								

								<para>The content data buffer. </para>
							</description>
							

						</argument>
						<argument completetype="size_t" name="size" type="size_t">
							<description>
								

								<para>The size of the content data buffer. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Set the content data buffer, usually a string. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/content.h" name="linphone_content_unref">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneContent *" name="content" type="LinphoneContent">
							<description>
								

								<para>LinphoneContent object. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Release reference to the content. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
			</instancemethods>
			<properties>
				<property name="buffer">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/content.h" name="linphone_content_get_buffer">
						<return completetype="void *" type="void">
							<description>
								<para>The content data buffer. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneContent *" name="content" type="LinphoneContent">
								<description>
									

									<para>LinphoneContent object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the content data buffer, usually a string. 
								<description>
									<para>The content data buffer. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="encoding">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/content.h" name="linphone_content_get_encoding">
						<return completetype="const char *" type="char">
							<description>
								<para>The encoding of the data buffer. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneContent *" name="content" type="LinphoneContent">
								<description>
									

									<para>LinphoneContent object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the encoding of the data buffer, for example &quot;gzip&quot;. 
								<description>
									<para>The encoding of the data buffer. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/content.h" name="linphone_content_set_encoding">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneContent *" name="content" type="LinphoneContent">
								<description>
									

									<para>LinphoneContent object. </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="encoding" type="char">
								<description>
									

									<para>The encoding of the data buffer. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the encoding of the data buffer, for example &quot;gzip&quot;. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="multipart">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/content.h" name="linphone_content_is_multipart">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>A boolean value telling whether the content is multipart or not. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneContent *" name="content" type="LinphoneContent">
								<description>
									

									<para>LinphoneContent object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Tell whether a content is a multipart content. 
								<description>
									<para>A boolean value telling whether the content is multipart or not. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="name">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/content.h" name="linphone_content_get_name">
						<return completetype="const char *" type="char">
							<description>
								<para>The name of the content. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneContent *" name="content" type="LinphoneContent">
								<description>
									

									<para>LinphoneContent object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the name associated with a RCS file transfer message. It is used to store the original filename of the file to be downloaded from server. 
								<description>
									<para>The name of the content. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/content.h" name="linphone_content_set_name">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneContent *" name="content" type="LinphoneContent">
								<description>
									

									<para>LinphoneContent object. </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="name" type="char">
								<description>
									

									<para>The name of the content. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the name associated with a RCS file transfer message. It is used to store the original filename of the file to be downloaded from server. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="size">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/content.h" name="linphone_content_get_size">
						<return completetype="size_t" type="size_t">
							<description>
								<para>The content data buffer size. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneContent *" name="content" type="LinphoneContent">
								<description>
									

									<para>LinphoneContent object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the content data buffer size, excluding null character despite null character is always set for convenience. 
								<description>
									<para>The content data buffer size. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/content.h" name="linphone_content_set_size">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneContent *" name="content" type="LinphoneContent">
								<description>
									

									<para>LinphoneContent object </para>
								</description>
								

							</argument>
							<argument completetype="size_t" name="size" type="size_t">
								<description>
									

									<para>The content data buffer size. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the content data size, excluding null character despite null character is always set for convenience. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="string_buffer">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/content.h" name="linphone_content_get_string_buffer">
						<return completetype="const char *" type="char">
							<description>
								<para>The string content data buffer. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneContent *" name="content" type="LinphoneContent">
								<description>
									

									<para>LinphoneContent object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the string content data buffer. 
								<description>
									<para>The string content data buffer. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/content.h" name="linphone_content_set_string_buffer">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneContent *" name="content" type="LinphoneContent">
								<description>
									

									<para>LinphoneContent object. </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="buffer" type="char">
								<description>
									

									<para>The string content data buffer. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the string content data buffer. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="subtype">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/content.h" name="linphone_content_get_subtype">
						<return completetype="const char *" type="char">
							<description>
								<para>The mime subtype of the content data, for example &quot;html&quot;. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneContent *" name="content" type="LinphoneContent">
								<description>
									

									<para>LinphoneContent object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the mime subtype of the content data. 
								<description>
									<para>The mime subtype of the content data, for example &quot;html&quot;. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/content.h" name="linphone_content_set_subtype">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneContent *" name="content" type="LinphoneContent">
								<description>
									

									<para>LinphoneContent object. </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="subtype" type="char">
								<description>
									

									<para>The mime subtype of the content data, for example &quot;html&quot;. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the mime subtype of the content data. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="type">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/content.h" name="linphone_content_get_type">
						<return completetype="const char *" type="char">
							<description>
								<para>The mime type of the content data, for example &quot;application&quot;. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneContent *" name="content" type="LinphoneContent">
								<description>
									

									<para>LinphoneContent object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the mime type of the content data. 
								<description>
									<para>The mime type of the content data, for example &quot;application&quot;. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/content.h" name="linphone_content_set_type">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneContent *" name="content" type="LinphoneContent">
								<description>
									

									<para>LinphoneContent object. </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="type" type="char">
								<description>
									

									<para>The mime type of the content data, for example &quot;application&quot;. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the mime type of the content data. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="user_data">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/content.h" name="linphone_content_get_user_data">
						<return completetype="void *" type="void">
							<description>
								<para>The user pointer associated with the content. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneContent *" name="content" type="LinphoneContent">
								<description>
									

									<para>LinphoneContent object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Retrieve the user pointer associated with the content. 
								<description>
									<para>The user pointer associated with the content. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/content.h" name="linphone_content_set_user_data">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneContent *" name="content" type="LinphoneContent">
								<description>
									

									<para>LinphoneContent object. </para>
								</description>
								

							</argument>
							<argument completetype="void *" name="ud" type="void">
								<description>
									

									<para>The user pointer to associate with the content. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Assign a user pointer to the content. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
			</properties>
			<detaileddescription>
				

				<para>The LinphoneContent object holds data that can be embedded in a signaling message. </para>
				        
			</detaileddescription>
			
        
		</class>
		<class cfunctionprefix="linphone_core_" deprecated="false" destroyable="true" name="LinphoneCore" refcountable="true">
			<events>
				<event deprecated="false" name="LinphoneCoreAuthInfoRequestedCb">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>the LinphoneCore </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="realm" type="char">
							<description>
								

								<para>the realm (domain) on which authentication is required. </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="username" type="char">
							<description>
								

								<para>the username that needs to be authenticated. </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="domain" type="char">
							<description>
								

								<para>
									the domain on which authentication is required. Application shall reply to this callback using 
									<ref>linphone_core_add_auth_info()</ref>
									. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Callback for requesting authentication information to application or user. </para>
						        
					</detaileddescription>
					
        
				</event>
				<event deprecated="false" name="LinphoneCoreFileTransferProgressIndicationCb">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									<ref>LinphoneCore</ref>
									 object 
								</para>
							</description>
							

						</argument>
						<argument completetype="LinphoneChatMessage *" name="message" type="LinphoneChatMessage">
							<description>
								

								<para>
									<ref>LinphoneChatMessage</ref>
									 message from which the body is received. 
								</para>
							</description>
							

						</argument>
						<argument completetype="const LinphoneContent *" name="content" type="LinphoneContent">
							<description>
								

								<para>
									<ref>LinphoneContent</ref>
									 incoming content information 
								</para>
							</description>
							

						</argument>
						<argument completetype="size_t" name="offset" type="size_t">
							<description>
								

								<para>The number of bytes sent/received since the beginning of the transfer. </para>
							</description>
							

						</argument>
						<argument completetype="size_t" name="total" type="size_t">
							<description>
								

								<para>The total number of bytes to be sent/received. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>File transfer progress indication callback prototype.</para>
						<para/>
						        
					</detaileddescription>
					
        
				</event>
				<event deprecated="false" name="LinphoneCoreFileTransferRecvCb">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									<ref>LinphoneCore</ref>
									 object 
								</para>
							</description>
							

						</argument>
						<argument completetype="LinphoneChatMessage *" name="message" type="LinphoneChatMessage">
							<description>
								

								<para>
									<ref>LinphoneChatMessage</ref>
									 message from which the body is received. 
								</para>
							</description>
							

						</argument>
						<argument completetype="const LinphoneContent *" name="content" type="LinphoneContent">
							<description>
								

								<para>
									<ref>LinphoneContent</ref>
									 incoming content information 
								</para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="buff" type="char">
							<description>
								

								<para>pointer to the received data </para>
							</description>
							

						</argument>
						<argument completetype="size_t" name="size" type="size_t">
							<description>
								

								<para>number of bytes to be read from buff. 0 means end of file. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>File transfer receive callback prototype. This function is called by the core upon an incoming File transfer is started. This function may be call several time for the same file in case of large file.</para>
						<para/>
						        
					</detaileddescription>
					
        
				</event>
				<event deprecated="false" name="LinphoneCoreFileTransferSendCb">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									<ref>LinphoneCore</ref>
									 object 
								</para>
							</description>
							

						</argument>
						<argument completetype="LinphoneChatMessage *" name="message" type="LinphoneChatMessage">
							<description>
								

								<para>
									<ref>LinphoneChatMessage</ref>
									 message from which the body is received. 
								</para>
							</description>
							

						</argument>
						<argument completetype="const LinphoneContent *" name="content" type="LinphoneContent">
							<description>
								

								<para>
									<ref>LinphoneContent</ref>
									 outgoing content 
								</para>
							</description>
							

						</argument>
						<argument completetype="char *" name="buff" type="char">
							<description>
								

								<para>pointer to the buffer where data chunk shall be written by the app </para>
							</description>
							

						</argument>
						<argument completetype="size_t *" name="size" type="size_t">
							<description>
								

								<para>as input value, it represents the number of bytes expected by the framework. As output value, it means the number of bytes wrote by the application in the buffer. 0 means end of file. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							File transfer send callback prototype. This function is called by the core upon an outgoing File transfer is started. This function is called until size is set to 0. 
							<linebreak/>
							
 a 
							<ref>LinphoneContent</ref>
							 with a size equal zero
						</para>
						<para/>
						        
					</detaileddescription>
					
        
				</event>
				<event deprecated="true" name="LinphoneCoreTextMessageReceivedCb">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									<ref>LinphoneCore</ref>
									 object 
								</para>
							</description>
							

						</argument>
						<argument completetype="LinphoneChatRoom *" name="room" type="LinphoneChatRoom">
							<description>
								

								<para>
									<ref>LinphoneChatRoom</ref>
									 involved in this conversation. Can be be created by the framework in case 
									<ref>the from </ref>
									 is not present in any chat room. 
								</para>
							</description>
							

						</argument>
						<argument completetype="const LinphoneAddress *" name="from" type="LinphoneAddress">
							<description>
								

								<para>
									<ref>LinphoneAddress</ref>
									 from 
								</para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="message" type="char">
							<description>
								

								<para>incoming message </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Callback prototype </para>
						<para/>
						        
					</detaileddescription>
					
        
				</event>
			</events>
			<classmethods>
				<classmethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_compress_log_collection">
					<return completetype="char *" type="char">
						<description>
							<para>The path of the compressed log collection file (to be freed calling ms_free()). </para>
						</description>
						

					</return>
					<arguments/>
					<detaileddescription>
						

						<para>
							Compress the log collection in a single file. 
							<description>
								<para>The path of the compressed log collection file (to be freed calling ms_free()). </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</classmethod>
				<classmethod deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_disable_logs">
					<return completetype="void" type="void"/>
					<arguments/>
					<detaileddescription>
						

						<para>Entirely disable logging.</para>
						<para/>
						        
					</detaileddescription>
					
        
				</classmethod>
				<classmethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_enable_log_collection">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneLogCollectionState" name="state" type="LinphoneLogCollectionState">
							<description>
								

								<para>LinphoneLogCollectionState value telling whether to enable log collection or not. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Enable the linphone core log collection to upload logs on a server. </para>
						        
					</detaileddescription>
					
        
				</classmethod>
				<classmethod deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_enable_logs">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="FILE *" name="file" type="FILE">
							<description>
								

								<para>a C FILE* where to fprintf logs. If null stdout is used. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Enable logs in supplied FILE*.</para>
						<para/>
						<para/>
						        
					</detaileddescription>
					
        
				</classmethod>
				<classmethod deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_enable_logs_with_cb">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="OrtpLogFunc" name="logfunc" type="OrtpLogFunc">
							<description>
								

								<para>The address of a OrtpLogFunc callback whose protoype is typedef void (*OrtpLogFunc)(OrtpLogLevel lev, const char *fmt, va_list args); </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Enable logs through the user's supplied log callback.</para>
						<para/>
						<para/>
						        
					</detaileddescription>
					
        
				</classmethod>
				<classmethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_log_collection_enabled">
					<return completetype="LinphoneLogCollectionState" type="LinphoneLogCollectionState">
						<description>
							<para>The state of the linphone core log collection. </para>
						</description>
						

					</return>
					<arguments/>
					<detaileddescription>
						

						<para>
							Tells whether the linphone core log collection is enabled. 
							<description>
								<para>The state of the linphone core log collection. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</classmethod>
				<classmethod deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_new">
					<return completetype="LinphoneCore *" type="LinphoneCore"/>
					<arguments>
						<argument completetype="const LinphoneCoreVTable *" name="vtable" type="LinphoneCoreVTable">
							<description>
								

								<para>a LinphoneCoreVTable structure holding your application callbacks </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="config_path" type="char">
							<description>
								

								<para>a path to a config file. If it does not exists it will be created. The config file is used to store all settings, call logs, friends, proxies... so that all these settings become persistent over the life of the LinphoneCore object. It is allowed to set a NULL config file. In that case LinphoneCore will not store any settings. </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="factory_config_path" type="char">
							<description>
								

								<para>a path to a read-only config file that can be used to to store hard-coded preference such as proxy settings or internal preferences. The settings in this factory file always override the one in the normal config file. It is OPTIONAL, use NULL if unneeded. </para>
							</description>
							

						</argument>
						<argument completetype="void *" name="userdata" type="void">
							<description>
								

								<para>
									an opaque user pointer that can be retrieved at any time (for example in callbacks) using 
									<ref>linphone_core_get_user_data()</ref>
									. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Instanciates a LinphoneCore object.</para>
						<para>
							The LinphoneCore object is the primary handle for doing all phone actions. It should be unique within your application. 
							<see>linphone_core_new_with_config </see>
						</para>
						        
					</detaileddescription>
					
        
				</classmethod>
				<classmethod deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_new_with_config">
					<return completetype="LinphoneCore *" type="LinphoneCore"/>
					<arguments>
						<argument completetype="const LinphoneCoreVTable *" name="vtable" type="LinphoneCoreVTable">
							<description>
								

								<para>a LinphoneCoreVTable structure holding your application callbacks </para>
							</description>
							

						</argument>
						<argument completetype="LpConfig *" name="config" type="LpConfig">
							<description>
								

								<para>a pointer to an LpConfig object holding the configuration of the LinphoneCore to be instantiated. </para>
							</description>
							

						</argument>
						<argument completetype="void *" name="userdata" type="void">
							<description>
								

								<para>
									an opaque user pointer that can be retrieved at any time (for example in callbacks) using 
									<ref>linphone_core_get_user_data()</ref>
									. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Instantiates a LinphoneCore object with a given LpConfig.</para>
						<para>
							The LinphoneCore object is the primary handle for doing all phone actions. It should be unique within your application. 
							<see>linphone_core_new </see>
						</para>
						        
					</detaileddescription>
					
        
				</classmethod>
				<classmethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_reset_log_collection">
					<return completetype="void" type="void"/>
					<arguments/>
					<detaileddescription>
						

						<para>Reset the log collection by removing the log files. </para>
						        
					</detaileddescription>
					
        
				</classmethod>
				<classmethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_serialize_logs">
					<return completetype="void" type="void"/>
					<arguments/>
					<detaileddescription>
						

						<para>
							Enable logs serialization (output logs from either the thread that creates the linphone core or the thread that calls 
							<ref>linphone_core_iterate()</ref>
							). Must be called before creating the linphone core. 
						</para>
						        
					</detaileddescription>
					
        
				</classmethod>
				<classmethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_tunnel_available">
					<return completetype="bool_t" type="bool_t"/>
					<arguments/>
					<detaileddescription>
						

						<para>True if tunnel support was compiled. </para>
						        
					</detaileddescription>
					
        
				</classmethod>
				<classmethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_upnp_available">
					<return completetype="bool_t" type="bool_t">
						<description>
							<para>true if uPnP is available otherwise return false. </para>
						</description>
						

					</return>
					<arguments/>
					<detaileddescription>
						

						<para>Return the availability of uPnP.</para>
						<para>
							<description>
								<para>true if uPnP is available otherwise return false. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</classmethod>
				<classmethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_vcard_supported">
					<return completetype="bool_t" type="bool_t">
						<description>
							<para>TRUE if VCARD is supported, FALSE otherwise. </para>
						</description>
						

					</return>
					<arguments/>
					<detaileddescription>
						

						<para>
							Tells whether VCARD support is builtin. 
							<description>
								<para>TRUE if VCARD is supported, FALSE otherwise. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</classmethod>
			</classmethods>
			<instancemethods>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_accept_call">
					<return completetype="int" type="int">
						<description>
							<para>0 on success, -1 on failure </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>LinphoneCore object </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneCall *" name="call" type="LinphoneCall">
							<description>
								

								<para>The LinphoneCall object representing the call to be answered </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Accept an incoming call.</para>
						<para>
							Basically the application is notified of incoming calls within the call_state_changed callback of the 
							<ref>LinphoneCoreVTable</ref>
							 structure, where it will receive a LinphoneCallIncoming event with the associated LinphoneCall object. The application can later accept the call using this method. 
							<description>
								<para>0 on success, -1 on failure </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_accept_call_update">
					<return completetype="int" type="int">
						<description>
							<para>
								0 if successful, -1 otherwise (actually when this function call is performed outside ot 
								<ref>LinphoneCallUpdatedByRemote</ref>
								 state) 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>LinphoneCore object </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneCall *" name="call" type="LinphoneCall">
							<description>
								

								<para>The call for which to accept an update </para>
							</description>
							

						</argument>
						<argument completetype="const LinphoneCallParams *" name="params" type="LinphoneCallParams">
							<description>
								

								<para>A LinphoneCallParams object describing the call parameters to accept </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Accept call modifications initiated by other end.</para>
						<para>
							This call may be performed in response to a 
							<ref>LinphoneCallUpdatedByRemote</ref>
							 state notification. When such notification arrives, the application can decide to call linphone_core_defer_update_call() so that it can have the time to prompt the user. 
							<ref>linphone_call_get_remote_params()</ref>
							 can be used to get information about the call parameters requested by the other party, such as whether a video stream is requested.
						</para>
						<para>
							When the user accepts or refuse the change, 
							<ref>linphone_core_accept_call_update()</ref>
							 can be done to answer to the other party. If params is NULL, then the same call parameters established before the update request will continue to be used (no change). If params is not NULL, then the update will be accepted according to the parameters passed. Typical example is when a user accepts to start video, then params should indicate that video stream should be used (see 
							<ref>linphone_call_params_enable_video()</ref>
							). 
							<description>
								<para>
									0 if successful, -1 otherwise (actually when this function call is performed outside ot 
									<ref>LinphoneCallUpdatedByRemote</ref>
									 state) 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_accept_call_with_params">
					<return completetype="int" type="int">
						<description>
							<para>0 on success, -1 on failure </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>LinphoneCore object </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneCall *" name="call" type="LinphoneCall">
							<description>
								

								<para>The LinphoneCall object representing the call to be answered </para>
							</description>
							

						</argument>
						<argument completetype="const LinphoneCallParams *" name="params" type="LinphoneCallParams">
							<description>
								

								<para>The specific parameters for this call, for example whether video is accepted or not. Use NULL to use default parameters </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Accept an incoming call, with parameters.</para>
						<para>
							Basically the application is notified of incoming calls within the call_state_changed callback of the 
							<ref>LinphoneCoreVTable</ref>
							 structure, where it will receive a LinphoneCallIncoming event with the associated LinphoneCall object. The application can later accept the call using this method. 
							<description>
								<para>0 on success, -1 on failure </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_accept_early_media">
					<return completetype="int" type="int">
						<description>
							<para>0 if successful, -1 otherwise</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>LinphoneCore object </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneCall *" name="call" type="LinphoneCall">
							<description>
								

								<para>The incoming call to accept </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Accept an early media session for an incoming call. This is identical as calling 
							<ref>linphone_core_accept_early_media_with_params()</ref>
							 with NULL call parameters. 
							<description>
								<para>0 if successful, -1 otherwise</para>
							</description>
							

							<see>linphone_core_accept_early_media_with_params() </see>
						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_accept_early_media_with_params">
					<return completetype="int" type="int">
						<description>
							<para>0 if successful, -1 otherwise </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>LinphoneCore object </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneCall *" name="call" type="LinphoneCall">
							<description>
								

								<para>The call to accept </para>
							</description>
							

						</argument>
						<argument completetype="const LinphoneCallParams *" name="params" type="LinphoneCallParams">
							<description>
								

								<para>The call parameters to use (can be NULL) </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							When receiving an incoming, accept to start a media session as early-media. This means the call is not accepted but audio &amp; video streams can be established if the remote party supports early media. However, unlike after call acceptance, mic and camera input are not sent during early-media, though received audio &amp; video are played normally. The call can then later be fully accepted using 
							<ref>linphone_core_accept_call()</ref>
							 or 
							<ref>linphone_core_accept_call_with_params()</ref>
							. 
							<description>
								<para>0 if successful, -1 otherwise </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_add_all_to_conference">
					<return completetype="int" type="int">
						<description>
							<para>0 if succeeded. Negative number if failed </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									<ref>LinphoneCore</ref>
									 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Add all current calls into the conference. If no conference is running a new internal conference context is created and all current calls are added to it. 
							<description>
								<para>0 if succeeded. Negative number if failed </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_add_auth_info">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									The 
									<ref>LinphoneCore</ref>
									. 
								</para>
							</description>
							

						</argument>
						<argument completetype="const LinphoneAuthInfo *" name="info" type="LinphoneAuthInfo">
							<description>
								

								<para>
									The 
									<ref>LinphoneAuthInfo</ref>
									 to add. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Adds authentication information to the 
							<ref>LinphoneCore</ref>
							. That piece of information will be used during all SIP transactions that require authentication. 
						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_add_callbacks">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									The 
									<ref>LinphoneCore</ref>
									 object to monitor. 
								</para>
							</description>
							

						</argument>
						<argument completetype="LinphoneCoreCbs *" name="cbs" type="LinphoneCoreCbs">
							<description>
								

								<para>
									A 
									<ref>LinphoneCoreCbs</ref>
									 object holding the callbakcs you need. A reference is take by 
									<ref>LinphoneCore</ref>
									 until you invoke linphone_core_remove_cbs(). 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Add a listener in order to be notified of 
							<ref>LinphoneCore</ref>
							 events. Once an event is received, registred 
							<ref>LinphoneCoreCbs</ref>
							 are sequencially invoked in order. 
						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_core_add_friend">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									<ref>LinphoneCore</ref>
									 object 
								</para>
							</description>
							

						</argument>
						<argument completetype="LinphoneFriend *" name="fr" type="LinphoneFriend">
							<description>
								

								<para>
									<ref>LinphoneFriend</ref>
									 to add 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Add a friend to the current buddy list, if 
							<ref>subscription attribute </ref>
							 is set, a SIP SUBSCRIBE message is sent. 
						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friendlist.h" name="linphone_core_add_friend_list">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>LinphoneCore object </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneFriendList *" name="list" type="LinphoneFriendList">
							<description>
								

								<para>LinphoneFriendList object </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Add a friend list. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_add_listener">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>object </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneCoreVTable *" name="vtable" type="LinphoneCoreVTable">
							<description>
								

								<para>a LinphoneCoreVTable structure holding your application callbacks. Object is owned by linphone core until linphone_core_remove_listener. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>add a listener to be notified of linphone core events. Once events are received, registered vtable are invoked in order. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_add_proxy_config">
					<return completetype="int" type="int"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore"/>
						<argument completetype="LinphoneProxyConfig *" name="config" type="LinphoneProxyConfig"/>
					</arguments>
					<detaileddescription>
						

						<para>Add a proxy configuration. This will start registration on the proxy, if registration is enabled. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_add_supported_tag">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="core" type="LinphoneCore"/>
						<argument completetype="const char *" name="tag" type="char">
							<description>
								

								<para>The feature tag name </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>This function controls signaling features supported by the core. They are typically included in a SIP Supported header. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_add_to_conference">
					<return completetype="int" type="int">
						<description>
							<para>0 if succeeded. Negative number if failed </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									<ref>LinphoneCore</ref>
									 
								</para>
							</description>
							

						</argument>
						<argument completetype="LinphoneCall *" name="call" type="LinphoneCall">
							<description>
								

								<para>The current call with the participant to add </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Add a participant to the conference. If no conference is going on a new internal conference context is created and the participant is added to it. 
							<description>
								<para>0 if succeeded. Negative number if failed </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_check_payload_type_usability">
					<return completetype="bool_t" type="bool_t"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore"/>
						<argument completetype="const PayloadType *" name="pt" type="PayloadType"/>
					</arguments>
					<detaileddescription>
						

						<para>Return TRUE if codec can be used with bandwidth, FALSE else </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_clear_call_logs">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>LinphoneCore object </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Erase the call log. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_clear_proxy_config">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore"/>
					</arguments>
					<detaileddescription>
						

						<para>Erase all proxies from config. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_create_address">
					<return completetype="LinphoneAddress *" type="LinphoneAddress">
						<description>
							<para>
								The create 
								<ref>LinphoneAddress</ref>
								 object 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									<ref>LinphoneCore</ref>
									 object 
								</para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="address" type="char">
							<description>
								

								<para>String containing the user supplied address </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Create a 
							<ref>LinphoneAddress</ref>
							 object by parsing the user supplied address, given as a string. 
							<description>
								<para>
									The create 
									<ref>LinphoneAddress</ref>
									 object 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_create_auth_info">
					<return completetype="LinphoneAuthInfo *" type="LinphoneAuthInfo">
						<description>
							<para>
								<ref>LinphoneAuthInfo</ref>
								 with default values set 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									<ref>LinphoneCore</ref>
									 object 
								</para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="username" type="char">
							<description>
								

								<para>String containing the username part of the authentication credentials </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="userid" type="char">
							<description>
								

								<para>String containing the username to use to calculate the authentication digest (optional) </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="passwd" type="char">
							<description>
								

								<para>String containing the password of the authentication credentials (optional, either passwd or ha1 must be set) </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="ha1" type="char">
							<description>
								

								<para>String containing a ha1 hash of the password (optional, either passwd or ha1 must be set) </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="realm" type="char">
							<description>
								

								<para>String used to discriminate different SIP authentication domains (optional) </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="domain" type="char">
							<description>
								

								<para>String containing the SIP domain for which this authentication information is valid, if it has to be restricted for a single SIP domain. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Create an authentication information with default values from Linphone core. 
							<description>
								<para>
									<ref>LinphoneAuthInfo</ref>
									 with default values set 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_create_call_params">
					<return completetype="LinphoneCallParams *" type="LinphoneCallParams">
						<description>
							<para>A new LinphoneCallParams object </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>LinphoneCore object </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneCall *" name="call" type="LinphoneCall">
							<description>
								

								<para>LinphoneCall for which the parameters are to be build, or NULL in the case where the parameters are to be used for a new outgoing call. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Create a LinphoneCallParams suitable for 
							<ref>linphone_core_invite_with_params()</ref>
							, 
							<ref>linphone_core_accept_call_with_params()</ref>
							, 
							<ref>linphone_core_accept_early_media_with_params()</ref>
							, 
							<ref>linphone_core_accept_call_update()</ref>
							. The parameters are initialized according to the current LinphoneCore configuration and the current state of the LinphoneCall. 
							<description>
								<para>A new LinphoneCallParams object </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_create_conference_with_params">
					<return completetype="LinphoneConference *" type="LinphoneConference">
						<description>
							<para>
								A pointer on the freshly created conference. That object will be automatically freed by the core after calling 
								<ref>linphone_core_terminate_conference()</ref>
								. 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									The 
									<ref>LinphoneCore</ref>
									 instance where the conference will be created inside. 
								</para>
							</description>
							

						</argument>
						<argument completetype="const LinphoneConferenceParams *" name="params" type="LinphoneConferenceParams">
							<description>
								

								<para>
									Parameters of the conference. See 
									<ref>LinphoneConferenceParams</ref>
									. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Create a conference 
							<description>
								<para>
									A pointer on the freshly created conference. That object will be automatically freed by the core after calling 
									<ref>linphone_core_terminate_conference()</ref>
									. 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_create_config">
					<return completetype="LinphoneConfig *" type="LinphoneConfig"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									<ref>LinphoneCore</ref>
									 object 
								</para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="filename" type="char">
							<description>
								

								<para>
									The filename of the config file to read to fill the instantiated 
									<ref>LinphoneConfig</ref>
									 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Create a 
							<ref>LinphoneConfig</ref>
							 object from a user config file. 
						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/content.h" name="linphone_core_create_content">
					<return completetype="LinphoneContent *" type="LinphoneContent">
						<description>
							<para>LinphoneContent object with default values set </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>LinphoneCore object </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Create a content with default values from Linphone core. 
							<description>
								<para>LinphoneContent object with default values set </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_core_create_friend">
					<return completetype="LinphoneFriend *" type="LinphoneFriend">
						<description>
							<para>
								The created 
								<ref>LinphoneFriend</ref>
								 object 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									<ref>LinphoneCore</ref>
									 object 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Create a default LinphoneFriend. 
							<description>
								<para>
									The created 
									<ref>LinphoneFriend</ref>
									 object 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friendlist.h" name="linphone_core_create_friend_list">
					<return completetype="LinphoneFriendList *" type="LinphoneFriendList">
						<description>
							<para>A new LinphoneFriendList object. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>LinphoneCore object. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Create a new empty LinphoneFriendList object. 
							<description>
								<para>A new LinphoneFriendList object. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_core_create_friend_with_address">
					<return completetype="LinphoneFriend *" type="LinphoneFriend">
						<description>
							<para>
								The created 
								<ref>LinphoneFriend</ref>
								 object 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									<ref>LinphoneCore</ref>
									 object 
								</para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="address" type="char">
							<description>
								

								<para>A string containing the address to create the LinphoneFriend from </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Create a LinphoneFriend from the given address. 
							<description>
								<para>
									The created 
									<ref>LinphoneFriend</ref>
									 object 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_create_lp_config">
					<return completetype="LinphoneConfig *" type="LinphoneConfig"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									<ref>LinphoneCore</ref>
									 object 
								</para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="filename" type="char">
							<description>
								

								<para>The filename of the config file to read to fill the instantiated LpConfig</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Create a LpConfig object from a user config file. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/nat_policy.h" name="linphone_core_create_nat_policy">
					<return completetype="LinphoneNatPolicy *" type="LinphoneNatPolicy">
						<description>
							<para>A new LinphoneNatPolicy object. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>LinphoneCore object </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Create a new LinphoneNatPolicy object with every policies being disabled. 
							<description>
								<para>A new LinphoneNatPolicy object. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/nat_policy.h" name="linphone_core_create_nat_policy_from_config">
					<return completetype="LinphoneNatPolicy *" type="LinphoneNatPolicy">
						<description>
							<para>A new LinphoneNatPolicy object. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>LinphoneCore object </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="ref" type="char">
							<description>
								

								<para>The reference of a NAT policy in the config of the LinphoneCore </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Create a new LinphoneNatPolicy by reading the config of a LinphoneCore according to the passed ref. 
							<description>
								<para>A new LinphoneNatPolicy object. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/event.h" name="linphone_core_create_notify">
					<return completetype="LinphoneEvent *" type="LinphoneEvent">
						<description>
							<para>a LinphoneEvent holding the context of the notification. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									the 
									<ref>LinphoneCore</ref>
									 
								</para>
							</description>
							

						</argument>
						<argument completetype="const LinphoneAddress *" name="resource" type="LinphoneAddress">
							<description>
								

								<para>the destination resource </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="event" type="char">
							<description>
								

								<para>the event name </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Create an out-of-dialog notification, specifying the destination resource, the event name. The notification can be send with 
							<ref>linphone_event_notify()</ref>
							. 
							<description>
								<para>a LinphoneEvent holding the context of the notification. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/event.h" name="linphone_core_create_one_shot_publish">
					<return completetype="LinphoneEvent *" type="LinphoneEvent">
						<description>
							<para>the LinphoneEvent holding the context of the publish. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									the 
									<ref>LinphoneCore</ref>
									 
								</para>
							</description>
							

						</argument>
						<argument completetype="const LinphoneAddress *" name="resource" type="LinphoneAddress">
							<description>
								

								<para>the resource uri for the event </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="event" type="char">
							<description>
								

								<para>the event name </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Create a publish context for a one-shot publish. After being created, the publish must be sent using 
							<ref>linphone_event_send_publish()</ref>
							. The LinphoneEvent is automatically terminated when the publish transaction is finished, either with success or failure. The application must not call 
							<ref>linphone_event_terminate()</ref>
							 for such one-shot publish. 
							<description>
								<para>the LinphoneEvent holding the context of the publish. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_core_create_presence_activity">
					<return completetype="LinphonePresenceActivity *" type="LinphonePresenceActivity">
						<description>
							<para>
								The created 
								<ref>LinphonePresenceActivity</ref>
								 object. 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									<ref>LinphoneCore</ref>
									 object. 
								</para>
							</description>
							

						</argument>
						<argument completetype="LinphonePresenceActivityType" name="acttype" type="LinphonePresenceActivityType">
							<description>
								

								<para>
									The 
									<ref>LinphonePresenceActivityType</ref>
									 to set for the activity. 
								</para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="description" type="char">
							<description>
								

								<para>An additional description of the activity to set for the activity. Can be NULL if no additional description is to be added. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Create a LinphonePresenceActivity with the given type and description. 
							<description>
								<para>
									The created 
									<ref>LinphonePresenceActivity</ref>
									 object. 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_core_create_presence_model">
					<return completetype="LinphonePresenceModel *" type="LinphonePresenceModel">
						<description>
							<para>
								The created 
								<ref>LinphonePresenceModel</ref>
								 object. 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									<ref>LinphoneCore</ref>
									 object. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Create a default LinphonePresenceModel. 
							<description>
								<para>
									The created 
									<ref>LinphonePresenceModel</ref>
									 object. 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_core_create_presence_model_with_activity">
					<return completetype="LinphonePresenceModel *" type="LinphonePresenceModel">
						<description>
							<para>
								The created 
								<ref>LinphonePresenceModel</ref>
								 object. 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									<ref>LinphoneCore</ref>
									 object. 
								</para>
							</description>
							

						</argument>
						<argument completetype="LinphonePresenceActivityType" name="acttype" type="LinphonePresenceActivityType">
							<description>
								

								<para>
									The 
									<ref>LinphonePresenceActivityType</ref>
									 to set for the activity of the created model. 
								</para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="description" type="char">
							<description>
								

								<para>An additional description of the activity to set for the activity. Can be NULL if no additional description is to be added. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Create a LinphonePresenceModel with the given activity type and activity description. 
							<description>
								<para>
									The created 
									<ref>LinphonePresenceModel</ref>
									 object. 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_core_create_presence_model_with_activity_and_note">
					<return completetype="LinphonePresenceModel *" type="LinphonePresenceModel">
						<description>
							<para>
								The created 
								<ref>LinphonePresenceModel</ref>
								 object. 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									<ref>LinphoneCore</ref>
									 object. 
								</para>
							</description>
							

						</argument>
						<argument completetype="LinphonePresenceActivityType" name="acttype" type="LinphonePresenceActivityType">
							<description>
								

								<para>
									The 
									<ref>LinphonePresenceActivityType</ref>
									 to set for the activity of the created model. 
								</para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="description" type="char">
							<description>
								

								<para>An additional description of the activity to set for the activity. Can be NULL if no additional description is to be added. </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="note" type="char">
							<description>
								

								<para>The content of the note to be added to the created model. </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="lang" type="char">
							<description>
								

								<para>The language of the note to be added to the created model. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Create a LinphonePresenceModel with the given activity type, activity description, note content and note language. 
							<description>
								<para>
									The created 
									<ref>LinphonePresenceModel</ref>
									 object. 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_core_create_presence_note">
					<return completetype="LinphonePresenceNote *" type="LinphonePresenceNote">
						<description>
							<para>
								The created 
								<ref>LinphonePresenceNote</ref>
								 object. 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									<ref>LinphoneCore</ref>
									 object. 
								</para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="content" type="char">
							<description>
								

								<para>The content of the note to be created. </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="lang" type="char">
							<description>
								

								<para>The language of the note to be created. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Create a LinphonePresenceNote with the given content and language. 
							<description>
								<para>
									The created 
									<ref>LinphonePresenceNote</ref>
									 object. 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_core_create_presence_person">
					<return completetype="LinphonePresencePerson *" type="LinphonePresencePerson">
						<description>
							<para>
								The created 
								<ref>LinphonePresencePerson</ref>
								 object. 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									<ref>LinphoneCore</ref>
									 object 
								</para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="id" type="char">
							<description>
								

								<para>The id of the person to be created. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Create a LinphonePresencePerson with the given id. 
							<description>
								<para>
									The created 
									<ref>LinphonePresencePerson</ref>
									 object. 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_core_create_presence_service">
					<return completetype="LinphonePresenceService *" type="LinphonePresenceService">
						<description>
							<para>
								The created 
								<ref>LinphonePresenceService</ref>
								 object. 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									<ref>LinphoneCore</ref>
									 object. 
								</para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="id" type="char">
							<description>
								

								<para>The id of the service to be created. </para>
							</description>
							

						</argument>
						<argument completetype="LinphonePresenceBasicStatus" name="basic_status" type="LinphonePresenceBasicStatus">
							<description>
								

								<para>The basic status of the service to be created. </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="contact" type="char">
							<description>
								

								<para>A string containing a contact information corresponding to the service to be created. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Create a LinphonePresenceService with the given id, basic status and contact. 
							<description>
								<para>
									The created 
									<ref>LinphonePresenceService</ref>
									 object. 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_create_proxy_config">
					<return completetype="LinphoneProxyConfig *" type="LinphoneProxyConfig">
						<description>
							<para>
								<ref>LinphoneProxyConfig</ref>
								 with default values set 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									<ref>LinphoneCore</ref>
									 object 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Create a proxy config with default values from Linphone core. 
							<description>
								<para>
									<ref>LinphoneProxyConfig</ref>
									 with default values set 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/event.h" name="linphone_core_create_publish">
					<return completetype="LinphoneEvent *" type="LinphoneEvent">
						<description>
							<para>the LinphoneEvent holding the context of the publish. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									the 
									<ref>LinphoneCore</ref>
									 
								</para>
							</description>
							

						</argument>
						<argument completetype="const LinphoneAddress *" name="resource" type="LinphoneAddress">
							<description>
								

								<para>the resource uri for the event </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="event" type="char">
							<description>
								

								<para>the event name </para>
							</description>
							

						</argument>
						<argument completetype="int" name="expires" type="int">
							<description>
								

								<para>the lifetime of event being published, -1 if no associated duration, in which case it will not be refreshed. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Create a publish context for an event state. After being created, the publish must be sent using 
							<ref>linphone_event_send_publish()</ref>
							. After expiry, the publication is refreshed unless it is terminated before. 
							<description>
								<para>the LinphoneEvent holding the context of the publish. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/event.h" name="linphone_core_create_subscribe">
					<return completetype="LinphoneEvent *" type="LinphoneEvent">
						<description>
							<para>a LinphoneEvent holding the context of the created subcription. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									the 
									<ref>LinphoneCore</ref>
									 
								</para>
							</description>
							

						</argument>
						<argument completetype="const LinphoneAddress *" name="resource" type="LinphoneAddress">
							<description>
								

								<para>the destination resource </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="event" type="char">
							<description>
								

								<para>the event name </para>
							</description>
							

						</argument>
						<argument completetype="int" name="expires" type="int">
							<description>
								

								<para>the whished duration of the subscription </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Create an outgoing subscription, specifying the destination resource, the event name, and an optional content body. If accepted, the subscription runs for a finite period, but is automatically renewed if not terminated before. Unlike 
							<ref>linphone_core_subscribe()</ref>
							 the subscription isn't sent immediately. It will be send when calling 
							<ref>linphone_event_send_subscribe()</ref>
							. 
							<description>
								<para>a LinphoneEvent holding the context of the created subcription. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_decline_call">
					<return completetype="int" type="int">
						<description>
							<para>0 on success, -1 on failure </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>LinphoneCore object </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneCall *" name="call" type="LinphoneCall">
							<description>
								

								<para>The LinphoneCall to decline, must be in the IncomingReceived state </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneReason" name="reason" type="LinphoneReason">
							<description>
								

								<para>The reason for rejecting the call: LinphoneReasonDeclined or LinphoneReasonBusy </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Decline a pending incoming call, with a reason. 
							<description>
								<para>0 on success, -1 on failure </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_defer_call_update">
					<return completetype="int" type="int">
						<description>
							<para>
								0 if successful, -1 if the 
								<ref>linphone_core_defer_call_update()</ref>
								 was done outside a valid 
								<ref>LinphoneCallUpdatedByRemote</ref>
								 notification 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>LinphoneCore object </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneCall *" name="call" type="LinphoneCall">
							<description>
								

								<para>The call for which to defer the update </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							When receiving a 
							<ref>LinphoneCallUpdatedByRemote</ref>
							 state notification, prevent LinphoneCore from performing an automatic answer.
						</para>
						<para>
							When receiving a 
							<ref>LinphoneCallUpdatedByRemote</ref>
							 state notification (ie an incoming reINVITE), the default behaviour of LinphoneCore is defined by the &quot;defer_update_default&quot; option of the &quot;sip&quot; section of the config. If this option is 0 (the default) then the LinphoneCore automatically answers the reINIVTE with call parameters unchanged. However when for example when the remote party updated the call to propose a video stream, it can be useful to prompt the user before answering. This can be achieved by calling 
							<ref>linphone_core_defer_call_update()</ref>
							 during the call state notification, to deactivate the automatic answer that would just confirm the audio but reject the video. Then, when the user responds to dialog prompt, it becomes possible to call 
							<ref>linphone_core_accept_call_update()</ref>
							 to answer the reINVITE, with eventually video enabled in the LinphoneCallParams argument.
						</para>
						<para>
							The 
							<ref>LinphoneCallUpdatedByRemote</ref>
							 notification can also arrive when receiving an INVITE without SDP. In such case, an unchanged offer is made in the 200Ok, and when the ACK containing the SDP answer is received, 
							<ref>LinphoneCallUpdatedByRemote</ref>
							 is triggered to notify the application of possible changes in the media session. However in such case defering the update has no meaning since we just generating an offer.
						</para>
						<para>
							<description>
								<para>
									0 if successful, -1 if the 
									<ref>linphone_core_defer_call_update()</ref>
									 was done outside a valid 
									<ref>LinphoneCallUpdatedByRemote</ref>
									 notification 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_core_delete_chat_room">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									A 
									<ref>LinphoneCore</ref>
									 object 
								</para>
							</description>
							

						</argument>
						<argument completetype="LinphoneChatRoom *" name="cr" type="LinphoneChatRoom">
							<description>
								

								<para>
									A 
									<ref>LinphoneChatRoom</ref>
									 object 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Removes a chatroom including all message history from the LinphoneCore. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_destroy">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>LinphoneCore object</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Destroys a LinphoneCore </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_core_disable_chat">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									A 
									<ref>LinphoneCore</ref>
									 object 
								</para>
							</description>
							

						</argument>
						<argument completetype="LinphoneReason" name="deny_reason" type="LinphoneReason">
							<description>
								

								<para>the deny reason (#LinphoneReasonNone has no effect). </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Inconditionnaly disable incoming chat messages. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_core_enable_chat">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									A 
									<ref>LinphoneCore</ref>
									 object 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Enable reception of incoming chat messages. By default it is enabled but it can be disabled with 
							<ref>linphone_core_disable_chat()</ref>
							. 
						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_enable_payload_type">
					<return completetype="int" type="int">
						<description>
							<para>0 if successful, any other value otherwise. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									<ref>LinphoneCore</ref>
									 object. 
								</para>
							</description>
							

						</argument>
						<argument completetype="LinphonePayloadType *" name="pt" type="LinphonePayloadType">
							<description>
								

								<para>
									The 
									<ref>LinphonePayloadType</ref>
									 to enable or disable. It can be retrieved using 
									<ref>linphone_core_find_payload_type</ref>
									 
								</para>
							</description>
							

						</argument>
						<argument completetype="bool_t" name="enable" type="bool_t">
							<description>
								

								<para>TRUE to enable the payload type, FALSE to disable it. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Enable or disable the use of the specified payload type. 
							<description>
								<para>0 if successful, any other value otherwise. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_enable_video">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>The LinphoneCore object </para>
							</description>
							

						</argument>
						<argument completetype="bool_t" name="vcap_enabled" type="bool_t">
							<description>
								

								<para>indicates whether video capture is enabled </para>
							</description>
							

						</argument>
						<argument completetype="bool_t" name="display_enabled" type="bool_t">
							<description>
								

								<para>indicates whether video display should be shown</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Enables video globally.</para>
						<para>This function does not have any effect during calls. It just indicates LinphoneCore to initiate future calls with video or not. The two boolean parameters indicate in which direction video is enabled. Setting both to false disables video entirely.</para>
						<para/>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_enter_conference">
					<return completetype="int" type="int">
						<description>
							<para>0 if succeeded. Negative number if failed </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									<ref>LinphoneCore</ref>
									 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Join the local participant to the running conference 
							<description>
								<para>0 if succeeded. Negative number if failed </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_find_auth_info">
					<return completetype="const LinphoneAuthInfo *" type="LinphoneAuthInfo">
						<description>
							<para>
								a 
								<ref>LinphoneAuthInfo</ref>
								 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>the LinphoneCore </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="realm" type="char">
							<description>
								

								<para>the authentication 'realm' (optional) </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="username" type="char">
							<description>
								

								<para>the SIP username to be authenticated (mandatory) </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="sip_domain" type="char">
							<description>
								

								<para>the SIP domain name (optional) </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Find authentication info matching realm, username, domain criteria. First of all, (realm,username) pair are searched. If multiple results (which should not happen because realm are supposed to be unique), then domain is added to the search. 
							<description>
								<para>
									a 
									<ref>LinphoneAuthInfo</ref>
									 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_find_call_from_uri">
					<return completetype="LinphoneCall *" type="LinphoneCall">
						<description>
							<para>LinphoneCall or NULL is no match is found </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore"/>
						<argument completetype="const char *" name="uri" type="char">
							<description>
								

								<para>which should match call remote uri </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Search from the list of current calls if a remote address match uri</para>
						<para>
							<description>
								<para>LinphoneCall or NULL is no match is found </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_find_call_log_from_call_id">
					<return completetype="LinphoneCallLog *" type="LinphoneCallLog">
						<description>
							<para>{LinphoneCallLog} </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>LinphoneCore object </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="call_id" type="char">
							<description>
								

								<para>Call id of the call log to find </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Get the call log matching the call id, or NULL if can't be found. 
							<description>
								<para>{LinphoneCallLog} </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_core_find_friend">
					<return completetype="LinphoneFriend *" type="LinphoneFriend">
						<description>
							<para>
								The 
								<ref>LinphoneFriend</ref>
								 object corresponding to the given address. 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									<ref>LinphoneCore</ref>
									 object. 
								</para>
							</description>
							

						</argument>
						<argument completetype="const LinphoneAddress *" name="addr" type="LinphoneAddress">
							<description>
								

								<para>The address to use to search the friend. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Search a LinphoneFriend by its address. 
							<description>
								<para>
									The 
									<ref>LinphoneFriend</ref>
									 object corresponding to the given address. 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_find_payload_type">
					<return completetype="LinphonePayloadType *" type="LinphonePayloadType">
						<description>
							<para>Returns NULL if not found. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									<ref>LinphoneCore</ref>
									 object 
								</para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="type" type="char">
							<description>
								

								<para>payload mime type (I.E SPEEX, PCMU, VP8) </para>
							</description>
							

						</argument>
						<argument completetype="int" name="rate" type="int">
							<description>
								

								<para>
									can be 
									<ref>LINPHONE_FIND_PAYLOAD_IGNORE_RATE</ref>
									 
								</para>
							</description>
							

						</argument>
						<argument completetype="int" name="channels" type="int">
							<description>
								

								<para>
									number of channels, can be 
									<ref>LINPHONE_FIND_PAYLOAD_IGNORE_CHANNELS</ref>
									 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Get payload type from mime type and clock rate</para>
						<para>
							This function searches in audio and video codecs for the given payload type name and clockrate. 
							<description>
								<para>Returns NULL if not found. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_audio_port_range">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>LinphoneCore object </para>
							</description>
							

						</argument>
						<argument completetype="int *" name="min_port" type="int">
							<description>
								

								<para>The lower bound of the audio port range being used </para>
							</description>
							

						</argument>
						<argument completetype="int *" name="max_port" type="int">
							<description>
								

								<para>The upper bound of the audio port range being used </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Get the audio port range from which is randomly chosen the UDP port used for audio streaming. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_call_by_remote_address">
					<return completetype="LinphoneCall *" type="LinphoneCall">
						<description>
							<para>The call if it has been found, NULL otherwise </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>LinphoneCore object </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="remote_address" type="char">
							<description>
								

								<para>The remote address of the call that we want to get </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Get the call with the remote_address specified 
							<description>
								<para>The call if it has been found, NULL otherwise </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_call_by_remote_address2">
					<return completetype="LinphoneCall *" type="LinphoneCall">
						<description>
							<para>
								the 
								<ref>LinphoneCall</ref>
								 of the call if found 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore"/>
						<argument completetype="const LinphoneAddress *" name="remote_address" type="LinphoneAddress"/>
					</arguments>
					<detaileddescription>
						

						<para>
							Get the call with the remote_address specified 
							<description>
								<para>
									the 
									<ref>LinphoneCall</ref>
									 of the call if found 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_call_history_for_address">
					<return completetype="bctbx_list_t *" containedtype="LinphoneCallLog" type="bctbx_list_t">
						<description>
							<para>
								A list of 
								<ref>LinphoneCallLog</ref>
								 objects. 
								<bctbxlist>LinphoneCallLog</bctbxlist>
								  
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>LinphoneCore object </para>
							</description>
							

						</argument>
						<argument completetype="const LinphoneAddress *" name="addr" type="LinphoneAddress">
							<description>
								

								<para>LinphoneAddress object </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Get the list of call logs (past calls) that matches the given 
							<ref>LinphoneAddress</ref>
							. At the contrary of linphone_core_get_call_logs, it is your responsability to unref the logs and free this list once you are done using it. 
							<description>
								<para>
									A list of 
									<ref>LinphoneCallLog</ref>
									 objects. 
									<bctbxlist>LinphoneCallLog</bctbxlist>
									  
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_core_get_chat_room">
					<return completetype="LinphoneChatRoom *" type="LinphoneChatRoom">
						<description>
							<para>
								<ref>LinphoneChatRoom</ref>
								 where messaging can take place. 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>the linphone core </para>
							</description>
							

						</argument>
						<argument completetype="const LinphoneAddress *" name="addr" type="LinphoneAddress">
							<description>
								

								<para>a linphone address. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Get a chat room whose peer is the supplied address. If it does not exist yet, it will be created. No reference is transfered to the application. The LinphoneCore keeps a reference on the chat room. 
							<description>
								<para>
									<ref>LinphoneChatRoom</ref>
									 where messaging can take place. 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_core_get_chat_room_from_uri">
					<return completetype="LinphoneChatRoom *" type="LinphoneChatRoom">
						<description>
							<para>
								<ref>LinphoneChatRoom</ref>
								 where messaging can take place. 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									A 
									<ref>LinphoneCore</ref>
									 object 
								</para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="to" type="char">
							<description>
								

								<para>The destination address for messages. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Get a chat room for messaging from a sip uri like sip:
							<ulink url="mailto:joe@sip.linphone.org">joe@sip.linphone.org</ulink>
							. If it does not exist yet, it will be created. No reference is transfered to the application. The LinphoneCore keeps a reference on the chat room. 
							<description>
								<para>
									<ref>LinphoneChatRoom</ref>
									 where messaging can take place. 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_default_proxy">
					<return completetype="int" type="int">
						<description>
							<para>the default proxy configuration, that is the one used to determine the current identity. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore"/>
						<argument completetype="LinphoneProxyConfig * *" name="config" type="LinphoneProxyConfig"/>
					</arguments>
					<detaileddescription>
						

						<para>
							<description>
								<para>the default proxy configuration, that is the one used to determine the current identity. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_core_get_friend_by_address">
					<return completetype="LinphoneFriend *" type="LinphoneFriend">
						<description>
							<para>
								The 
								<ref>LinphoneFriend</ref>
								 object corresponding to the given address. 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									<ref>LinphoneCore</ref>
									 object. 
								</para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="addr" type="char">
							<description>
								

								<para>The address to use to search the friend. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Search a LinphoneFriend by its address. 
							<description>
								<para>
									The 
									<ref>LinphoneFriend</ref>
									 object corresponding to the given address. 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_core_get_friend_by_ref_key">
					<return completetype="LinphoneFriend *" type="LinphoneFriend">
						<description>
							<para>
								The 
								<ref>LinphoneFriend</ref>
								 object corresponding to the given reference key. 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									<ref>LinphoneCore</ref>
									 object. 
								</para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="key" type="char">
							<description>
								

								<para>The reference key to use to search the friend. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Search a LinphoneFriend by its reference key. 
							<description>
								<para>
									The 
									<ref>LinphoneFriend</ref>
									 object corresponding to the given reference key. 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_payload_type_bitrate">
					<return completetype="int" type="int">
						<description>
							<para>bitrate the IP bitrate in kbit/s, or -1 if an error occured. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									the 
									<ref>LinphoneCore</ref>
									 object 
								</para>
							</description>
							

						</argument>
						<argument completetype="const LinphonePayloadType *" name="pt" type="LinphonePayloadType">
							<description>
								

								<para>
									the 
									<ref>LinphonePayloadType</ref>
									 to modify. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Get the bitrate explicitely set with 
							<ref>linphone_core_set_payload_type_bitrate()</ref>
							. 
							<description>
								<para>bitrate the IP bitrate in kbit/s, or -1 if an error occured. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_payload_type_number">
					<return completetype="int" type="int"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore"/>
						<argument completetype="const PayloadType *" name="pt" type="PayloadType"/>
					</arguments>
					<detaileddescription>
						

						<para>Returns the payload type number assigned for this codec. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_sip_transports">
					<return completetype="int" type="int">
						<description>
							<para>0 </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>LinphoneCore object </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneSipTransports *" name="transports" type="LinphoneSipTransports">
							<description>
								

								<para>
									A 
									<ref>LinphoneSipTransports</ref>
									 structure that will receive the configured ports 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Retrieves the port configuration used for each transport (udp, tcp, tls). A zero value port for a given transport means the transport is not used. A value of LC_SIP_TRANSPORT_RANDOM (-1) means the port is to be chosen randomly by the system. 
							<description>
								<para>0 </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_sip_transports_used">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>LinphoneCore object </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneSipTransports *" name="tr" type="LinphoneSipTransports"/>
					</arguments>
					<detaileddescription>
						

						<para>
							Retrieves the real port number assigned for each sip transport (udp, tcp, tls). A zero value means that the transport is not activated. If LC_SIP_TRANSPORT_RANDOM was passed to 
							<ref>linphone_core_set_sip_transports()</ref>
							, the random port choosed by the system is returned. 
						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_text_port_range">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>LinphoneCore object </para>
							</description>
							

						</argument>
						<argument completetype="int *" name="min_port" type="int">
							<description>
								

								<para>The lower bound of the text port range being used </para>
							</description>
							

						</argument>
						<argument completetype="int *" name="max_port" type="int">
							<description>
								

								<para>The upper bound of the text port range being used </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Get the video port range from which is randomly chosen the UDP port used for text streaming. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_video_port_range">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>LinphoneCore object </para>
							</description>
							

						</argument>
						<argument completetype="int *" name="min_port" type="int">
							<description>
								

								<para>The lower bound of the video port range being used </para>
							</description>
							

						</argument>
						<argument completetype="int *" name="max_port" type="int">
							<description>
								

								<para>The upper bound of the video port range being used </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Get the video port range from which is randomly chosen the UDP port used for video streaming. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_in_call">
					<return completetype="bool_t" type="bool_t">
						<description>
							<para>A boolean value telling whether a call is currently running or not </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>LinphoneCore object </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Tells whether there is a call running. 
							<description>
								<para>A boolean value telling whether a call is currently running or not </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_interpret_url">
					<return completetype="LinphoneAddress *" type="LinphoneAddress"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore"/>
						<argument completetype="const char *" name="url" type="char"/>
					</arguments>
					<detaileddescription>
						

						<para>See linphone_proxy_config_normalize_sip_uri for documentation. Default proxy config is used to parse the address. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_invite">
					<return completetype="LinphoneCall *" type="LinphoneCall">
						<description>
							<para>a LinphoneCall object or NULL in case of failure </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>the LinphoneCore object </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="url" type="char">
							<description>
								

								<para>the destination of the call (sip address, or phone number). </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Initiates an outgoing call. The application doesn't own a reference to the returned LinphoneCall object. Use 
							<ref>linphone_call_ref()</ref>
							 to safely keep the 
							<ref>LinphoneCall</ref>
							 pointer valid within your application. 
							<description>
								<para>a LinphoneCall object or NULL in case of failure </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_invite_address">
					<return completetype="LinphoneCall *" type="LinphoneCall">
						<description>
							<para>A LinphoneCall object or NULL in case of failure </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>LinphoneCore object </para>
							</description>
							

						</argument>
						<argument completetype="const LinphoneAddress *" name="addr" type="LinphoneAddress">
							<description>
								

								<para>The destination of the call (sip address). </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Initiates an outgoing call given a destination LinphoneAddress The LinphoneAddress can be constructed directly using 
							<ref>linphone_address_new()</ref>
							, or created by 
							<ref>linphone_core_interpret_url()</ref>
							. The application doesn't own a reference to the returned LinphoneCall object. Use 
							<ref>linphone_call_ref()</ref>
							 to safely keep the LinphoneCall pointer valid within your application. 
							<description>
								<para>A LinphoneCall object or NULL in case of failure </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_invite_address_with_params">
					<return completetype="LinphoneCall *" type="LinphoneCall">
						<description>
							<para>A LinphoneCall object or NULL in case of failure </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>LinphoneCore object </para>
							</description>
							

						</argument>
						<argument completetype="const LinphoneAddress *" name="addr" type="LinphoneAddress">
							<description>
								

								<para>The destination of the call (sip address). </para>
							</description>
							

						</argument>
						<argument completetype="const LinphoneCallParams *" name="params" type="LinphoneCallParams">
							<description>
								

								<para>Call parameters </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Initiates an outgoing call given a destination LinphoneAddress The LinphoneAddress can be constructed directly using 
							<ref>linphone_address_new()</ref>
							, or created by 
							<ref>linphone_core_interpret_url()</ref>
							. The application doesn't own a reference to the returned LinphoneCall object. Use 
							<ref>linphone_call_ref()</ref>
							 to safely keep the LinphoneCall pointer valid within your application. 
							<description>
								<para>A LinphoneCall object or NULL in case of failure </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_invite_with_params">
					<return completetype="LinphoneCall *" type="LinphoneCall">
						<description>
							<para>A LinphoneCall object or NULL in case of failure </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>LinphoneCore object </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="url" type="char">
							<description>
								

								<para>The destination of the call (sip address, or phone number). </para>
							</description>
							

						</argument>
						<argument completetype="const LinphoneCallParams *" name="params" type="LinphoneCallParams"/>
					</arguments>
					<detaileddescription>
						

						<para>
							Initiates an outgoing call according to supplied call parameters The application doesn't own a reference to the returned LinphoneCall object. Use 
							<ref>linphone_call_ref()</ref>
							 to safely keep the LinphoneCall pointer valid within your application. 
							<description>
								<para>A LinphoneCall object or NULL in case of failure </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_iterate">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore"/>
					</arguments>
					<detaileddescription>
						

						<para>Main loop function. It is crucial that your application call it periodically.</para>
						<para>
							<ref>linphone_core_iterate()</ref>
							 performs various backgrounds tasks:
							<itemizedlist>
								

								<listitem>
									<para>receiving of SIP messages</para>
								</listitem>
								<listitem>
									<para>handles timers and timeout</para>
								</listitem>
								<listitem>
									<para>performs registration to proxies</para>
								</listitem>
								<listitem>
									<para>
										authentication retries The application MUST call this function periodically, in its main loop. Be careful that this function must be called from the same thread as other liblinphone methods. If it is not the case make sure all liblinphone calls are serialized with a mutex. For ICE to work properly it should be called every 20ms. 
										<parameterlist kind="param">
											<parameteritem>
												

												<parameternamelist>
													

													<parametername direction="in">lc</parametername>
													

												</parameternamelist>
												

												<parameterdescription>
													

													<para>LinphoneCore object </para>
												</parameterdescription>
												

											</parameteritem>
											

										</parameterlist>
										

									</para>
								</listitem>
							</itemizedlist>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_leave_conference">
					<return completetype="int" type="int">
						<description>
							<para>0 if succeeded. Negative number if failed </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									<ref>LinphoneCore</ref>
									 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Make the local participant leave the running conference 
							<description>
								<para>0 if succeeded. Negative number if failed </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_media_encryption_supported">
					<return completetype="bool_t" type="bool_t">
						<description>
							<para>whether a media encryption scheme is supported by the LinphoneCore engine </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>core </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneMediaEncryption" name="menc" type="LinphoneMediaEncryption">
							<description>
								

								<para>LinphoneMediaEncryption </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Check if a media encryption type is supported 
							<description>
								<para>whether a media encryption scheme is supported by the LinphoneCore engine </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_core_migrate_friends_from_rc_to_db">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>the linphone core </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Migrates the friends from the linphonerc to the database if not done yet</para>
						<para/>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_migrate_logs_from_rc_to_db">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>the linphone core </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Migrates the call logs from the linphonerc to the database if not done yet</para>
						<para/>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_migrate_to_multi_transport">
					<return completetype="int" type="int">
						<description>
							<para>1 if migration was done, 0 if not done because unnecessary or already done, -1 in case of error. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>the linphone core </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Migrate configuration so that all SIP transports are enabled. Versions of linphone &lt; 3.7 did not support using multiple SIP transport simultaneously. This function helps application to migrate the configuration so that all transports are enabled. Existing proxy configuration are added a transport parameter so that they continue using the unique transport that was set previously. This function must be used just after creating the core, before any call to 
							<ref>linphone_core_iterate()</ref>
							 
							<description>
								<para>1 if migration was done, 0 if not done because unnecessary or already done, -1 in case of error. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_core_notify_all_friends">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									<ref>LinphoneCore</ref>
									 object 
								</para>
							</description>
							

						</argument>
						<argument completetype="LinphonePresenceModel *" name="presence" type="LinphonePresenceModel">
							<description>
								

								<para>
									<ref>LinphonePresenceModel</ref>
									 to notify 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Notify all friends that have subscribed </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_pause_all_calls">
					<return completetype="int" type="int">
						<description>
							<para>0 </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>LinphoneCore object </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Pause all currently running calls. 
							<description>
								<para>0 </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_pause_call">
					<return completetype="int" type="int">
						<description>
							<para>0 on success, -1 on failure </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>LinphoneCore object </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneCall *" name="call" type="LinphoneCall">
							<description>
								

								<para>The call to pause </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Pauses the call. If a music file has been setup using 
							<ref>linphone_core_set_play_file()</ref>
							, this file will be played to the remote user. 
							<description>
								<para>0 on success, -1 on failure </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_payload_type_enabled">
					<return completetype="bool_t" type="bool_t">
						<description>
							<para>TRUE if the payload type is enabled, FALSE if disabled. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									<ref>LinphoneCore</ref>
									 object. 
								</para>
							</description>
							

						</argument>
						<argument completetype="const LinphonePayloadType *" name="pt" type="LinphonePayloadType">
							<description>
								

								<para>
									The 
									<ref>LinphonePayloadType</ref>
									 we want to know is enabled or not. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Tells whether the specified payload type is enabled. 
							<description>
								<para>TRUE if the payload type is enabled, FALSE if disabled. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_payload_type_is_vbr">
					<return completetype="bool_t" type="bool_t">
						<description>
							<para>TRUE if the payload type represents a VBR codec, FALSE if disabled. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									<ref>LinphoneCore</ref>
									 object. 
								</para>
							</description>
							

						</argument>
						<argument completetype="const LinphonePayloadType *" name="pt" type="LinphonePayloadType">
							<description>
								

								<para>
									The 
									<ref>LinphonePayloadType</ref>
									 we want to know 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Tells whether the specified payload type represents a variable bitrate codec. 
							<description>
								<para>TRUE if the payload type represents a VBR codec, FALSE if disabled. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_play_dtmf">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>LinphoneCore object </para>
							</description>
							

						</argument>
						<argument completetype="char" name="dtmf" type="char">
							<description>
								

								<para>DTMF to play ['0'..'16'] | '#' | '#' </para>
							</description>
							

						</argument>
						<argument completetype="int" name="duration_ms" type="int">
							<description>
								

								<para>
									Duration in ms, -1 means play until next further call to 
									<ref>linphone_core_stop_dtmf()</ref>
									 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Plays a dtmf sound to the local user. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_play_local">
					<return completetype="int" type="int">
						<description>
							<para>0 on success, -1 on error </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>LinphoneCore object </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="audiofile" type="char">
							<description>
								

								<para>The path to an audio file in wav PCM 16 bit format </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Plays an audio file to the local user. This function works at any time, during calls, or when no calls are running. It doesn't request the underlying audio system to support multiple playback streams. 
							<description>
								<para>0 on success, -1 on error </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/event.h" name="linphone_core_publish">
					<return completetype="LinphoneEvent *" type="LinphoneEvent">
						<description>
							<para>the LinphoneEvent holding the context of the publish. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									the 
									<ref>LinphoneCore</ref>
									 
								</para>
							</description>
							

						</argument>
						<argument completetype="const LinphoneAddress *" name="resource" type="LinphoneAddress">
							<description>
								

								<para>the resource uri for the event </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="event" type="char">
							<description>
								

								<para>the event name </para>
							</description>
							

						</argument>
						<argument completetype="int" name="expires" type="int">
							<description>
								

								<para>the lifetime of event being published, -1 if no associated duration, in which case it will not be refreshed. </para>
							</description>
							

						</argument>
						<argument completetype="const LinphoneContent *" name="body" type="LinphoneContent">
							<description>
								

								<para>the actual published data </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Publish an event state. This first create a LinphoneEvent with 
							<ref>linphone_core_create_publish()</ref>
							 and calls 
							<ref>linphone_event_send_publish()</ref>
							 to actually send it. After expiry, the publication is refreshed unless it is terminated before. 
							<description>
								<para>the LinphoneEvent holding the context of the publish. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_redirect_call">
					<return completetype="int" type="int">
						<description>
							<para>0 if successful, -1 on error. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									<ref>LinphoneCore</ref>
									 object 
								</para>
							</description>
							

						</argument>
						<argument completetype="LinphoneCall *" name="call" type="LinphoneCall">
							<description>
								

								<para>
									The 
									<ref>LinphoneCall</ref>
									 to redirect 
								</para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="redirect_uri" type="char">
							<description>
								

								<para>The URI to redirect the call to </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Redirect the specified call to the given redirect URI. 
							<description>
								<para>0 if successful, -1 on error. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_ref">
					<return completetype="LinphoneCore *" type="LinphoneCore">
						<description>
							<para>
								A pointer on the 
								<ref>LinphoneCore</ref>
								 passed as parameter. 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									The 
									<ref>LinphoneCore</ref>
									 which the ref counter is to be incremented. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Increment the reference counter of a 
							<ref>LinphoneCore</ref>
							 object. 
							<description>
								<para>
									A pointer on the 
									<ref>LinphoneCore</ref>
									 passed as parameter. 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_refresh_registers">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore"/>
					</arguments>
					<detaileddescription>
						

						<para>force registration refresh to be initiated upon next iterate </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_core_reject_subscriber">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									<ref>LinphoneCore</ref>
									 object 
								</para>
							</description>
							

						</argument>
						<argument completetype="LinphoneFriend *" name="lf" type="LinphoneFriend">
							<description>
								

								<para>
									<ref>LinphoneFriend</ref>
									 to add 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Black list a friend. same as 
							<ref>linphone_friend_set_inc_subscribe_policy()</ref>
							 with 
							<ref>LinphoneSPDeny</ref>
							 policy; 
						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_reload_ms_plugins">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									<ref>LinphoneCore</ref>
									 object. 
								</para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="path" type="char">
							<description>
								

								<para>the path from where plugins are to be loaded, pass NULL to use default (compile-time determined) plugin directory. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Reload mediastreamer2 plugins from specified directory. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_reload_sound_devices">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									<ref>LinphoneCore</ref>
									 object. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Update detection of sound devices.</para>
						<para>Use this function when the application is notified of USB plug events, so that list of available hardwares for sound playback and capture is updated. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_reload_video_devices">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									<ref>LinphoneCore</ref>
									 object. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Update detection of camera devices.</para>
						<para>Use this function when the application is notified of USB plug events, so that list of available hardwares for video capture is updated. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_remove_auth_info">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									The 
									<ref>LinphoneCore</ref>
									 from which the 
									<ref>LinphoneAuthInfo</ref>
									 will be removed. 
								</para>
							</description>
							

						</argument>
						<argument completetype="const LinphoneAuthInfo *" name="info" type="LinphoneAuthInfo">
							<description>
								

								<para>
									The 
									<ref>LinphoneAuthInfo</ref>
									 to remove. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Removes an authentication information object. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_remove_call_log">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									<ref>LinphoneCore</ref>
									 object 
								</para>
							</description>
							

						</argument>
						<argument completetype="LinphoneCallLog *" name="call_log" type="LinphoneCallLog">
							<description>
								

								<para>
									<ref>LinphoneCallLog</ref>
									 object to remove. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Remove a specific call log from call history list. This function destroys the call log object. It must not be accessed anymore by the application after calling this function. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_remove_callbacks">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									The 
									<ref>LinphoneCore</ref>
									 
								</para>
							</description>
							

						</argument>
						<argument completetype="const LinphoneCoreCbs *" name="cbs" type="LinphoneCoreCbs">
							<description>
								

								<para>
									The pointer on the 
									<ref>LinphoneCoreCbs</ref>
									 to remove. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Remove a listener from a 
							<ref>LinphoneCore</ref>
							 
						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_core_remove_friend">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									<ref>LinphoneCore</ref>
									 object 
								</para>
							</description>
							

						</argument>
						<argument completetype="LinphoneFriend *" name="fr" type="LinphoneFriend">
							<description>
								

								<para>
									<ref>LinphoneFriend</ref>
									 to remove 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Removes a friend from the buddy list </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friendlist.h" name="linphone_core_remove_friend_list">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>LinphoneCore object </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneFriendList *" name="list" type="LinphoneFriendList">
							<description>
								

								<para>LinphoneFriendList object </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Removes a friend list. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_remove_from_conference">
					<return completetype="int" type="int">
						<description>
							<para>0 if successful, -1 otherwise. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>the linphone core </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneCall *" name="call" type="LinphoneCall">
							<description>
								

								<para>a call that has been previously merged into the conference.</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Remove a call from the conference. </para>
						<para>
							In other words, unless 
							<ref>linphone_core_leave_conference()</ref>
							 is explicitly called, the last remote participant of a conference is automatically put in a simple call in running state.
						</para>
						<para>
							<description>
								<para>0 if successful, -1 otherwise. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_remove_listener">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>object </para>
							</description>
							

						</argument>
						<argument completetype="const LinphoneCoreVTable *" name="vtable" type="LinphoneCoreVTable">
							<description>
								

								<para>a LinphoneCoreVTable structure holding your application callbacks. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>remove a listener registred by linphone_core_add_listener. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_remove_proxy_config">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore"/>
						<argument completetype="LinphoneProxyConfig *" name="config" type="LinphoneProxyConfig"/>
					</arguments>
					<detaileddescription>
						

						<para>Removes a proxy configuration.</para>
						<para>LinphoneCore will then automatically unregister and place the proxy configuration on a deleted list. For that reason, a removed proxy does NOT need to be freed. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_remove_supported_tag">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="core" type="LinphoneCore"/>
						<argument completetype="const char *" name="tag" type="char">
							<description>
								

								<para>The tag to remove</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Remove a supported tag. 
							<see>linphone_core_add_supported_tag() </see>
						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_reset_missed_calls_count">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									<ref>LinphoneCore</ref>
									 object. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Reset the counter of missed calls. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_resume_call">
					<return completetype="int" type="int">
						<description>
							<para>0 on success, -1 on failure </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>LinphoneCore object </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneCall *" name="call" type="LinphoneCall">
							<description>
								

								<para>The call to resume </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Resumes a call. 
							<description>
								<para>0 on success, -1 on failure </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_send_dtmf">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>The LinphoneCore object </para>
							</description>
							

						</argument>
						<argument completetype="char" name="dtmf" type="char">
							<description>
								

								<para>The dtmf name specified as a char, such as '0', '#' etc... </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Send the specified dtmf.</para>
						<para/>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_audio_port_range">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>LinphoneCore object </para>
							</description>
							

						</argument>
						<argument completetype="int" name="min_port" type="int">
							<description>
								

								<para>The lower bound of the audio port range to use </para>
							</description>
							

						</argument>
						<argument completetype="int" name="max_port" type="int">
							<description>
								

								<para>The upper bound of the audio port range to use </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Sets the UDP port range from which to randomly select the port used for audio streaming. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_call_error_tone">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>the core </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneReason" name="reason" type="LinphoneReason">
							<description>
								

								<para>
									the 
									<ref>LinphoneReason</ref>
									 representing the failure error code. 
								</para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="audiofile" type="char">
							<description>
								

								<para>a wav file to be played when such call failure happens. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Assign an audio file to be played locally upon call failure, for a given reason. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_payload_type_bitrate">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									the 
									<ref>LinphoneCore</ref>
									 object 
								</para>
							</description>
							

						</argument>
						<argument completetype="LinphonePayloadType *" name="pt" type="LinphonePayloadType">
							<description>
								

								<para>
									the 
									<ref>LinphonePayloadType</ref>
									 to modify. 
								</para>
							</description>
							

						</argument>
						<argument completetype="int" name="bitrate" type="int">
							<description>
								

								<para>the IP bitrate in kbit/s. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Set an explicit bitrate (IP bitrate, not codec bitrate) for a given codec, in kbit/s. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_payload_type_number">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore"/>
						<argument completetype="PayloadType *" name="pt" type="PayloadType"/>
						<argument completetype="int" name="number" type="int"/>
					</arguments>
					<detaileddescription>
						

						<para>Force a number for a payload type. The LinphoneCore does payload type number assignment automatically. THis function is to be used mainly for tests, in order to override the automatic assignment mechanism. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_core_set_presence_info">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									<ref>LinphoneCore</ref>
									 object 
								</para>
							</description>
							

						</argument>
						<argument completetype="int" name="minutes_away" type="int">
							<description>
								

								<para>how long in away </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="alternative_contact" type="char">
							<description>
								

								<para>
									sip uri used to redirect call in state 
									<ref>LinphoneStatusMoved</ref>
									 
								</para>
							</description>
							

						</argument>
						<argument completetype="LinphoneOnlineStatus" name="os" type="LinphoneOnlineStatus">
							<description>
								

								<para>
									<ref>LinphoneOnlineStatus</ref>
									 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Set my presence status </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_text_port_range">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>LinphoneCore object </para>
							</description>
							

						</argument>
						<argument completetype="int" name="min_port" type="int">
							<description>
								

								<para>The lower bound of the text port range to use </para>
							</description>
							

						</argument>
						<argument completetype="int" name="max_port" type="int">
							<description>
								

								<para>The upper bound of the text port range to use </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Sets the UDP port range from which to randomly select the port used for text streaming. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_user_agent">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>LinphoneCore object </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="ua_name" type="char">
							<description>
								

								<para>The user agent name </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="version" type="char">
							<description>
								

								<para>The user agent version </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Sets the user agent string used in SIP messages, ideally called just after 
							<ref>linphone_core_new()</ref>
							 or linphone_core_init(). 
						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_video_port_range">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>LinphoneCore object </para>
							</description>
							

						</argument>
						<argument completetype="int" name="min_port" type="int">
							<description>
								

								<para>The lower bound of the video port range to use </para>
							</description>
							

						</argument>
						<argument completetype="int" name="max_port" type="int">
							<description>
								

								<para>The upper bound of the video port range to use </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Sets the UDP port range from which to randomly select the port used for video streaming. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_sound_device_can_capture">
					<return completetype="bool_t" type="bool_t">
						<description>
							<para>A boolean value telling whether the specified sound device can capture sound </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>LinphoneCore object </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="device" type="char">
							<description>
								

								<para>
									the device name as returned by 
									<ref>linphone_core_get_sound_devices()</ref>
									 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Tells whether a specified sound device can capture sound. 
							<description>
								<para>A boolean value telling whether the specified sound device can capture sound </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_sound_device_can_playback">
					<return completetype="bool_t" type="bool_t">
						<description>
							<para>A boolean value telling whether the specified sound device can play sound </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>LinphoneCore object </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="device" type="char">
							<description>
								

								<para>
									the device name as returned by 
									<ref>linphone_core_get_sound_devices()</ref>
									 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Tells whether a specified sound device can play sound. 
							<description>
								<para>A boolean value telling whether the specified sound device can play sound </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_sound_resources_locked">
					<return completetype="bool_t" type="bool_t">
						<description>
							<para>A boolean value telling whether a call will need the sound resources in near future </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>LinphoneCore object </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Check if a call will need the sound resources in near future (typically an outgoing call that is awaiting response). In liblinphone, it is not possible to have two independant calls using sound device or camera at the same time. In order to prevent this situation, an application can use 
							<ref>linphone_core_sound_resources_locked()</ref>
							 to know whether it is possible at a given time to start a new outgoing call. When the function returns TRUE, an application should not allow the user to start an outgoing call. 
							<description>
								<para>A boolean value telling whether a call will need the sound resources in near future </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_start_conference_recording">
					<return completetype="int" type="int">
						<description>
							<para>0 if succeeded. Negative number if failed </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									<ref>LinphoneCore</ref>
									 
								</para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="path" type="char">
							<description>
								

								<para>Path to the file where the recording will be written </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Start recording the running conference 
							<description>
								<para>0 if succeeded. Negative number if failed </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core_utils.h" name="linphone_core_start_dtmf_stream">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore"/>
					</arguments>
					<detaileddescription>
						

						<para>
							Special function to warm up dtmf feeback stream. 
							<ref>linphone_core_stop_dtmf_stream</ref>
							 must() be called before entering FG mode 
						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_stop_conference_recording">
					<return completetype="int" type="int">
						<description>
							<para>0 if succeeded. Negative number if failed </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									<ref>LinphoneCore</ref>
									 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Stop recording the running conference 
							<description>
								<para>0 if succeeded. Negative number if failed </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_stop_dtmf">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>LinphoneCore object </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Stops playing a dtmf started by 
							<ref>linphone_core_play_dtmf()</ref>
							. 
						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core_utils.h" name="linphone_core_stop_dtmf_stream">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore"/>
					</arguments>
					<detaileddescription>
						

						<para>Special function to stop dtmf feed back function. Must be called before entering BG mode </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_stop_ringing">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>LinphoneCore object </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Whenever the liblinphone is playing a ring to advertise an incoming call or ringback of an outgoing call, this function stops the ringing. Typical use is to stop ringing when the user requests to ignore the call. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/event.h" name="linphone_core_subscribe">
					<return completetype="LinphoneEvent *" type="LinphoneEvent">
						<description>
							<para>a LinphoneEvent holding the context of the created subcription. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									the 
									<ref>LinphoneCore</ref>
									 
								</para>
							</description>
							

						</argument>
						<argument completetype="const LinphoneAddress *" name="resource" type="LinphoneAddress">
							<description>
								

								<para>the destination resource </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="event" type="char">
							<description>
								

								<para>the event name </para>
							</description>
							

						</argument>
						<argument completetype="int" name="expires" type="int">
							<description>
								

								<para>the whished duration of the subscription </para>
							</description>
							

						</argument>
						<argument completetype="const LinphoneContent *" name="body" type="LinphoneContent">
							<description>
								

								<para>an optional body, may be NULL. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Create an outgoing subscription, specifying the destination resource, the event name, and an optional content body. If accepted, the subscription runs for a finite period, but is automatically renewed if not terminated before. 
							<description>
								<para>a LinphoneEvent holding the context of the created subcription. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_take_preview_snapshot">
					<return completetype="int" type="int">
						<description>
							<para>0 if successfull, -1 otherwise (typically if jpeg format is not supported). </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>the linphone core </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="file" type="char">
							<description>
								

								<para>a path where to write the jpeg content. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Take a photo of currently from capture device and write it into a jpeg file. Note that the snapshot is asynchronous, an application shall not assume that the file is created when the function returns.</para>
						<para>
							<description>
								<para>0 if successfull, -1 otherwise (typically if jpeg format is not supported). </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_terminate_all_calls">
					<return completetype="int" type="int">
						<description>
							<para>0 </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>LinphoneCore object </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Terminates all the calls. 
							<description>
								<para>0 </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_terminate_call">
					<return completetype="int" type="int">
						<description>
							<para>0 on success, -1 on failure </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>LinphoneCore object </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneCall *" name="call" type="LinphoneCall">
							<description>
								

								<para>The LinphoneCall object representing the call to be terminated </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Terminates a call. 
							<description>
								<para>0 on success, -1 on failure </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_terminate_conference">
					<return completetype="int" type="int">
						<description>
							<para>0 if succeeded. Negative number if failed </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									<ref>LinphoneCore</ref>
									 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Terminate the running conference. If it is a local conference, all calls inside it will become back separate calls and will be put in 
							<ref>LinphoneCallPaused</ref>
							 state. If it is a conference involving a focus server, all calls inside the conference will be terminated. 
							<description>
								<para>0 if succeeded. Negative number if failed </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_transfer_call">
					<return completetype="int" type="int">
						<description>
							<para>0 on success, -1 on failure </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>LinphoneCore object </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneCall *" name="call" type="LinphoneCall">
							<description>
								

								<para>The call to be transfered </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="refer_to" type="char">
							<description>
								

								<para>The destination the call is to be refered to </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Performs a simple call transfer to the specified destination. The remote endpoint is expected to issue a new call to the specified destination. The current call remains active and thus can be later paused or terminated. It is possible to follow the progress of the transfer provided that transferee sends notification about it. In this case, the transfer_state_changed callback of the 
							<ref>LinphoneCoreVTable</ref>
							 is invoked to notify of the state of the new call at the other party. The notified states are 
							<ref>LinphoneCallOutgoingInit</ref>
							 , 
							<ref>LinphoneCallOutgoingProgress</ref>
							, 
							<ref>LinphoneCallOutgoingRinging</ref>
							 and 
							<ref>LinphoneCallConnected</ref>
							. 
							<description>
								<para>0 on success, -1 on failure </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_transfer_call_to_another">
					<return completetype="int" type="int">
						<description>
							<para>0 on success, -1 on failure </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>LinphoneCore object </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneCall *" name="call" type="LinphoneCall">
							<description>
								

								<para>A running call you want to transfer </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneCall *" name="dest" type="LinphoneCall">
							<description>
								

								<para>A running call whose remote person will receive the transfer </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Transfers a call to destination of another running call. This is used for &quot;attended transfer&quot; scenarios. The transfered call is supposed to be in paused state, so that it is able to accept the transfer immediately. The destination call is a call previously established to introduce the transfered person. This method will send a transfer request to the transfered person. The phone of the transfered is then expected to automatically call to the destination of the transfer. The receiver of the transfer will then automatically close the call with us (the 'dest' call). It is possible to follow the progress of the transfer provided that transferee sends notification about it. In this case, the transfer_state_changed callback of the 
							<ref>LinphoneCoreVTable</ref>
							 is invoked to notify of the state of the new call at the other party. The notified states are 
							<ref>LinphoneCallOutgoingInit</ref>
							 , 
							<ref>LinphoneCallOutgoingProgress</ref>
							, 
							<ref>LinphoneCallOutgoingRinging</ref>
							 and 
							<ref>LinphoneCallConnected</ref>
							. 
							<description>
								<para>0 on success, -1 on failure </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_unref">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									The 
									<ref>LinphoneCore</ref>
									 which the reference counter is to be decreased. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Decrement the ref counter of a 
							<ref>LinphoneCore</ref>
							 object and destroy it if the counter reach 0. 
						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_update_call">
					<return completetype="int" type="int"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore"/>
						<argument completetype="LinphoneCall *" name="call" type="LinphoneCall"/>
						<argument completetype="const LinphoneCallParams *" name="params" type="LinphoneCallParams"/>
					</arguments>
					<detaileddescription>
						

						<para>
							Updates a running call according to supplied call parameters or parameters changed in the LinphoneCore. In this version this is limited to the following use cases:
							<itemizedlist>
								

								<listitem>
									<para>
										setting up/down the video stream according to the video parameter of the LinphoneCallParams (see 
										<ref>linphone_call_params_enable_video()</ref>
										 ).
									</para>
								</listitem>
								<listitem>
									<para>
										changing the size of the transmitted video after calling 
										<ref>linphone_core_set_preferred_video_size()</ref>
										 In case no changes are requested through the LinphoneCallParams argument, then this argument can be omitted and set to NULL. 
										<parameterlist kind="param">
											<parameteritem>
												

												<parameternamelist>
													

													<parametername direction="in">lc</parametername>
													

												</parameternamelist>
												

												<parameterdescription>
													

													<para>LinphoneCore object </para>
												</parameterdescription>
												

											</parameteritem>
											

											<parameteritem>
												

												<parameternamelist>
													

													<parametername direction="in">call</parametername>
													

												</parameternamelist>
												

												<parameterdescription>
													

													<para>The call to be updated </para>
												</parameterdescription>
												

											</parameteritem>
											

											<parameteritem>
												

												<parameternamelist>
													

													<parametername direction="in">params</parametername>
													

												</parameternamelist>
												

												<parameterdescription>
													

													<para>The new call parameters to use (may be NULL) </para>
												</parameterdescription>
												

											</parameteritem>
											

										</parameterlist>
										

										<simplesect kind="return">
											<para>0 if successful, -1 otherwise. </para>
										</simplesect>
										

									</para>
								</listitem>
							</itemizedlist>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_upload_log_collection">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="core" type="LinphoneCore">
							<description>
								

								<para>LinphoneCore object </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Upload the log collection to the configured server url. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_use_preview_window">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									<ref>LinphoneCore</ref>
									 object. 
								</para>
							</description>
							

						</argument>
						<argument completetype="bool_t" name="yesno" type="bool_t">
							<description>
								

								<para>TRUE to use a separate window, FALSE to insert the preview in the remote video window. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Tells the core to use a separate window for local camera preview video, instead of inserting local view within the remote video window. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_verify_server_certificates">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>LinphoneCore object </para>
							</description>
							

						</argument>
						<argument completetype="bool_t" name="yesno" type="bool_t">
							<description>
								

								<para>A boolean value telling whether the tls server certificate must be verified </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Specify whether the tls server certificate must be verified when connecting to a SIP/TLS server. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_verify_server_cn">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>LinphoneCore object </para>
							</description>
							

						</argument>
						<argument completetype="bool_t" name="yesno" type="bool_t">
							<description>
								

								<para>A boolean value telling whether the tls server certificate common name must be verified </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Specify whether the tls server certificate common name must be verified when connecting to a SIP/TLS server. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
			</instancemethods>
			<properties>
				<property name="adaptive_rate_algorithm">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_adaptive_rate_algorithm">
						<return completetype="const char *" type="char"/>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore"/>
						</arguments>
						<detaileddescription>
							

							<para>Returns which adaptive rate algorithm is currently configured for future calls.</para>
							<para>
								See 
								<ref>linphone_core_set_adaptive_rate_algorithm()</ref>
								. 
							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_adaptive_rate_algorithm">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore"/>
							<argument completetype="const char *" name="algorithm" type="char"/>
						</arguments>
						<detaileddescription>
							

							<para>Sets adaptive rate algorithm. It will be used for each new calls starting from now. Calls already started will not be updated. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="adaptive_rate_control_enabled">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_adaptive_rate_control_enabled">
						<return completetype="bool_t" type="bool_t"/>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore"/>
						</arguments>
						<detaileddescription>
							

							<para>Returns whether adaptive rate control is enabled.</para>
							<para>
								See 
								<ref>linphone_core_enable_adaptive_rate_control()</ref>
								. 
							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_enable_adaptive_rate_control">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore"/>
							<argument completetype="bool_t" name="enabled" type="bool_t"/>
						</arguments>
						<detaileddescription>
							

							<para>Enable adaptive rate control.</para>
							<para>Adaptive rate control consists in using RTCP feedback provided information to dynamically control the output bitrate of the audio and video encoders, so that we can adapt to the network conditions and available bandwidth. Control of the audio encoder is done in case of audio-only call, and control of the video encoder is done for audio &amp; video calls. Adaptive rate control feature is enabled by default. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="audio_adaptive_jittcomp_enabled">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_audio_adaptive_jittcomp_enabled">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>TRUE if the audio adaptive jitter compensation is enabled, FALSE otherwise. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 object 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Tells whether the audio adaptive jitter compensation is enabled. 
								<description>
									<para>TRUE if the audio adaptive jitter compensation is enabled, FALSE otherwise. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_enable_audio_adaptive_jittcomp">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 object 
									</para>
								</description>
								

							</argument>
							<argument completetype="bool_t" name="enable" type="bool_t">
								<description>
									

									<para>TRUE to enable the audio adaptive jitter compensation, FALSE to disable it. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Enable or disable the audio adaptive jitter compensation. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="audio_codecs">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_audio_codecs">
						<return completetype="const bctbx_list_t *" containedtype="PayloadType" type="bctbx_list_t">
							<description>
								<para>
									A list of PayloadType objects. 
									<bctbxlist>PayloadType</bctbxlist>
									 
								</para>
							</description>
							
This list is unmodifiable. The -&gt;data field of the bctbx_list_t points a PayloadType structure holding the codec information. It is possible to make copy of the list with bctbx_list_copy() in order to modify it (such as the order of codecs). 
						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>The LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Returns the list of available audio codecs. 
								<description>
									<para>
										A list of PayloadType objects. 
										<bctbxlist>PayloadType</bctbxlist>
										 
									</para>
								</description>
								
This list is unmodifiable. The -&gt;data field of the bctbx_list_t points a PayloadType structure holding the codec information. It is possible to make copy of the list with bctbx_list_copy() in order to modify it (such as the order of codecs). 
							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_audio_codecs">
						<return completetype="int" type="int">
							<description>
								<para>0 The list is taken by the LinphoneCore thus the application should not free it. This list is made of struct PayloadType describing the codec parameters. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>The LinphoneCore object </para>
								</description>
								

							</argument>
							<argument completetype="bctbx_list_t *" containedtype="PayloadType" name="codecs" type="bctbx_list_t">
								<description>
									

									<para>
										A list of PayloadType objects. 
										<bctbxlist>PayloadType</bctbxlist>
										  
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Sets the list of audio codecs. 
								<description>
									<para>0 The list is taken by the LinphoneCore thus the application should not free it. This list is made of struct PayloadType describing the codec parameters. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="audio_dscp">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_audio_dscp">
						<return completetype="int" type="int">
							<description>
								<para>The current DSCP value </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the DSCP field for outgoing audio streams. The DSCP defines the quality of service in IP packets. 
								<description>
									<para>The current DSCP value </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_audio_dscp">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
							<argument completetype="int" name="dscp" type="int">
								<description>
									

									<para>The DSCP value to set </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the DSCP field for outgoing audio streams. The DSCP defines the quality of service in IP packets. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="audio_jittcomp">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_audio_jittcomp">
						<return completetype="int" type="int">
							<description>
								<para>The nominal audio jitter buffer size in milliseconds </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Returns the nominal audio jitter buffer size in milliseconds. 
								<description>
									<para>The nominal audio jitter buffer size in milliseconds </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_audio_jittcomp">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore"/>
							<argument completetype="int" name="milliseconds" type="int"/>
						</arguments>
						<detaileddescription>
							

							<para>Sets the nominal audio jitter buffer size in milliseconds. The value takes effect immediately for all running and pending calls, if any. A value of 0 disables the jitter buffer. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="audio_multicast_addr">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_audio_multicast_addr">
						<return completetype="const char *" type="char">
							<description>
								<para>an ipv4/6 multicast address or default value </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="core" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Use to get multicast address to be used for audio stream. 
								<description>
									<para>an ipv4/6 multicast address or default value </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_audio_multicast_addr">
						<return completetype="int" type="int">
							<description>
								<para>0 in case of success </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="core" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 
									</para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="ip" type="char">
								<description>
									

									<para>an ipv4/6 multicast address </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Use to set multicast address to be used for audio stream. 
								<description>
									<para>0 in case of success </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="audio_multicast_enabled">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_audio_multicast_enabled">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>
									true if subsequent calls will propose multicast ip set by 
									<ref>linphone_core_set_audio_multicast_addr</ref>
									 
								</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="core" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Use to get multicast state of audio stream. 
								<description>
									<para>
										true if subsequent calls will propose multicast ip set by 
										<ref>linphone_core_set_audio_multicast_addr</ref>
										 
									</para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_enable_audio_multicast">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="core" type="LinphoneCore"/>
							<argument completetype="bool_t" name="yesno" type="bool_t"/>
						</arguments>
						<detaileddescription>
							

							<para>
								Use to enable multicast rtp for audio stream.
								<itemizedlist>
									

									<listitem>
										<para>
											If enabled, outgoing calls put a multicast address from 
											<ref>linphone_core_get_video_multicast_addr</ref>
											 into audio cline. In case of outgoing call audio stream is sent to this multicast address. 
											<linebreak/>
											
 For incoming calls behavior is unchanged. 
											<parameterlist kind="param">
												<parameteritem>
													

													<parameternamelist>
														

														<parametername>core</parametername>
														

													</parameternamelist>
													

													<parameterdescription>
														

														<para>
															<ref>LinphoneCore</ref>
															 
														</para>
													</parameterdescription>
													

												</parameteritem>
												

												<parameteritem>
													

													<parameternamelist>
														

														<parametername>yesno</parametername>
														

													</parameternamelist>
													

													<parameterdescription>
														

														<para>
															if yes, subsequent calls will propose multicast ip set by 
															<ref>linphone_core_set_audio_multicast_addr</ref>
															 
														</para>
													</parameterdescription>
													

												</parameteritem>
												

											</parameterlist>
											

										</para>
									</listitem>
								</itemizedlist>
								

							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="audio_multicast_ttl">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_audio_multicast_ttl">
						<return completetype="int" type="int">
							<description>
								<para>a time to leave value </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="core" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Use to get multicast ttl to be used for audio stream. 
								<description>
									<para>a time to leave value </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_audio_multicast_ttl">
						<return completetype="int" type="int">
							<description>
								<para>0 in case of success </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="core" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 
									</para>
								</description>
								

							</argument>
							<argument completetype="int" name="ttl" type="int">
								<description>
									

									<para>value or -1 if not used. [0..255] default value is 1 </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Use to set multicast ttl to be used for audio stream. 
								<description>
									<para>0 in case of success </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="audio_port">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_audio_port">
						<return completetype="int" type="int">
							<description>
								<para>The UDP port used for audio streaming </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the UDP port used for audio streaming. 
								<description>
									<para>The UDP port used for audio streaming </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_audio_port">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
							<argument completetype="int" name="port" type="int">
								<description>
									

									<para>The UDP port to use for audio streaming </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Sets the UDP port used for audio streaming. A value of -1 will request the system to allocate the local port randomly. This is recommended in order to avoid firewall warnings. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="auth_info_list">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_auth_info_list">
						<return completetype="const bctbx_list_t *" containedtype="LinphoneAuthInfo" type="bctbx_list_t">
							<description>
								<para>
									A list of 
									<ref>LinphoneAuthInfo</ref>
									 objects. 
									<bctbxlist>LinphoneAuthInfo</bctbxlist>
									  
								</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>The LinphoneCore object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Returns an unmodifiable list of currently entered 
								<ref>LinphoneAuthInfo</ref>
								. 
								<description>
									<para>
										A list of 
										<ref>LinphoneAuthInfo</ref>
										 objects. 
										<bctbxlist>LinphoneAuthInfo</bctbxlist>
										  
									</para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="avpf_mode">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_avpf_mode">
						<return completetype="LinphoneAVPFMode" type="LinphoneAVPFMode">
							<description>
								<para>The current AVPF mode </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Return AVPF enablement. See 
								<ref>linphone_core_set_avpf_mode()</ref>
								 . 
								<description>
									<para>The current AVPF mode </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_avpf_mode">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
							<argument completetype="LinphoneAVPFMode" name="mode" type="LinphoneAVPFMode">
								<description>
									

									<para>The AVPF mode to use. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Enable RTCP feedback (also known as RTP/AVPF profile). Setting LinphoneAVPFDefault is equivalent to LinphoneAVPFDisabled. This setting can be overriden per LinphoneProxyConfig with 
								<ref>linphone_proxy_config_set_avpf_mode()</ref>
								. The value set here is used for calls placed or received out of any proxy configured, or if the proxy config is configured with LinphoneAVPFDefault. 
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="avpf_rr_interval">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_avpf_rr_interval">
						<return completetype="int" type="int">
							<description>
								<para>The current AVPF report interval in seconds </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Return the avpf report interval in seconds. 
								<description>
									<para>The current AVPF report interval in seconds </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_avpf_rr_interval">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
							<argument completetype="int" name="interval" type="int">
								<description>
									

									<para>The report interval in seconds </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Set the avpf report interval in seconds. This value can be overriden by the proxy config using 
								<ref>linphone_proxy_config_set_avpf_rr_interval()</ref>
								. 
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="call_logs">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_call_logs">
						<return completetype="const bctbx_list_t *" containedtype="LinphoneCallLog" type="bctbx_list_t">
							<description>
								<para>
									A list of 
									<ref>LinphoneCallLog</ref>
									 objects. 
									<bctbxlist>LinphoneCallLog</bctbxlist>
									  
								</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the list of call logs (past calls). 
								<description>
									<para>
										A list of 
										<ref>LinphoneCallLog</ref>
										 objects. 
										<bctbxlist>LinphoneCallLog</bctbxlist>
										  
									</para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="call_logs_database_path">
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_call_logs_database_path">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>the linphone core </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="path" type="char">
								<description>
									

									<para>filesystem path </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Sets the database filename where call logs will be stored. If the file does not exist, it will be created.</para>
							<para/>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="calls">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_calls">
						<return completetype="const bctbx_list_t *" containedtype="LinphoneCall" type="bctbx_list_t">
							<description>
								<para>
									A list of 
									<ref>LinphoneCall</ref>
									 objects. 
									<bctbxlist>LinphoneCall</bctbxlist>
									  
								</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>The LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the current list of calls. Note that this list is read-only and might be changed by the core after a function call to 
								<ref>linphone_core_iterate()</ref>
								. Similarly the LinphoneCall objects inside it might be destroyed without prior notice. To hold references to LinphoneCall object into your program, you must use 
								<ref>linphone_call_ref()</ref>
								. 
								<description>
									<para>
										A list of 
										<ref>LinphoneCall</ref>
										 objects. 
										<bctbxlist>LinphoneCall</bctbxlist>
										  
									</para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="calls_nb">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_calls_nb">
						<return completetype="int" type="int">
							<description>
								<para>The current number of calls </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the number of Call 
								<description>
									<para>The current number of calls </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="capture_device">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_capture_device">
						<return completetype="const char *" type="char">
							<description>
								<para>The name of the currently assigned sound device for capture </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the name of the currently assigned sound device for capture. 
								<description>
									<para>The name of the currently assigned sound device for capture </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_capture_device">
						<return completetype="int" type="int">
							<description>
								<para>0 </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="devid" type="char">
								<description>
									

									<para>
										The device name as returned by 
										<ref>linphone_core_get_sound_devices()</ref>
										 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Sets the sound device used for capture. 
								<description>
									<para>0 </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="chat_database_path">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_core_get_chat_database_path">
						<return completetype="const char *" type="char">
							<description>
								<para>file path or NULL if not exist </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>the linphone core </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get path to the database file used for storing chat messages. 
								<description>
									<para>file path or NULL if not exist </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_core_set_chat_database_path">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>the linphone core </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="path" type="char">
								<description>
									

									<para>filesystem path </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Sets the database filename where chat messages will be stored. If the file does not exist, it will be created.</para>
							<para/>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="chat_enabled">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_core_chat_enabled">
						<return completetype="bool_t" type="bool_t"/>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										A 
										<ref>LinphoneCore</ref>
										 object 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Returns whether chat is enabled. </para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="chat_rooms">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/chat.h" name="linphone_core_get_chat_rooms">
						<return completetype="const bctbx_list_t *" containedtype="LinphoneChatRoom" type="bctbx_list_t">
							<description>
								<para>
									A list of 
									<ref>LinphoneChatRoom</ref>
									 objects. 
									<bctbxlist>LinphoneChatRoom</bctbxlist>
									  
								</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 object 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Returns an list of chat rooms 
								<description>
									<para>
										A list of 
										<ref>LinphoneChatRoom</ref>
										 objects. 
										<bctbxlist>LinphoneChatRoom</bctbxlist>
										  
									</para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="conference">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_conference">
						<return completetype="LinphoneConference *" type="LinphoneConference">
							<description>
								<para>
									A pointer on 
									<ref>LinphoneConference</ref>
									 or NULL if no conference are going on 
								</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get a pointer on the internal conference object. 
								<description>
									<para>
										A pointer on 
										<ref>LinphoneConference</ref>
										 or NULL if no conference are going on 
									</para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="conference_local_input_volume">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_conference_local_input_volume">
						<return completetype="float" type="float">
							<description>
								<para>A value inside [0.0 ; 1.0] </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the set input volume of the local participant 
								<description>
									<para>A value inside [0.0 ; 1.0] </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="conference_size">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_conference_size">
						<return completetype="int" type="int">
							<description>
								<para>The number of participant </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the number of participant in the running conference. The local participant is included in the count only if it is in the conference. 
								<description>
									<para>The number of participant </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="config">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_config">
						<return completetype="LinphoneConfig *" type="LinphoneConfig"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 object
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Returns the LpConfig object used to manage the storage (config) file. </para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="current_call">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_current_call">
						<return completetype="LinphoneCall *" type="LinphoneCall">
							<description>
								<para>The current call or NULL if no call is running </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the current call. 
								<description>
									<para>The current call or NULL if no call is running </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="current_call_remote_address">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_current_call_remote_address">
						<return completetype="const LinphoneAddress *" type="LinphoneAddress">
							<description>
								<para>The remote address of the current call or NULL if there is no current call. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the remote address of the current call. 
								<description>
									<para>The remote address of the current call or NULL if there is no current call. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="current_callbacks">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_current_callbacks">
						<return completetype="LinphoneCoreCbs *" type="LinphoneCoreCbs">
							<description>
								<para>
									the 
									<ref>LinphoneCoreCbs</ref>
									 that has called the last callback 
								</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>the linphonecore </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the current 
								<ref>LinphoneCoreCbs</ref>
								. This is meant only to be called from a callback to be able to get the user_data associated with the 
								<ref>LinphoneCoreCbs</ref>
								 that is calling the callback. 
								<description>
									<para>
										the 
										<ref>LinphoneCoreCbs</ref>
										 that has called the last callback 
									</para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="current_preview_video_size">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_current_preview_video_size">
						<return completetype="MSVideoSize" type="MSVideoSize">
							<description>
								<para>a MSVideoSize </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>the core </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Returns the effective video size for the captured video as provided by the camera. When preview is disabled or not yet started, this function returns a zeroed video size. 
								<see>linphone_core_set_preview_video_size()</see>
								<description>
									<para>a MSVideoSize </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="current_vtable">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_current_vtable">
						<return completetype="LinphoneCoreVTable *" type="LinphoneCoreVTable">
							<description>
								<para>the vtable that called the last callback </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>the linphonecore </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the current VTable. This is meant only to be called from a callback to be able to get the user_data associated with the vtable that called the callback. 
								<description>
									<para>the vtable that called the last callback </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="default_friend_list">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friendlist.h" name="linphone_core_get_default_friend_list">
						<return completetype="LinphoneFriendList *" type="LinphoneFriendList">
							<description>
								<para>the first LinphoneFriendList object or NULL </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Retrieves the first list of LinphoneFriend from the core. 
								<description>
									<para>the first LinphoneFriendList object or NULL </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="default_proxy_config">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_default_proxy_config">
						<return completetype="LinphoneProxyConfig *" type="LinphoneProxyConfig">
							<description>
								<para>the default proxy configuration, that is the one used to determine the current identity. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								<description>
									<para>the default proxy configuration, that is the one used to determine the current identity. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_default_proxy_config">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
							<argument completetype="LinphoneProxyConfig *" name="config" type="LinphoneProxyConfig">
								<description>
									

									<para>The proxy configuration to use as the default one. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Sets the default proxy.</para>
							<para>This default proxy must be part of the list of already entered LinphoneProxyConfig. Toggling it as default will make LinphoneCore use the identity associated with the proxy configuration in all incoming and outgoing calls. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="delayed_timeout">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_delayed_timeout">
						<return completetype="int" type="int">
							<description>
								<para>The current delayed timeout in seconds </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the delayed timeout See 
								<ref>linphone_core_set_delayed_timeout()</ref>
								 for details. 
								<description>
									<para>The current delayed timeout in seconds </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_delayed_timeout">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
							<argument completetype="int" name="seconds" type="int">
								<description>
									

									<para>The new delayed timeout </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the in delayed timeout in seconds. After this timeout period, a delayed call (internal call initialisation or resolution) is resumed. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="device_rotation">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_device_rotation">
						<return completetype="int" type="int">
							<description>
								<para>The current device orientation</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the current device orientation. 
								<description>
									<para>The current device orientation</para>
								</description>
								

								<see>linphone_core_set_device_rotation() </see>
							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_device_rotation">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
							<argument completetype="int" name="rotation" type="int">
								<description>
									

									<para>The orientation to use </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Tells the core the device current orientation. This can be used by capture filters on mobile devices to select between portrait/landscape mode and to produce properly oriented images. The exact meaning of the value in rotation if left to each device specific implementations. IOS supported values are 0 for UIInterfaceOrientationPortrait and 270 for UIInterfaceOrientationLandscapeRight. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="dns_search_enabled">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_dns_search_enabled">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>TRUE if DNS search is enabled, FALSE if disabled. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 object. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Tells whether DNS search (use of local domain if the fully qualified name did return results) is enabled. 
								<description>
									<para>TRUE if DNS search is enabled, FALSE if disabled. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_enable_dns_search">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 object. 
									</para>
								</description>
								

							</argument>
							<argument completetype="bool_t" name="enable" type="bool_t">
								<description>
									

									<para>TRUE to enable DNS search, FALSE to disable it. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Enable or disable DNS search (use of local domain if the fully qualified name did return results). </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="dns_servers">
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_dns_servers">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 object. 
									</para>
								</description>
								

							</argument>
							<argument completetype="const bctbx_list_t *" name="servers" type="bctbx_list_t">
								<description>
									

									<para>A #bctbx_list_t of strings containing the IP addresses of DNS servers to be used. Setting to NULL restores default behaviour, which is to use the DNS server list provided by the system. The list is copied internally. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Forces liblinphone to use the supplied list of dns servers, instead of system's ones. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="dns_srv_enabled">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_dns_srv_enabled">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>TRUE if DNS SRV resolution is enabled, FALSE if disabled. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 object. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Tells whether DNS SRV resolution is enabled. 
								<description>
									<para>TRUE if DNS SRV resolution is enabled, FALSE if disabled. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_enable_dns_srv">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 object. 
									</para>
								</description>
								

							</argument>
							<argument completetype="bool_t" name="enable" type="bool_t">
								<description>
									

									<para>TRUE to enable DNS SRV resolution, FALSE to disable it. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Enable or disable DNS SRV resolution. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="download_bandwidth">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_download_bandwidth">
						<return completetype="int" type="int"/>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore"/>
						</arguments>
						<detaileddescription>
							

							<para>
								Retrieve the maximum available download bandwidth. This value was set by 
								<ref>linphone_core_set_download_bandwidth()</ref>
								. 
							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_download_bandwidth">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>the LinphoneCore object </para>
								</description>
								

							</argument>
							<argument completetype="int" name="bw" type="int">
								<description>
									

									<para>the bandwidth in kbits/s, 0 for infinite </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Sets maximum available download bandwidth This is IP bandwidth, in kbit/s. This information is used signaled to other parties during calls (within SDP messages) so that the remote end can have sufficient knowledge to properly configure its audio &amp; video codec output bitrate to not overflow available bandwidth.</para>
							<para/>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="download_ptime">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_download_ptime">
						<return completetype="int" type="int"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore"/>
						</arguments>
						<detaileddescription>
							

							<para>Get audio packetization time linphone expects to receive from peer. A value of zero means that ptime is not specified. </para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_download_ptime">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore"/>
							<argument completetype="int" name="ptime" type="int"/>
						</arguments>
						<detaileddescription>
							

							<para>Set audio packetization time linphone expects to receive from peer. A value of zero means that ptime is not specified. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="echo_cancellation_enabled">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_echo_cancellation_enabled">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>A boolean value telling whether echo cancellation is enabled or disabled </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Returns TRUE if echo cancellation is enabled. 
								<description>
									<para>A boolean value telling whether echo cancellation is enabled or disabled </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_enable_echo_cancellation">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
							<argument completetype="bool_t" name="val" type="bool_t">
								<description>
									

									<para>A boolean value telling whether echo cancellation is to be enabled or disabled. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Enables or disable echo cancellation. Value is saved and used for subsequent calls. This actually controls software echo cancellation. If hardware echo cancellation is available, it will be always used and activated for calls, regardless of the value passed to this function. When hardware echo cancellation is available, the software one is of course not activated. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="echo_limiter_enabled">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_echo_limiter_enabled">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>TRUE if the echo limiter is enabled, FALSE otherwise. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 object. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Tells whether echo limiter is enabled. 
								<description>
									<para>TRUE if the echo limiter is enabled, FALSE otherwise. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_enable_echo_limiter">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 object. 
									</para>
								</description>
								

							</argument>
							<argument completetype="bool_t" name="val" type="bool_t">
								<description>
									

									<para>TRUE to enable echo limiter, FALSE to disable it. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Enables or disable echo limiter. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="file_transfer_server">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_file_transfer_server">
						<return completetype="const char *" type="char">
							<description>
								<para>
									URL of the file server like 
									<ulink url="https://file.linphone.org/upload.php">https://file.linphone.org/upload.php</ulink>
									 
								</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="core" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 from which to get the server_url 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the globaly set http file transfer server to be used for content type application/vnd.gsma.rcs-ft-http+xml. 
								<description>
									<para>
										URL of the file server like 
										<ulink url="https://file.linphone.org/upload.php">https://file.linphone.org/upload.php</ulink>
										 
									</para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_file_transfer_server">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="core" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 to be modified 
									</para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="server_url" type="char">
								<description>
									

									<para>
										URL of the file server like 
										<ulink url="https://file.linphone.org/upload.php">https://file.linphone.org/upload.php</ulink>
										 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Globaly set an http file transfer server to be used for content type application/vnd.gsma.rcs-ft-http+xml. This value can also be set for a dedicated account using 
								<ref>linphone_proxy_config_set_file_transfer_server</ref>
								 
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="firewall_policy">
					<getter deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_firewall_policy">
						<return completetype="LinphoneFirewallPolicy" type="LinphoneFirewallPolicy">
							<description>
								<para>
									The 
									<ref>LinphoneFirewallPolicy</ref>
									 that is being used.
								</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 object. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the policy that is used to pass through firewalls. 
								<description>
									<para>
										The 
										<ref>LinphoneFirewallPolicy</ref>
										 that is being used.
									</para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_firewall_policy">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 object. 
									</para>
								</description>
								

							</argument>
							<argument completetype="LinphoneFirewallPolicy" name="pol" type="LinphoneFirewallPolicy">
								<description>
									

									<para>
										The 
										<ref>LinphoneFirewallPolicy</ref>
										 to use.
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the policy to use to pass through firewalls. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="friend_list">
					<getter deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_core_get_friend_list">
						<return completetype="const bctbx_list_t *" containedtype="LinphoneFriend" type="bctbx_list_t">
							<description>
								<para>
									A list of 
									<ref>LinphoneFriend</ref>
									 objects. 
									<bctbxlist>LinphoneFriend</bctbxlist>
									  
								</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 object 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get Buddy list of LinphoneFriend 
								<description>
									<para>
										A list of 
										<ref>LinphoneFriend</ref>
										 objects. 
										<bctbxlist>LinphoneFriend</bctbxlist>
										  
									</para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="friends_database_path">
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_core_set_friends_database_path">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>the linphone core </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="path" type="char">
								<description>
									

									<para>filesystem path </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Sets the database filename where friends will be stored. If the file does not exist, it will be created.</para>
							<para/>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="friends_lists">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friendlist.h" name="linphone_core_get_friends_lists">
						<return completetype="const bctbx_list_t *" containedtype="LinphoneFriendList" type="bctbx_list_t">
							<description>
								<para>
									A list of 
									<ref>LinphoneFriendList</ref>
									 objects. 
									<bctbxlist>LinphoneFriendList</bctbxlist>
									  a list of LinphoneFriendList 
								</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Retrieves the list of LinphoneFriendList from the core. 
								<description>
									<para>
										A list of 
										<ref>LinphoneFriendList</ref>
										 objects. 
										<bctbxlist>LinphoneFriendList</bctbxlist>
										  a list of LinphoneFriendList 
									</para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="guess_hostname">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_guess_hostname">
						<return completetype="bool_t" type="bool_t"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore"/>
						</arguments>
						<detaileddescription>
							

							<para>Returns TRUE if hostname part of primary contact is guessed automatically. </para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_guess_hostname">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore"/>
							<argument completetype="bool_t" name="val" type="bool_t"/>
						</arguments>
						<detaileddescription>
							

							<para>Tells LinphoneCore to guess local hostname automatically in primary contact. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="http_proxy_host">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_http_proxy_host">
						<return completetype="const char *" type="char">
							<description>
								<para>hostname of IP adress of the http proxy (can be NULL to disable). </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get http proxy address to be used for signaling. 
								<description>
									<para>hostname of IP adress of the http proxy (can be NULL to disable). </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_http_proxy_host">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="host" type="char">
								<description>
									

									<para>Hostname of IP adress of the http proxy (can be NULL to disable). </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Set http proxy address to be used for signaling during next channel connection. Use 
								<ref>linphone_core_set_network_reachable</ref>
								 FASLE/TRUE to force channel restart. 
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="http_proxy_port">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_http_proxy_port">
						<return completetype="int" type="int">
							<description>
								<para>port of the http proxy. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get http proxy port to be used for signaling. 
								<description>
									<para>port of the http proxy. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_http_proxy_port">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
							<argument completetype="int" name="port" type="int">
								<description>
									

									<para>of the http proxy. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set http proxy port to be used for signaling. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="identity">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_identity">
						<return completetype="const char *" type="char">
							<description>
								<para>The default identity SIP address </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the default identity SIP address. This is an helper function. If no default proxy is set, this will return the primary contact ( see 
								<ref>linphone_core_get_primary_contact()</ref>
								 ). If a default proxy is set it returns the registered identity on the proxy. 
								<description>
									<para>The default identity SIP address </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="im_encryption_engine">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_im_encryption_engine">
						<return completetype="LinphoneImEncryptionEngine *" type="LinphoneImEncryptionEngine">
							<description>
								<para>the IM Encryption Engine in the core or NULL </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the IM Encryption Engine in the core if possible 
								<description>
									<para>the IM Encryption Engine in the core or NULL </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_im_encryption_engine">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
							<argument completetype="LinphoneImEncryptionEngine *" name="imee" type="LinphoneImEncryptionEngine">
								<description>
									

									<para>LinphoneImEncryptionEngine object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Sets an IM Encryption Engine in the core </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="im_notif_policy">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/im_notif_policy.h" name="linphone_core_get_im_notif_policy">
						<return completetype="LinphoneImNotifPolicy *" type="LinphoneImNotifPolicy">
							<description>
								<para>A LinphoneImNotifPolicy object. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the LinphoneImNotifPolicy object controlling the instant messaging notifications. 
								<description>
									<para>A LinphoneImNotifPolicy object. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="in_call_timeout">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_in_call_timeout">
						<return completetype="int" type="int">
							<description>
								<para>The current in call timeout in seconds </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the in call timeout See 
								<ref>linphone_core_set_in_call_timeout()</ref>
								 for details. 
								<description>
									<para>The current in call timeout in seconds </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_in_call_timeout">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
							<argument completetype="int" name="seconds" type="int">
								<description>
									

									<para>The new timeout in seconds </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the in call timeout in seconds. After this timeout period, the call is automatically hangup. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="in_conference">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_is_in_conference">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>TRUE if the local participant is in a conference, FALSE otherwise. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>the linphone core </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Indicates whether the local participant is part of a conference. 
								<simplesect kind="warning">
									<para>
										That function automatically fails in the case of conferences using a conferencet server (focus). If you use such a conference, you should use 
										<ref>linphone_conference_remove_participant()</ref>
										 instead. 
									</para>
								</simplesect>
								

								<description>
									<para>TRUE if the local participant is in a conference, FALSE otherwise. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="inc_timeout">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_inc_timeout">
						<return completetype="int" type="int">
							<description>
								<para>The current incoming call timeout in seconds </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Returns the incoming call timeout See 
								<ref>linphone_core_set_inc_timeout()</ref>
								 for details. 
								<description>
									<para>The current incoming call timeout in seconds </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_inc_timeout">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
							<argument completetype="int" name="seconds" type="int">
								<description>
									

									<para>The new timeout in seconds </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the incoming call timeout in seconds. If an incoming call isn't answered for this timeout period, it is automatically declined. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="incoming_invite_pending">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_is_incoming_invite_pending">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>A boolean telling whether an incoming invite is pending or not. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Tells whether there is an incoming invite pending.</para>
							<para>
								<description>
									<para>A boolean telling whether an incoming invite is pending or not. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="ipv6_enabled">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_ipv6_enabled">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>A boolean value telling whether IPv6 is enabled or not</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Tells whether IPv6 is enabled or not. 
								<description>
									<para>A boolean value telling whether IPv6 is enabled or not</para>
								</description>
								

								<see>linphone_core_enable_ipv6() for more details on how IPv6 is supported in liblinphone. </see>
							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_enable_ipv6">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
							<argument completetype="bool_t" name="val" type="bool_t">
								<description>
									

									<para>A boolean value telling whether to enable IPv6 support </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Turns IPv6 support on or off. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="keep_alive_enabled">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_keep_alive_enabled">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>A boolean value telling whether signaling keep alive is enabled </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Is signaling keep alive enabled. 
								<description>
									<para>A boolean value telling whether signaling keep alive is enabled </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_enable_keep_alive">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
							<argument completetype="bool_t" name="enable" type="bool_t">
								<description>
									

									<para>A boolean value telling whether signaling keep alive is to be enabled </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Enables signaling keep alive, small udp packet sent periodically to keep udp NAT association. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="last_outgoing_call_log">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_last_outgoing_call_log">
						<return completetype="LinphoneCallLog *" type="LinphoneCallLog">
							<description>
								<para>{LinphoneCallLog} </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the latest outgoing call log. 
								<description>
									<para>{LinphoneCallLog} </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="log_collection_max_file_size">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_log_collection_max_file_size">
						<return completetype="size_t" type="size_t">
							<description>
								<para>The max file size in bytes of the files used for log collection. </para>
							</description>
							

						</return>
						<arguments/>
						<detaileddescription>
							

							<para>
								Get the max file size in bytes of the files used for log collection. 
								<description>
									<para>The max file size in bytes of the files used for log collection. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_log_collection_max_file_size">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="size_t" name="size" type="size_t">
								<description>
									

									<para>The max file size in bytes of the files used for log collection. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Set the max file size in bytes of the files used for log collection. Warning: this function should only not be used to change size dynamically but instead only before calling 
								<see>linphone_core_enable_log_collection. If you increase max size on runtime, logs chronological order COULD be broken. </see>
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="log_collection_path">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_log_collection_path">
						<return completetype="const char *" type="char">
							<description>
								<para>The path where the log files will be written. </para>
							</description>
							

						</return>
						<arguments/>
						<detaileddescription>
							

							<para>
								Get the path where the log files will be written for log collection. 
								<description>
									<para>The path where the log files will be written. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_log_collection_path">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="const char *" name="path" type="char">
								<description>
									

									<para>The path where the log files will be written. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the path where the log files will be written for log collection. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="log_collection_prefix">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_log_collection_prefix">
						<return completetype="const char *" type="char">
							<description>
								<para>The prefix of the filenames used for log collection. </para>
							</description>
							

						</return>
						<arguments/>
						<detaileddescription>
							

							<para>
								Get the prefix of the filenames that will be used for log collection. 
								<description>
									<para>The prefix of the filenames used for log collection. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_log_collection_prefix">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="const char *" name="prefix" type="char">
								<description>
									

									<para>The prefix to use for the filenames for log collection. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the prefix of the filenames that will be used for log collection. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="log_collection_upload_server_url">
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_log_collection_upload_server_url">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="core" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="server_url" type="char">
								<description>
									

									<para>The url of the server where to upload the collected log files. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the url of the server where to upload the collected log files. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="log_file">
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_log_file">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="FILE *" name="file" type="FILE">
								<description>
									

									<para>A pointer to the FILE structure of the file to write to. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Define a log file.</para>
							<para>If the file pointer passed as an argument is NULL, stdout is used instead.</para>
							<para/>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="log_handler">
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_log_handler">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="OrtpLogFunc" name="logfunc" type="OrtpLogFunc">
								<description>
									

									<para>The function pointer of the log handler. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Define a log handler.</para>
							<para/>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="log_level">
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_log_level">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="OrtpLogLevel" name="loglevel" type="OrtpLogLevel">
								<description>
									

									<para>Minimum level for logging messages. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Define the minimum level for logging.</para>
							<para/>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="log_level_mask">
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_log_level_mask">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="unsigned int" name="loglevel" type="int">
								<description>
									

									<para>A bitmask of the log levels to set. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Define the log level using mask.</para>
							<para>The loglevel parameter is a bitmask parameter. Therefore to enable only warning and error messages, use ORTP_WARNING | ORTP_ERROR. To disable logs, simply set loglevel to 0.</para>
							<para/>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="max_calls">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_max_calls">
						<return completetype="int" type="int">
							<description>
								<para>max number of simultaneous calls </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>core </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Get the maximum number of simultaneous calls Linphone core can manage at a time. All new call above this limit are declined with a busy answer</para>
							<para>
								<description>
									<para>max number of simultaneous calls </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_max_calls">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>core </para>
								</description>
								

							</argument>
							<argument completetype="int" name="max" type="int">
								<description>
									

									<para>number of simultaneous calls </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the maximum number of simultaneous calls Linphone core can manage at a time. All new call above this limit are declined with a busy answer</para>
							<para/>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="media_encryption">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_media_encryption">
						<return completetype="LinphoneMediaEncryption" type="LinphoneMediaEncryption">
							<description>
								<para>The media encryption policy being used. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 object. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the media encryption policy being used for RTP packets. 
								<description>
									<para>The media encryption policy being used. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_media_encryption">
						<return completetype="int" type="int">
							<description>
								<para>0 if successful, any other value otherwise. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 object. 
									</para>
								</description>
								

							</argument>
							<argument completetype="LinphoneMediaEncryption" name="menc" type="LinphoneMediaEncryption">
								<description>
									

									<para>The media encryption policy to be used. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Choose the media encryption policy to be used for RTP packets. 
								<description>
									<para>0 if successful, any other value otherwise. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="media_encryption_mandatory">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_is_media_encryption_mandatory">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>TRUE means the call will fail; FALSE means an INVITE will be resent with encryption disabled. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 object. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get behaviour when encryption parameters negociation fails on outgoing call. 
								<description>
									<para>TRUE means the call will fail; FALSE means an INVITE will be resent with encryption disabled. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_media_encryption_mandatory">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 object. 
									</para>
								</description>
								

							</argument>
							<argument completetype="bool_t" name="m" type="bool_t">
								<description>
									

									<para>If set to TRUE call will fail; if set to FALSE will resend an INVITE with encryption disabled. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Define behaviour when encryption parameters negociation fails on outgoing call. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="media_network_reachable">
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_media_network_reachable">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore"/>
							<argument completetype="bool_t" name="value" type="bool_t"/>
						</arguments>
						<detaileddescription>
							

							<para>
								This method is called by the application to notify the linphone core library when the media (RTP) network is reachable. This is for advanced usage, when SIP and RTP layers are required to use different interfaces. Most applications just need 
								<ref>linphone_core_set_network_reachable()</ref>
								. 
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="mic_enabled">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_mic_enabled">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>TRUE if the microphone is enabled, FALSE if disabled. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 object 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Tells whether the microphone is enabled. 
								<description>
									<para>TRUE if the microphone is enabled, FALSE if disabled. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_enable_mic">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 object 
									</para>
								</description>
								

							</argument>
							<argument completetype="bool_t" name="enable" type="bool_t">
								<description>
									

									<para>TRUE to enable the microphone, FALSE to disable it. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Enable or disable the microphone. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="mic_gain_db">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_mic_gain_db">
						<return completetype="float" type="float">
							<description>
								<para>The current microphone gain </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get microphone gain in db. 
								<description>
									<para>The current microphone gain </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_mic_gain_db">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
							<argument completetype="float" name="level" type="float">
								<description>
									

									<para>The new microphone level </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Allow to control microphone level: gain in db. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="missed_calls_count">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_missed_calls_count">
						<return completetype="int" type="int">
							<description>
								<para>The number of missed calls. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 object. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the number of missed calls. Once checked, this counter can be reset with 
								<ref>linphone_core_reset_missed_calls_count()</ref>
								. 
								<description>
									<para>The number of missed calls. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="mtu">
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_mtu">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
							<argument completetype="int" name="mtu" type="int">
								<description>
									

									<para>The MTU in bytes </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Sets the maximum transmission unit size in bytes. This information is useful for sending RTP packets. Default value is 1500. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="nat_address">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_nat_address">
						<return completetype="const char *" type="char">
							<description>
								<para>The public IP address of NAT being used. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 object. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the public IP address of NAT being used. 
								<description>
									<para>The public IP address of NAT being used. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_nat_address">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 object. 
									</para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="addr" type="char">
								<description>
									

									<para>The public IP address of NAT to use. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the public IP address of NAT when using the firewall policy is set to use NAT. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="nat_policy">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_nat_policy">
						<return completetype="LinphoneNatPolicy *" type="LinphoneNatPolicy">
							<description>
								<para>LinphoneNatPolicy object in use.</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 object 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get The policy that is used to pass through NATs/firewalls. It may be overridden by a NAT policy for a specific proxy config. 
								<description>
									<para>LinphoneNatPolicy object in use.</para>
								</description>
								

								<see>linphone_proxy_config_get_nat_policy() </see>
							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_nat_policy">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 object 
									</para>
								</description>
								

							</argument>
							<argument completetype="LinphoneNatPolicy *" name="policy" type="LinphoneNatPolicy">
								<description>
									

									<para>LinphoneNatPolicy object</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Set the policy to use to pass through NATs/firewalls. It may be overridden by a NAT policy for a specific proxy config. 
								<see>linphone_proxy_config_set_nat_policy() </see>
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="native_preview_window_id">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_native_preview_window_id">
						<return completetype="void *" type="void">
							<description>
								<para>The native window handle of the video preview window </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the native window handle of the video preview window. 
								<description>
									<para>The native window handle of the video preview window </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_native_preview_window_id">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
							<argument completetype="void *" name="id" type="void">
								<description>
									

									<para>The native window id where the preview video is to be displayed </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Set the native window id where the preview video (local camera) is to be displayed. This has to be used in conjonction with 
								<ref>linphone_core_use_preview_window()</ref>
								. MacOS, Linux, Windows: if not set or zero the core will create its own window, unless the special id -1 is given. 
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="native_video_window_id">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_native_video_window_id">
						<return completetype="void *" type="void">
							<description>
								<para>The native window handle of the video window </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the native window handle of the video window. 
								<description>
									<para>The native window handle of the video window </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_native_video_window_id">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore"/>
							<argument completetype="void *" name="id" type="void"/>
						</arguments>
						<detaileddescription>
							

							<para>Set the native video window id where the video is to be displayed. For MacOS, Linux, Windows: if not set or LINPHONE_VIDEO_DISPLAY_AUTO the core will create its own window, unless the special id LINPHONE_VIDEO_DISPLAY_NONE is given. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="network_reachable">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_is_network_reachable">
						<return completetype="bool_t" type="bool_t"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore"/>
						</arguments>
						<detaileddescription>
							

							<para>return network state either as positioned by the application or by linphone itself. </para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_network_reachable">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore"/>
							<argument completetype="bool_t" name="value" type="bool_t"/>
						</arguments>
						<detaileddescription>
							

							<para>This method is called by the application to notify the linphone core library when network is reachable. Calling this method with true trigger linphone to initiate a registration process for all proxies. Calling this method disables the automatic network detection mode. It means you must call this method after each network state changes. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="network_simulator_params">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_network_simulator_params">
						<return completetype="const OrtpNetworkSimulatorParams *" type="OrtpNetworkSimulatorParams">
							<description>
								<para>a OrtpNetworkSimulatorParams structure. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore"/>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the previously set network simulation parameters. 
								<see>linphone_core_set_network_simulator_params </see>
								<description>
									<para>a OrtpNetworkSimulatorParams structure. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_network_simulator_params">
						<return completetype="int" type="int">
							<description>
								<para>0 if successful, -1 otherwise. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>the LinphoneCore </para>
								</description>
								

							</argument>
							<argument completetype="const OrtpNetworkSimulatorParams *" name="params" type="OrtpNetworkSimulatorParams">
								<description>
									

									<para>the parameters used for the network simulation. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Set the network simulator parameters. Liblinphone has the capabability of simulating the effects of a network (latency, lost packets, jitter, max bandwidth). Please refer to the oRTP documentation for the meaning of the parameters of the OrtpNetworkSimulatorParams structure. This function has effect for future calls, but not for currently running calls, though this behavior may be changed in future versions. 
								<simplesect kind="warning">
									<para>Due to design of network simulation in oRTP, simulation is applied independently for audio and video stream. This means for example that a bandwidth limit of 250kbit/s will have no effect on an audio stream running at 40kbit/s while a videostream targetting 400kbit/s will be highly affected. </para>
								</simplesect>
								

								<description>
									<para>0 if successful, -1 otherwise. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="nortp_timeout">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_nortp_timeout">
						<return completetype="int" type="int">
							<description>
								<para>The value of the no-rtp timeout in seconds </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Gets the value of the no-rtp timeout.</para>
							<para>
								When no RTP or RTCP packets have been received for a while LinphoneCore will consider the call is broken (remote end crashed or disconnected from the network), and thus will terminate the call. The no-rtp timeout is the duration above which the call is considered broken. 
								<description>
									<para>The value of the no-rtp timeout in seconds </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_nortp_timeout">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
							<argument completetype="int" name="seconds" type="int">
								<description>
									

									<para>The no-rtp timeout value to use in seconds</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Sets the no-rtp timeout value in seconds. 
								<see>linphone_core_get_nortp_timeout() for details. </see>
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="play_file">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_play_file">
						<return completetype="const char *" type="char">
							<description>
								<para>The path to the file that is played when putting somebody on hold. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the wav file that is played when putting somebody on hold, or when files are used instead of soundcards (see 
								<ref>linphone_core_set_use_files()</ref>
								).
							</para>
							<para>The file is a 16 bit linear wav file.</para>
							<para>
								<description>
									<para>The path to the file that is played when putting somebody on hold. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_play_file">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="file" type="char">
								<description>
									

									<para>The path to the file to be played when putting somebody on hold. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Sets a wav file to be played when putting somebody on hold, or when files are used instead of soundcards (see 
								<ref>linphone_core_set_use_files()</ref>
								).
							</para>
							<para>The file must be a 16 bit linear wav file.</para>
							<para/>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="play_level">
					<getter deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_play_level">
						<return completetype="int" type="int"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore"/>
						</arguments>
						<detaileddescription>
							

							<para>Get playback sound level in 0-100 scale.</para>
							<para/>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_play_level">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore"/>
							<argument completetype="int" name="level" type="int"/>
						</arguments>
						<detaileddescription>
							

							<para>Set sound playback level in 0-100 scale. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="playback_device">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_playback_device">
						<return completetype="const char *" type="char">
							<description>
								<para>The name of the currently assigned sound device for playback </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the name of the currently assigned sound device for playback. 
								<description>
									<para>The name of the currently assigned sound device for playback </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_playback_device">
						<return completetype="int" type="int">
							<description>
								<para>0 </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="devid" type="char">
								<description>
									

									<para>
										The device name as returned by 
										<ref>linphone_core_get_sound_devices()</ref>
										 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Sets the sound device used for playback. 
								<description>
									<para>0 </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="playback_gain_db">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_playback_gain_db">
						<return completetype="float" type="float">
							<description>
								<para>The current playback gain </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get playback gain in db before entering sound card. 
								<description>
									<para>The current playback gain </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_playback_gain_db">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
							<argument completetype="float" name="level" type="float">
								<description>
									

									<para>The new play level </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Allow to control play level before entering sound card: gain in db </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="preferred_framerate">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_preferred_framerate">
						<return completetype="float" type="float">
							<description>
								<para>frame rate in number of frames per seconds. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>the linphone core </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Returns the preferred video framerate, previously set by 
								<ref>linphone_core_set_preferred_framerate()</ref>
								.
							</para>
							<para>
								<description>
									<para>frame rate in number of frames per seconds. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_preferred_framerate">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>the LinphoneCore </para>
								</description>
								

							</argument>
							<argument completetype="float" name="fps" type="float">
								<description>
									

									<para>the target frame rate in number of frames per seconds. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the preferred frame rate for video. Based on the available bandwidth constraints and network conditions, the video encoder remains free to lower the framerate. There is no warranty that the preferred frame rate be the actual framerate. used during a call. Default value is 0, which means &quot;use encoder's default fps value&quot;.</para>
							<para/>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="preferred_video_size">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_preferred_video_size">
						<return completetype="MSVideoSize" type="MSVideoSize"/>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore"/>
						</arguments>
						<detaileddescription>
							

							<para>Returns the current preferred video size for sending. </para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_preferred_video_size">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore"/>
							<argument completetype="MSVideoSize" name="vsize" type="MSVideoSize"/>
						</arguments>
						<detaileddescription>
							

							<para>Sets the preferred video size.</para>
							<para>This applies only to the stream that is captured and sent to the remote party, since we accept all standard video size on the receive path. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="preferred_video_size_by_name">
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_preferred_video_size_by_name">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore"/>
							<argument completetype="const char *" name="name" type="char"/>
						</arguments>
						<detaileddescription>
							

							<para>Sets the preferred video size by its name.</para>
							<para>
								This is identical to 
								<ref>linphone_core_set_preferred_video_size()</ref>
								 except that it takes the name of the video resolution as input. Video resolution names are: qcif, svga, cif, vga, 4cif, svga ... 
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="presence_info">
					<getter deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_core_get_presence_info">
						<return completetype="LinphoneOnlineStatus" type="LinphoneOnlineStatus">
							<description>
								<para>
									<ref>LinphoneOnlineStatus</ref>
									 
								</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 object 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get my presence status 
								<description>
									<para>
										<ref>LinphoneOnlineStatus</ref>
										 
									</para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="presence_model">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_core_get_presence_model">
						<return completetype="LinphonePresenceModel *" type="LinphonePresenceModel">
							<description>
								<para>
									A 
									<ref>LinphonePresenceModel</ref>
									 object, or NULL if no presence model has been set. 
								</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 object 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get my presence model 
								<description>
									<para>
										A 
										<ref>LinphonePresenceModel</ref>
										 object, or NULL if no presence model has been set. 
									</para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_core_set_presence_model">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 object 
									</para>
								</description>
								

							</argument>
							<argument completetype="LinphonePresenceModel *" name="presence" type="LinphonePresenceModel">
								<description>
									

									<para>
										<ref>LinphonePresenceModel</ref>
										 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set my presence model </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="preview_video_size">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_preview_video_size">
						<return completetype="MSVideoSize" type="MSVideoSize">
							<description>
								<para>a MSVideoSize </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>the core </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Returns video size for the captured video if it was previously set by 
								<ref>linphone_core_set_preview_video_size()</ref>
								, otherwise returns a 0,0 size. 
								<see>linphone_core_set_preview_video_size()</see>
								<description>
									<para>a MSVideoSize </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_preview_video_size">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>the linphone core </para>
								</description>
								

							</argument>
							<argument completetype="MSVideoSize" name="vsize" type="MSVideoSize">
								<description>
									

									<para>the video resolution choosed for capuring and previewing. It can be (0,0) to not request any specific preview size and let the core optimize the processing. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Sets the video size for the captured (preview) video. This method is for advanced usage where a video capture must be set independently of the size of the stream actually sent through the call. This allows for example to have the preview window with HD resolution even if due to bandwidth constraint the sent video size is small. Using this feature increases the CPU consumption, since a rescaling will be done internally.</para>
							<para/>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="preview_video_size_by_name">
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_preview_video_size_by_name">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore"/>
							<argument completetype="const char *" name="name" type="char"/>
						</arguments>
						<detaileddescription>
							

							<para>
								Sets the preview video size by its name. See 
								<ref>linphone_core_set_preview_video_size()</ref>
								 for more information about this feature.
							</para>
							<para>Video resolution names are: qcif, svga, cif, vga, 4cif, svga ... </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="primary_contact">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_primary_contact">
						<return completetype="const char *" type="char"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore"/>
						</arguments>
						<detaileddescription>
							

							<para>Returns the default identity when no proxy configuration is used. </para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_primary_contact">
						<return completetype="int" type="int"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore"/>
							<argument completetype="const char *" name="contact" type="char"/>
						</arguments>
						<detaileddescription>
							

							<para>Sets the local &quot;from&quot; identity.</para>
							<para>This data is used in absence of any proxy configuration or when no default proxy configuration is set. See LinphoneProxyConfig </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="primary_contact_parsed">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_primary_contact_parsed">
						<return completetype="LinphoneAddress *" type="LinphoneAddress"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore"/>
						</arguments>
						<detaileddescription>
							

							<para>
								Same as 
								<ref>linphone_core_get_primary_contact()</ref>
								 but the result is a LinphoneAddress object instead of const char* 
							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="provisioning_uri">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_provisioning_uri">
						<return completetype="const char *" type="char">
							<description>
								<para>the provisioning URI. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>the linphone core </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get provisioning URI. 
								<description>
									<para>the provisioning URI. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_provisioning_uri">
						<return completetype="int" type="int">
							<description>
								<para>-1 if uri could not be parsed, 0 otherwise. Note that this does not check validity of URI endpoint nor scheme and download may still fail. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>the linphone core </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="uri" type="char">
								<description>
									

									<para>the http or https uri to use in order to download the configuration. Passing NULL will disable remote provisioning. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Set URI where to download xml configuration file at startup. This can also be set from configuration file or factory config file, from [misc] section, item &quot;config-uri&quot;. Calling this function does not load the configuration. It will write the value into configuration so that configuration from remote URI will take place at next LinphoneCore start. 
								<description>
									<para>-1 if uri could not be parsed, 0 otherwise. Note that this does not check validity of URI endpoint nor scheme and download may still fail. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="proxy_config_list">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_proxy_config_list">
						<return completetype="const bctbx_list_t *" containedtype="LinphoneProxyConfig" type="bctbx_list_t">
							<description>
								<para>
									A list of 
									<ref>LinphoneProxyConfig</ref>
									 objects. 
									<bctbxlist>LinphoneProxyConfig</bctbxlist>
									  
								</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>The LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Returns an unmodifiable list of entered proxy configurations. 
								<description>
									<para>
										A list of 
										<ref>LinphoneProxyConfig</ref>
										 objects. 
										<bctbxlist>LinphoneProxyConfig</bctbxlist>
										  
									</para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="realtime_text_enabled">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_realtime_text_enabled">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>true if realtime text is enabled, false otherwise </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets if realtime text is enabled or not 
								<description>
									<para>true if realtime text is enabled, false otherwise </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="rec_level">
					<getter deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_rec_level">
						<return completetype="int" type="int"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore"/>
						</arguments>
						<detaileddescription>
							

							<para>Get sound capture level in 0-100 scale.</para>
							<para/>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_rec_level">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore"/>
							<argument completetype="int" name="level" type="int"/>
						</arguments>
						<detaileddescription>
							

							<para>Set sound capture level in 0-100 scale. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="record_file">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_record_file">
						<return completetype="const char *" type="char">
							<description>
								<para>The path to the file where incoming stream is recorded. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the wav file where incoming stream is recorded, when files are used instead of soundcards (see 
								<ref>linphone_core_set_use_files()</ref>
								).
							</para>
							<para>
								This feature is different from call recording (
								<ref>linphone_call_params_set_record_file()</ref>
								) The file is a 16 bit linear wav file.
							</para>
							<para>
								<description>
									<para>The path to the file where incoming stream is recorded. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_record_file">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="file" type="char">
								<description>
									

									<para>The path to the file where incoming stream is to be recorded. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Sets a wav file where incoming stream is to be recorded, when files are used instead of soundcards (see 
								<ref>linphone_core_set_use_files()</ref>
								).
							</para>
							<para>
								This feature is different from call recording (
								<ref>linphone_call_params_set_record_file()</ref>
								) The file will be a 16 bit linear wav file.
							</para>
							<para/>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="remote_ringback_tone">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_remote_ringback_tone">
						<return completetype="const char *" type="char"/>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 object 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Get the ring back tone played to far end during incoming calls. </para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_remote_ringback_tone">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 object 
									</para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="ring" type="char">
								<description>
									

									<para>The path to the ring back tone to be played. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Specify a ring back tone to be played to far end during incoming calls. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="ring">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_ring">
						<return completetype="const char *" type="char">
							<description>
								<para>The path to the wav file used for ringing </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Returns the path to the wav file used for ringing. 
								<description>
									<para>The path to the wav file used for ringing </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_ring">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="path" type="char">
								<description>
									

									<para>The path to a wav file to be used for ringing </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Sets the path to a wav file used for ringing. The file must be a wav 16bit linear. Local ring is disabled if null. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="ring_during_incoming_early_media">
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_ring_during_incoming_early_media">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 object 
									</para>
								</description>
								

							</argument>
							<argument completetype="bool_t" name="enable" type="bool_t">
								<description>
									

									<para>A boolean value telling whether to enable ringing during an incoming early media call. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Enable or disable the ring play during an incoming early media call. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="ring_level">
					<getter deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_ring_level">
						<return completetype="int" type="int"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore"/>
						</arguments>
						<detaileddescription>
							

							<para>Get ring sound level in 0-100 scale.</para>
							<para/>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_ring_level">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore"/>
							<argument completetype="int" name="level" type="int"/>
						</arguments>
						<detaileddescription>
							

							<para>Set sound ring level in 0-100 scale.</para>
							<para/>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="ringback">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_ringback">
						<return completetype="const char *" type="char">
							<description>
								<para>The path to the wav file used for ringing back </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Returns the path to the wav file used for ringing back. 
								<description>
									<para>The path to the wav file used for ringing back </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_ringback">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="path" type="char">
								<description>
									

									<para>The path to a wav file to be used for ringing back </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Sets the path to a wav file used for ringing back. Ringback means the ring that is heard when it's ringing at the remote party. The file must be a wav 16bit linear. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="ringer_device">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_ringer_device">
						<return completetype="const char *" type="char">
							<description>
								<para>The name of the currently assigned sound device for ringing </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the name of the currently assigned sound device for ringing. 
								<description>
									<para>The name of the currently assigned sound device for ringing </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_ringer_device">
						<return completetype="int" type="int">
							<description>
								<para>0 </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="devid" type="char">
								<description>
									

									<para>
										The device name as returned by 
										<ref>linphone_core_get_sound_devices()</ref>
										 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Sets the sound device used for ringing. 
								<description>
									<para>0 </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="root_ca">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_root_ca">
						<return completetype="const char *" type="char">
							<description>
								<para>The path to a file or folder containing the trusted root CAs </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the path to a file or folder containing the trusted root CAs (PEM format) 
								<description>
									<para>The path to a file or folder containing the trusted root CAs </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_root_ca">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="path" type="char">
								<description>
									

									<para>The path to a file or folder containing trusted root CAs </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Sets the path to a file or folder containing trusted root CAs (PEM format) </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="root_ca_data">
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_root_ca_data">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="data" type="char">
								<description>
									

									<para>The trusted root CAs as a string </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Sets the trusted root CAs (PEM format) </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="sdp_200_ack_enabled">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_sdp_200_ack_enabled">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>true if INVITE has to be sent whitout SDP. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore"/>
						</arguments>
						<detaileddescription>
							

							<para>
								Media offer control param for SIP INVITE. 
								<description>
									<para>true if INVITE has to be sent whitout SDP. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_enable_sdp_200_ack">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>the linphone core </para>
								</description>
								

							</argument>
							<argument completetype="bool_t" name="enable" type="bool_t">
								<description>
									

									<para>true if INVITE has to be sent whitout SDP. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Control when media offer is sent in SIP INVITE. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="self_view_enabled">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_self_view_enabled">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>A boolean value telling whether self view is enabled</para>
							</description>
							
Refer to 
						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Tells whether video self view during call is enabled or not. 
								<description>
									<para>A boolean value telling whether self view is enabled</para>
								</description>
								
Refer to 
								<ref>linphone_core_enable_self_view()</ref>
								 for details. 
							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_enable_self_view">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
							<argument completetype="bool_t" name="val" type="bool_t">
								<description>
									

									<para>A boolean value telling whether to enable self view</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Enables or disable self view during calls. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="sip_dscp">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_sip_dscp">
						<return completetype="int" type="int">
							<description>
								<para>The current DSCP value </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the DSCP field for SIP signaling channel. The DSCP defines the quality of service in IP packets. 
								<description>
									<para>The current DSCP value </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_sip_dscp">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
							<argument completetype="int" name="dscp" type="int">
								<description>
									

									<para>The DSCP value to set </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the DSCP field for SIP signaling channel. The DSCP defines the quality of service in IP packets. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="sip_network_reachable">
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_sip_network_reachable">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore"/>
							<argument completetype="bool_t" name="value" type="bool_t"/>
						</arguments>
						<detaileddescription>
							

							<para>
								This method is called by the application to notify the linphone core library when the SIP network is reachable. This is for advanced usage, when SIP and RTP layers are required to use different interfaces. Most applications just need 
								<ref>linphone_core_set_network_reachable()</ref>
								. 
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="sip_port">
					<getter deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_sip_port">
						<return completetype="int" type="int">
							<description>
								<para>The UDP port used by SIP</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the UDP port used by SIP. 
								<description>
									<para>The UDP port used by SIP</para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_sip_port">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
							<argument completetype="int" name="port" type="int">
								<description>
									

									<para>The UDP port to be used by SIP</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Sets the UDP port to be used by SIP. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="sip_transport_timeout">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_sip_transport_timeout">
						<return completetype="int" type="int">
							<description>
								<para>The SIP transport timeout in milliseconds. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 object. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the SIP transport timeout. 
								<description>
									<para>The SIP transport timeout in milliseconds. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_sip_transport_timeout">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 object. 
									</para>
								</description>
								

							</argument>
							<argument completetype="int" name="timeout_ms" type="int">
								<description>
									

									<para>The SIP transport timeout in milliseconds. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the SIP transport timeout. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="sip_transports">
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_sip_transports">
						<return completetype="int" type="int">
							<description>
								<para>0 </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
							<argument completetype="const LCSipTransports *" name="transports" type="LCSipTransports">
								<description>
									

									<para>A LCSipTransports structure giving the ports to use </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Sets the ports to be used for each of transport (UDP or TCP) A zero value port for a given transport means the transport is not used. A value of LC_SIP_TRANSPORT_RANDOM (-1) means the port is to be choosen randomly by the system. 
								<description>
									<para>0 </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="sound_devices">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_sound_devices">
						<return completetype="const char * *" type="char">
							<description>
								<para>An unmodifiable array of strings contanining the names of the available sound devices that is NULL terminated </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the list of the available sound devices. 
								<description>
									<para>An unmodifiable array of strings contanining the names of the available sound devices that is NULL terminated </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="static_picture">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_static_picture">
						<return completetype="const char *" type="char">
							<description>
								<para>The path to the image file streamed when &quot;Static picture&quot; is set as the video device. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 object. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the path to the image file streamed when &quot;Static picture&quot; is set as the video device. 
								<description>
									<para>The path to the image file streamed when &quot;Static picture&quot; is set as the video device. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_static_picture">
						<return completetype="int" type="int"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 object. 
									</para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="path" type="char">
								<description>
									

									<para>The path to the image file to use. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the path to the image file to stream when &quot;Static picture&quot; is set as the video device. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="static_picture_fps">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_static_picture_fps">
						<return completetype="float" type="float">
							<description>
								<para>The frame rate used for static picture. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 object. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the frame rate for static picture 
								<description>
									<para>The frame rate used for static picture. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_static_picture_fps">
						<return completetype="int" type="int"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 object. 
									</para>
								</description>
								

							</argument>
							<argument completetype="float" name="fps" type="float">
								<description>
									

									<para>The new frame rate to use for static picture. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the frame rate for static picture. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="stun_server">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_stun_server">
						<return completetype="const char *" type="char">
							<description>
								<para>The STUN server address being used. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 object 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the STUN server address being used. 
								<description>
									<para>The STUN server address being used. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_stun_server">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 object 
									</para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="server" type="char">
								<description>
									

									<para>The STUN server address to use. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the STUN server address to use when the firewall policy is set to STUN. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="supported_file_formats">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_supported_file_formats">
						<return completetype="const char * *" type="char">
							<description>
								<para>the supported formats, typically 'wav' and 'mkv' </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="core" type="LinphoneCore">
								<description>
									

									<para>the core </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Returns a null terminated table of strings containing the file format extension supported for call recording. 
								<description>
									<para>the supported formats, typically 'wav' and 'mkv' </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="supported_video_sizes">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_supported_video_sizes">
						<return completetype="const MSVideoSizeDef *" type="MSVideoSizeDef"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore"/>
						</arguments>
						<detaileddescription>
							

							<para>Returns the zero terminated table of supported video resolutions. </para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="text_codecs">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_text_codecs">
						<return completetype="const bctbx_list_t *" containedtype="PayloadType" type="bctbx_list_t">
							<description>
								<para>
									A list of PayloadType objects. 
									<bctbxlist>PayloadType</bctbxlist>
									 
								</para>
							</description>
							
This list is unmodifiable. The -&gt;data field of the bctbx_list_t points a PayloadType structure holding the codec information. It is possible to make copy of the list with bctbx_list_copy() in order to modify it (such as the order of codecs). 
						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>The LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Returns the list of available text codecs. 
								<description>
									<para>
										A list of PayloadType objects. 
										<bctbxlist>PayloadType</bctbxlist>
										 
									</para>
								</description>
								
This list is unmodifiable. The -&gt;data field of the bctbx_list_t points a PayloadType structure holding the codec information. It is possible to make copy of the list with bctbx_list_copy() in order to modify it (such as the order of codecs). 
							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="text_port">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_text_port">
						<return completetype="int" type="int">
							<description>
								<para>The UDP port used for text streaming </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the UDP port used for text streaming. 
								<description>
									<para>The UDP port used for text streaming </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_text_port">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
							<argument completetype="int" name="port" type="int">
								<description>
									

									<para>The UDP port to use for text streaming </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Sets the UDP port used for text streaming. A value if -1 will request the system to allocate the local port randomly. This is recommended in order to avoid firewall warnings. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="tls_cert">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_tls_cert">
						<return completetype="const char *" type="char">
							<description>
								<para>the TLS certificate or NULL if not set yet </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the TLS certificate 
								<description>
									<para>the TLS certificate or NULL if not set yet </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_tls_cert">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="tls_cert" type="char">
								<description>
									

									<para>the TLS certificate </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Sets a TLS certificate used for TLS authentication The certificate won't be stored, you have to set it after each LinphoneCore startup </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="tls_cert_path">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_tls_cert_path">
						<return completetype="const char *" type="char">
							<description>
								<para>the TLS certificate path or NULL if not set yet </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the path to the TLS certificate file 
								<description>
									<para>the TLS certificate path or NULL if not set yet </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_tls_cert_path">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="tls_cert_path" type="char">
								<description>
									

									<para>path to the TLS certificate </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Sets a TLS certificate path used for TLS authentication The path will be stored in the rc file and automatically restored on startup </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="tls_key">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_tls_key">
						<return completetype="const char *" type="char">
							<description>
								<para>the TLS key or NULL if not set yet </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the TLS key 
								<description>
									<para>the TLS key or NULL if not set yet </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_tls_key">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="tls_key" type="char">
								<description>
									

									<para>the TLS key </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Sets a TLS key used for TLS authentication The key won't be stored, you have to set it after each LinphoneCore startup </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="tls_key_path">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_tls_key_path">
						<return completetype="const char *" type="char">
							<description>
								<para>the TLS key path or NULL if not set yet </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the path to the TLS key file 
								<description>
									<para>the TLS key path or NULL if not set yet </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_tls_key_path">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="tls_key_path" type="char">
								<description>
									

									<para>path to the TLS key </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Sets a TLS key path used for TLS authentication The path will be stored in the rc file and automatically restored on startup </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="tunnel">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_tunnel">
						<return completetype="LinphoneTunnel *" type="LinphoneTunnel">
							<description>
								<para>LinphoneTunnel or NULL if not available </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>core object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>get tunnel instance if available</para>
							<para>
								<description>
									<para>LinphoneTunnel or NULL if not available </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="upload_bandwidth">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_upload_bandwidth">
						<return completetype="int" type="int"/>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore"/>
						</arguments>
						<detaileddescription>
							

							<para>
								Retrieve the maximum available upload bandwidth. This value was set by 
								<ref>linphone_core_set_upload_bandwidth()</ref>
								. 
							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_upload_bandwidth">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>the LinphoneCore object </para>
								</description>
								

							</argument>
							<argument completetype="int" name="bw" type="int">
								<description>
									

									<para>the bandwidth in kbits/s, 0 for infinite </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Sets maximum available upload bandwidth This is IP bandwidth, in kbit/s. This information is used by liblinphone together with remote side available bandwidth signaled in SDP messages to properly configure audio &amp; video codec's output bitrate.</para>
							<para/>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="upload_ptime">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_upload_ptime">
						<return completetype="int" type="int"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore"/>
						</arguments>
						<detaileddescription>
							

							<para>Set audio packetization time linphone will send (in absence of requirement from peer) A value of 0 stands for the current codec default packetization time. </para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_upload_ptime">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore"/>
							<argument completetype="int" name="ptime" type="int"/>
						</arguments>
						<detaileddescription>
							

							<para>Set audio packetization time linphone will send (in absence of requirement from peer) A value of 0 stands for the current codec default packetization time. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="upnp_external_ipaddress">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_upnp_external_ipaddress">
						<return completetype="const char *" type="char">
							<description>
								<para>a null terminated string containing the external ip address. If the the external ip address is not available return null. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Return the external ip address of router. In some cases the uPnP can have an external ip address but not a usable uPnP (state different of Ok).</para>
							<para>
								<description>
									<para>a null terminated string containing the external ip address. If the the external ip address is not available return null. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="upnp_state">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_upnp_state">
						<return completetype="LinphoneUpnpState" type="LinphoneUpnpState">
							<description>
								<para>an LinphoneUpnpState. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Return the internal state of uPnP.</para>
							<para>
								<description>
									<para>an LinphoneUpnpState. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="use_files">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_use_files">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>A boolean value representing whether linphone is streaming audio from and to files or not. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Gets whether linphone is currently streaming audio from and to files, rather than using the soundcard.</para>
							<para>
								<description>
									<para>A boolean value representing whether linphone is streaming audio from and to files or not. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_use_files">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
							<argument completetype="bool_t" name="yesno" type="bool_t">
								<description>
									

									<para>A boolean value asking to stream audio from and to files or not. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Ask the core to stream audio from and to files, instead of using the soundcard.</para>
							<para/>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="use_info_for_dtmf">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_use_info_for_dtmf">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>A boolean value telling whether SIP INFO is used to send digits </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Indicates whether SIP INFO is used to send digits. 
								<description>
									<para>A boolean value telling whether SIP INFO is used to send digits </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_use_info_for_dtmf">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
							<argument completetype="bool_t" name="use_info" type="bool_t">
								<description>
									

									<para>A boolean value telling whether to use SIP INFO to send digits </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Sets whether SIP INFO is to be used to send digits. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="use_rfc2833_for_dtmf">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_use_rfc2833_for_dtmf">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>A boolean value telling whether RFC2833 is used to send digits </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Indicates whether RFC2833 is used to send digits. 
								<description>
									<para>A boolean value telling whether RFC2833 is used to send digits </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_use_rfc2833_for_dtmf">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
							<argument completetype="bool_t" name="use_rfc2833" type="bool_t">
								<description>
									

									<para>A boolean value telling whether to use RFC2833 to send digits </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Sets whether RFC2833 is to be used to send digits. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="user_agent">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_user_agent">
						<return completetype="const char *" type="char">
							<description>
								<para>liblinphone's user agent as a string. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore"/>
						</arguments>
						<detaileddescription>
							

							<para>
								<description>
									<para>liblinphone's user agent as a string. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="user_certificates_path">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_user_certificates_path">
						<return completetype="const char *" type="char">
							<description>
								<para>The path to the directory storing the user's certificates. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 object. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the path to the directory storing the user's certificates. 
								<description>
									<para>The path to the directory storing the user's certificates. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_user_certificates_path">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 object 
									</para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="path" type="char">
								<description>
									

									<para>The path to the directory to use to store the user's certificates. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the path to the directory storing the user's x509 certificates (used by dtls) </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="user_data">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_user_data">
						<return completetype="void *" type="void">
							<description>
								<para>The user data associated with the LinphoneCore object </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Retrieves the user pointer that was given to 
								<ref>linphone_core_new()</ref>
								 
								<description>
									<para>The user data associated with the LinphoneCore object </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_user_data">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
							<argument completetype="void *" name="userdata" type="void">
								<description>
									

									<para>The user data to associate with the LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Associate a user pointer to the linphone core. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="version">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_version">
						<return completetype="const char *" type="char"/>
						<arguments/>
						<detaileddescription>
							

							<para>Returns liblinphone's version as a string. </para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="video_adaptive_jittcomp_enabled">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_video_adaptive_jittcomp_enabled">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>TRUE if the video adaptive jitter compensation is enabled, FALSE otherwise. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 object 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Tells whether the video adaptive jitter compensation is enabled. 
								<description>
									<para>TRUE if the video adaptive jitter compensation is enabled, FALSE otherwise. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_enable_video_adaptive_jittcomp">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 object 
									</para>
								</description>
								

							</argument>
							<argument completetype="bool_t" name="enable" type="bool_t">
								<description>
									

									<para>TRUE to enable the video adaptive jitter compensation, FALSE to disable it. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Enable or disable the video adaptive jitter compensation. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="video_capture_enabled">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_video_capture_enabled">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>TRUE if video capture is enabled, FALSE if disabled. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 object. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Tells whether video capture is enabled. 
								<description>
									<para>TRUE if video capture is enabled, FALSE if disabled. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_enable_video_capture">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 object. 
									</para>
								</description>
								

							</argument>
							<argument completetype="bool_t" name="enable" type="bool_t">
								<description>
									

									<para>TRUE to enable video capture, FALSE to disable it. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Enable or disable video capture.</para>
							<para>
								This function does not have any effect during calls. It just indicates the 
								<ref>LinphoneCore</ref>
								 to initiate future calls with video capture or not. 
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="video_codecs">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_video_codecs">
						<return completetype="const bctbx_list_t *" containedtype="PayloadType" type="bctbx_list_t">
							<description>
								<para>
									A list of PayloadType objects. 
									<bctbxlist>PayloadType</bctbxlist>
									 
								</para>
							</description>
							
This list is unmodifiable. The -&gt;data field of the bctbx_list_t points a PayloadType structure holding the codec information. It is possible to make copy of the list with bctbx_list_copy() in order to modify it (such as the order of codecs). 
						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>The LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Returns the list of available video codecs. 
								<description>
									<para>
										A list of PayloadType objects. 
										<bctbxlist>PayloadType</bctbxlist>
										 
									</para>
								</description>
								
This list is unmodifiable. The -&gt;data field of the bctbx_list_t points a PayloadType structure holding the codec information. It is possible to make copy of the list with bctbx_list_copy() in order to modify it (such as the order of codecs). 
							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_video_codecs">
						<return completetype="int" type="int">
							<description>
								<para>0</para>
							</description>
							
The list is taken by the LinphoneCore thus the application should not free it. This list is made of struct PayloadType describing the codec parameters. 
						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>The LinphoneCore object </para>
								</description>
								

							</argument>
							<argument completetype="bctbx_list_t *" containedtype="PayloadType" name="codecs" type="bctbx_list_t">
								<description>
									

									<para>
										A list of PayloadType objects. 
										<bctbxlist>PayloadType</bctbxlist>
										  
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Sets the list of video codecs. 
								<description>
									<para>0</para>
								</description>
								
The list is taken by the LinphoneCore thus the application should not free it. This list is made of struct PayloadType describing the codec parameters. 
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="video_device">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_video_device">
						<return completetype="const char *" type="char">
							<description>
								<para>The name of the currently active video device </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Returns the name of the currently active video device. 
								<description>
									<para>The name of the currently active video device </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_video_device">
						<return completetype="int" type="int"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="id" type="char">
								<description>
									

									<para>
										The name of the video device to use as returned by 
										<ref>linphone_core_get_video_devices()</ref>
										 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Sets the active video device. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="video_devices">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_video_devices">
						<return completetype="const char * *" type="char">
							<description>
								<para>An unmodifiable array of strings contanining the names of the available video capture devices that is NULL terminated </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the list of the available video capture devices. 
								<description>
									<para>An unmodifiable array of strings contanining the names of the available video capture devices that is NULL terminated </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="video_display_enabled">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_video_display_enabled">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>TRUE if video display is enabled, FALSE if disabled. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 object. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Tells whether video display is enabled. 
								<description>
									<para>TRUE if video display is enabled, FALSE if disabled. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_enable_video_display">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 object. 
									</para>
								</description>
								

							</argument>
							<argument completetype="bool_t" name="enable" type="bool_t">
								<description>
									

									<para>TRUE to enable video display, FALSE to disable it. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Enable or disable video display.</para>
							<para>
								This function does not have any effect during calls. It just indicates the 
								<ref>LinphoneCore</ref>
								 to initiate future calls with video display or not. 
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="video_display_filter">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_video_display_filter">
						<return completetype="const char *" type="char"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore"/>
						</arguments>
						<detaileddescription>
							

							<para>Get the name of the mediastreamer2 filter used for rendering video. </para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_video_display_filter">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore"/>
							<argument completetype="const char *" name="filtername" type="char"/>
						</arguments>
						<detaileddescription>
							

							<para>Set the name of the mediastreamer2 filter to be used for rendering video. This is for advanced users of the library, mainly to workaround hardware/driver bugs. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="video_dscp">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_video_dscp">
						<return completetype="int" type="int">
							<description>
								<para>The current DSCP value </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the DSCP field for outgoing video streams. The DSCP defines the quality of service in IP packets. 
								<description>
									<para>The current DSCP value </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_video_dscp">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
							<argument completetype="int" name="dscp" type="int">
								<description>
									

									<para>The DSCP value to set </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the DSCP field for outgoing video streams. The DSCP defines the quality of service in IP packets. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="video_enabled">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_video_enabled">
						<return completetype="bool_t" type="bool_t"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore"/>
						</arguments>
						<detaileddescription>
							

							<para>
								Returns TRUE if either capture or display is enabled, FALSE otherwise. same as ( 
								<ref>linphone_core_video_capture_enabled</ref>
								 | 
								<ref>linphone_core_video_display_enabled</ref>
								 ) 
							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="video_jittcomp">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_video_jittcomp">
						<return completetype="int" type="int">
							<description>
								<para>The nominal video jitter buffer size in milliseconds </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Returns the nominal video jitter buffer size in milliseconds. 
								<description>
									<para>The nominal video jitter buffer size in milliseconds </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_video_jittcomp">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore"/>
							<argument completetype="int" name="milliseconds" type="int"/>
						</arguments>
						<detaileddescription>
							

							<para>Sets the nominal video jitter buffer size in milliseconds. The value takes effect immediately for all running and pending calls, if any. A value of 0 disables the jitter buffer. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="video_multicast_addr">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_video_multicast_addr">
						<return completetype="const char *" type="char">
							<description>
								<para>an ipv4/6 multicast address, or default value </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="core" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Use to get multicast address to be used for video stream. 
								<description>
									<para>an ipv4/6 multicast address, or default value </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_video_multicast_addr">
						<return completetype="int" type="int">
							<description>
								<para>0 in case of success </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 
									</para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="ip" type="char">
								<description>
									

									<para>an ipv4/6 multicast address </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Use to set multicast address to be used for video stream. 
								<description>
									<para>0 in case of success </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="video_multicast_enabled">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_video_multicast_enabled">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>
									true if subsequent calls will propose multicast ip set by 
									<ref>linphone_core_set_video_multicast_addr</ref>
									 
								</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="core" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Use to get multicast state of video stream. 
								<description>
									<para>
										true if subsequent calls will propose multicast ip set by 
										<ref>linphone_core_set_video_multicast_addr</ref>
										 
									</para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_enable_video_multicast">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="core" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 
									</para>
								</description>
								

							</argument>
							<argument completetype="bool_t" name="yesno" type="bool_t">
								<description>
									

									<para>
										if yes, subsequent outgoing calls will propose multicast ip set by 
										<ref>linphone_core_set_video_multicast_addr</ref>
										 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Use to enable multicast rtp for video stream. If enabled, outgoing calls put a multicast address from 
								<ref>linphone_core_get_video_multicast_addr</ref>
								 into video cline. In case of outgoing call video stream is sent to this multicast address. 
								<linebreak/>
								
 For incoming calls behavior is unchanged. 
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="video_multicast_ttl">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_video_multicast_ttl">
						<return completetype="int" type="int">
							<description>
								<para>a time to leave value </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="core" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Use to get multicast ttl to be used for video stream. 
								<description>
									<para>a time to leave value </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_video_multicast_ttl">
						<return completetype="int" type="int">
							<description>
								<para>0 in case of success </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 
									</para>
								</description>
								

							</argument>
							<argument completetype="int" name="ttl" type="int">
								<description>
									

									<para>value or -1 if not used. [0..255] default value is 1 </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Use to set multicast ttl to be used for video stream. 
								<description>
									<para>0 in case of success </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="video_policy">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_video_policy">
						<return completetype="const LinphoneVideoPolicy *" type="LinphoneVideoPolicy">
							<description>
								<para>The video policy being used </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the default policy for video. See 
								<ref>linphone_core_set_video_policy()</ref>
								 for more details. 
								<description>
									<para>The video policy being used </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_video_policy">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore"/>
							<argument completetype="const LinphoneVideoPolicy *" name="policy" type="LinphoneVideoPolicy"/>
						</arguments>
						<detaileddescription>
							

							<para>
								Sets the default policy for video. This policy defines whether:
								<itemizedlist>
									

									<listitem>
										<para>video shall be initiated by default for outgoing calls</para>
									</listitem>
									<listitem>
										<para>
											video shall be accepter by default for incoming calls 
											<parameterlist kind="param">
												<parameteritem>
													

													<parameternamelist>
														

														<parametername direction="in">lc</parametername>
														

													</parameternamelist>
													

													<parameterdescription>
														

														<para>LinphoneCore object </para>
													</parameterdescription>
													

												</parameteritem>
												

												<parameteritem>
													

													<parameternamelist>
														

														<parametername direction="in">policy</parametername>
														

													</parameternamelist>
													

													<parameterdescription>
														

														<para>The video policy to use </para>
													</parameterdescription>
													

												</parameteritem>
												

											</parameterlist>
											

										</para>
									</listitem>
								</itemizedlist>
								

							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="video_port">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_video_port">
						<return completetype="int" type="int">
							<description>
								<para>The UDP port used for video streaming </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the UDP port used for video streaming. 
								<description>
									<para>The UDP port used for video streaming </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_video_port">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
							<argument completetype="int" name="port" type="int">
								<description>
									

									<para>The UDP port to use for video streaming </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Sets the UDP port used for video streaming. A value of -1 will request the system to allocate the local port randomly. This is recommended in order to avoid firewall warnings. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="video_preset">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_video_preset">
						<return completetype="const char *" type="char">
							<description>
								<para>The name of the video preset used for video calls (can be NULL if the default video preset is used). </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the video preset used for video calls. 
								<description>
									<para>The name of the video preset used for video calls (can be NULL if the default video preset is used). </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_video_preset">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="preset" type="char">
								<description>
									

									<para>The name of the video preset to be used (can be NULL to use the default video preset). </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the video preset to be used for video calls. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="video_preview_enabled">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_video_preview_enabled">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>A boolean value telling whether video preview is enabled </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Tells whether video preview is enabled. 
								<description>
									<para>A boolean value telling whether video preview is enabled </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_enable_video_preview">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>LinphoneCore object </para>
								</description>
								

							</argument>
							<argument completetype="bool_t" name="val" type="bool_t">
								<description>
									

									<para>A boolean value telling whether the video preview is to be shown</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Controls video preview enablement. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="video_source_reuse_enabled">
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_enable_video_source_reuse">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 object 
									</para>
								</description>
								

							</argument>
							<argument completetype="bool_t" name="enable" type="bool_t">
								<description>
									

									<para>TRUE to enable video source reuse. FALSE to disable it for subsequent calls. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Enable or disable video source reuse when switching from preview to actual video call.</para>
							<para>This source reuse is useful when you always display the preview, even before calls are initiated. By keeping the video source for the transition to a real video call, you will smooth out the source close/reopen cycle.</para>
							<para>
								This function does not have any effect durfing calls. It just indicates the 
								<ref>LinphoneCore</ref>
								 to initiate future calls with video source reuse or not. Also, at the end of a video call, the source will be closed whatsoever for now. 
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="zrtp_secrets_file">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_get_zrtp_secrets_file">
						<return completetype="const char *" type="char">
							<description>
								<para>The path to the file storing the zrtp secrets cache. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 object. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the path to the file storing the zrtp secrets cache. 
								<description>
									<para>The path to the file storing the zrtp secrets cache. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_set_zrtp_secrets_file">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
								<description>
									

									<para>
										<ref>LinphoneCore</ref>
										 object 
									</para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="file" type="char">
								<description>
									

									<para>The path to the file to use to store the zrtp secrets cache. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the path to the file storing the zrtp secrets cache. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
			</properties>
			<detaileddescription>
				

				<para>
					Linphone core main object created by function 
					<ref>linphone_core_new()</ref>
					 . 
				</para>
				        
			</detaileddescription>
			
        
		</class>
		<class cfunctionprefix="linphone_core_cbs_" deprecated="false" destroyable="false" name="LinphoneCoreCbs" refcountable="true">
			<events>
				<event deprecated="false" name="LinphoneCoreCbsAuthenticationRequestedCb">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>the LinphoneCore </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneAuthInfo *" name="auth_info" type="LinphoneAuthInfo">
							<description>
								

								<para>a LinphoneAuthInfo pre-filled with username, realm and domain values as much as possible </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneAuthMethod" name="method" type="LinphoneAuthMethod">
							<description>
								

								<para>
									the type of authentication requested Application shall reply to this callback using 
									<ref>linphone_core_add_auth_info()</ref>
									. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Callback for requesting authentication information to application or user. </para>
						        
					</detaileddescription>
					
        
				</event>
				<event deprecated="false" name="LinphoneCoreCbsBuddyInfoUpdatedCb">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore"/>
						<argument completetype="LinphoneFriend *" name="lf" type="LinphoneFriend"/>
					</arguments>
					<detaileddescription>
						

						<para>Callback prototype </para>
						        
					</detaileddescription>
					
        
				</event>
				<event deprecated="false" name="LinphoneCoreCbsCallEncryptionChangedCb">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>the LinphoneCore </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneCall *" name="call" type="LinphoneCall">
							<description>
								

								<para>the call on which encryption is changed. </para>
							</description>
							

						</argument>
						<argument completetype="bool_t" name="on" type="bool_t">
							<description>
								

								<para>whether encryption is activated. </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="authentication_token" type="char">
							<description>
								

								<para>an authentication_token, currently set for ZRTP kind of encryption only. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Call encryption changed callback. </para>
						        
					</detaileddescription>
					
        
				</event>
				<event deprecated="false" name="LinphoneCoreCbsCallLogUpdatedCb">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>the LinphoneCore </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneCallLog *" name="newcl" type="LinphoneCallLog">
							<description>
								

								<para>the new call log entry added. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Callback to notify a new call-log entry has been added. This is done typically when a call terminates. </para>
						        
					</detaileddescription>
					
        
				</event>
				<event deprecated="false" name="LinphoneCoreCbsCallStateChangedCb">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>the LinphoneCore </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneCall *" name="call" type="LinphoneCall">
							<description>
								

								<para>the call object whose state is changed. </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneCallState" name="cstate" type="LinphoneCallState">
							<description>
								

								<para>the new state of the call </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="message" type="char">
							<description>
								

								<para>a non NULL informational message about the state. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Call state notification callback. </para>
						        
					</detaileddescription>
					
        
				</event>
				<event deprecated="false" name="LinphoneCoreCbsCallStatsUpdatedCb">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>the LinphoneCore </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneCall *" name="call" type="LinphoneCall">
							<description>
								

								<para>the call </para>
							</description>
							

						</argument>
						<argument completetype="const LinphoneCallStats *" name="stats" type="LinphoneCallStats">
							<description>
								

								<para>the call statistics. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Callback for receiving quality statistics for calls. </para>
						        
					</detaileddescription>
					
        
				</event>
				<event deprecated="false" name="LinphoneCoreCbsConfiguringStatusCb">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>the LinphoneCore </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneConfiguringState" name="status" type="LinphoneConfiguringState"/>
						<argument completetype="const char *" name="message" type="char">
							<description>
								

								<para>informational message. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Callback prototype for configuring status changes notification </para>
						        
					</detaileddescription>
					
        
				</event>
				<event deprecated="false" name="LinphoneCoreCbsDtmfReceivedCb">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>the linphone core </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneCall *" name="call" type="LinphoneCall">
							<description>
								

								<para>the call that received the dtmf </para>
							</description>
							

						</argument>
						<argument completetype="int" name="dtmf" type="int">
							<description>
								

								<para>the ascii code of the dtmf </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Callback for being notified of DTMFs received. </para>
						        
					</detaileddescription>
					
        
				</event>
				<event deprecated="false" name="LinphoneCoreCbsFriendListCreatedCb">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>LinphoneCore object </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneFriendList *" name="list" type="LinphoneFriendList">
							<description>
								

								<para>LinphoneFriendList object </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Callback prototype for reporting when a friend list has been added to the core friends list. </para>
						        
					</detaileddescription>
					
        
				</event>
				<event deprecated="false" name="LinphoneCoreCbsFriendListRemovedCb">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>LinphoneCore object </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneFriendList *" name="list" type="LinphoneFriendList">
							<description>
								

								<para>LinphoneFriendList object </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Callback prototype for reporting when a friend list has been removed from the core friends list. </para>
						        
					</detaileddescription>
					
        
				</event>
				<event deprecated="false" name="LinphoneCoreCbsGlobalStateChangedCb">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									the 
									<ref>LinphoneCore</ref>
									. 
								</para>
							</description>
							

						</argument>
						<argument completetype="LinphoneGlobalState" name="gstate" type="LinphoneGlobalState">
							<description>
								

								<para>the global state </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="message" type="char">
							<description>
								

								<para>informational message. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Global state notification callback. </para>
						        
					</detaileddescription>
					
        
				</event>
				<event deprecated="false" name="LinphoneCoreCbsInfoReceivedCb">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>the LinphoneCore </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneCall *" name="call" type="LinphoneCall">
							<description>
								

								<para>the call whose info message belongs to. </para>
							</description>
							

						</argument>
						<argument completetype="const LinphoneInfoMessage *" name="msg" type="LinphoneInfoMessage">
							<description>
								

								<para>the info message. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Callback prototype for receiving info messages. </para>
						        
					</detaileddescription>
					
        
				</event>
				<event deprecated="false" name="LinphoneCoreCbsIsComposingReceivedCb">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									<ref>LinphoneCore</ref>
									 object 
								</para>
							</description>
							

						</argument>
						<argument completetype="LinphoneChatRoom *" name="room" type="LinphoneChatRoom">
							<description>
								

								<para>
									<ref>LinphoneChatRoom</ref>
									 involved in the conversation. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Is composing notification callback prototype.</para>
						<para/>
						        
					</detaileddescription>
					
        
				</event>
				<event deprecated="false" name="LinphoneCoreCbsLogCollectionUploadProgressIndicationCb">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>LinphoneCore object </para>
							</description>
							

						</argument>
						<argument completetype="size_t" name="offset" type="size_t"/>
						<argument completetype="size_t" name="total" type="size_t"/>
					</arguments>
					<detaileddescription>
						

						<para>Callback prototype for reporting log collection upload progress indication. </para>
						        
					</detaileddescription>
					
        
				</event>
				<event deprecated="false" name="LinphoneCoreCbsLogCollectionUploadStateChangedCb">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>LinphoneCore object </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneCoreLogCollectionUploadState" name="state" type="LinphoneCoreLogCollectionUploadState">
							<description>
								

								<para>The state of the log collection upload </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="info" type="char">
							<description>
								

								<para>Additional information: error message in case of error state, URL of uploaded file in case of success. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Callback prototype for reporting log collection upload state change. </para>
						        
					</detaileddescription>
					
        
				</event>
				<event deprecated="false" name="LinphoneCoreCbsMessageReceivedCb">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									<ref>LinphoneCore</ref>
									 object 
								</para>
							</description>
							

						</argument>
						<argument completetype="LinphoneChatRoom *" name="room" type="LinphoneChatRoom">
							<description>
								

								<para>
									<ref>LinphoneChatRoom</ref>
									 involved in this conversation. Can be be created by the framework in case 
									<ref>the from </ref>
									 is not present in any chat room. 
								</para>
							</description>
							

						</argument>
						<argument completetype="LinphoneChatMessage *" name="message" type="LinphoneChatMessage"/>
					</arguments>
					<detaileddescription>
						

						<para>Chat message callback prototype</para>
						<para/>
						        
					</detaileddescription>
					
        
				</event>
				<event deprecated="false" name="LinphoneCoreCbsNetworkReachableCb">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>the LinphoneCore </para>
							</description>
							

						</argument>
						<argument completetype="bool_t" name="reachable" type="bool_t">
							<description>
								

								<para>true if network is reachable. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Callback prototype for reporting network change either automatically detected or notified by 
							<ref>linphone_core_set_network_reachable</ref>
							. 
						</para>
						        
					</detaileddescription>
					
        
				</event>
				<event deprecated="false" name="LinphoneCoreCbsNewSubscriptionRequestedCb">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									<ref>LinphoneCore</ref>
									 object 
								</para>
							</description>
							

						</argument>
						<argument completetype="LinphoneFriend *" name="lf" type="LinphoneFriend">
							<description>
								

								<para>
									<ref>LinphoneFriend</ref>
									 corresponding to the subscriber 
								</para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="url" type="char">
							<description>
								

								<para>of the subscriber Callback prototype </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Reports that a new subscription request has been received and wait for a decision. Status on this subscription request is notified by 
							<ref>changing policy </ref>
							 for this friend 
						</para>
						        
					</detaileddescription>
					
        
				</event>
				<event deprecated="false" name="LinphoneCoreCbsNotifyPresenceReceivedCb">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									<ref>LinphoneCore</ref>
									 object . 
								</para>
							</description>
							

						</argument>
						<argument completetype="LinphoneFriend *" name="lf" type="LinphoneFriend">
							<description>
								

								<para>
									Updated 
									<ref>LinphoneFriend</ref>
									 . 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Report status change for a friend previously 
							<ref>added </ref>
							 to 
							<ref>LinphoneCore</ref>
							. 
						</para>
						        
					</detaileddescription>
					
        
				</event>
				<event deprecated="false" name="LinphoneCoreCbsNotifyPresenceReceivedForUriOrTelCb">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>
									<ref>LinphoneCore</ref>
									 object 
								</para>
							</description>
							

						</argument>
						<argument completetype="LinphoneFriend *" name="lf" type="LinphoneFriend">
							<description>
								

								<para>
									<ref>LinphoneFriend</ref>
									 object 
								</para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="uri_or_tel" type="char">
							<description>
								

								<para>The URI or phone number for which teh presence model has changed </para>
							</description>
							

						</argument>
						<argument completetype="const LinphonePresenceModel *" name="presence_model" type="LinphonePresenceModel">
							<description>
								

								<para>The new presence model </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Reports presence model change for a specific URI or phone number of a friend </para>
						        
					</detaileddescription>
					
        
				</event>
				<event deprecated="false" name="LinphoneCoreCbsNotifyReceivedCb">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore"/>
						<argument completetype="LinphoneEvent *" name="lev" type="LinphoneEvent"/>
						<argument completetype="const char *" name="notified_event" type="char"/>
						<argument completetype="const LinphoneContent *" name="body" type="LinphoneContent"/>
					</arguments>
					<detaileddescription>
						

						<para>Callback prototype for notifying the application about notification received from the network. </para>
						        
					</detaileddescription>
					
        
				</event>
				<event deprecated="false" name="LinphoneCoreCbsPublishStateChangedCb">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore"/>
						<argument completetype="LinphoneEvent *" name="lev" type="LinphoneEvent"/>
						<argument completetype="LinphonePublishState" name="state" type="LinphonePublishState"/>
					</arguments>
					<detaileddescription>
						

						<para>Callback prototype for notifying the application about changes of publish states. </para>
						        
					</detaileddescription>
					
        
				</event>
				<event deprecated="false" name="LinphoneCoreCbsReferReceivedCb">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore"/>
						<argument completetype="const char *" name="refer_to" type="char"/>
					</arguments>
					<detaileddescription>
						

						<para>Callback prototype </para>
						        
					</detaileddescription>
					
        
				</event>
				<event deprecated="false" name="LinphoneCoreCbsRegistrationStateChangedCb">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore"/>
						<argument completetype="LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig"/>
						<argument completetype="LinphoneRegistrationState" name="cstate" type="LinphoneRegistrationState"/>
						<argument completetype="const char *" name="message" type="char"/>
					</arguments>
					<detaileddescription>
						

						<para>Registration state notification callback prototype </para>
						        
					</detaileddescription>
					
        
				</event>
				<event deprecated="false" name="LinphoneCoreCbsSubscriptionStateChangedCb">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore"/>
						<argument completetype="LinphoneEvent *" name="lev" type="LinphoneEvent"/>
						<argument completetype="LinphoneSubscriptionState" name="state" type="LinphoneSubscriptionState"/>
					</arguments>
					<detaileddescription>
						

						<para>Callback prototype for notifying the application about changes of subscription states, including arrival of new subscriptions. </para>
						        
					</detaileddescription>
					
        
				</event>
				<event deprecated="false" name="LinphoneCoreCbsTransferStateChangedCb">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>the LinphoneCore </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneCall *" name="transfered" type="LinphoneCall">
							<description>
								

								<para>the call that was transfered </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneCallState" name="new_call_state" type="LinphoneCallState">
							<description>
								

								<para>the state of the call to transfer target at the far end. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Callback for notifying progresses of transfers. </para>
						        
					</detaileddescription>
					
        
				</event>
			</events>
			<instancemethods>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_cbs_ref">
					<return completetype="LinphoneCoreCbs *" type="LinphoneCoreCbs"/>
					<arguments>
						<argument completetype="LinphoneCoreCbs *" name="cbs" type="LinphoneCoreCbs"/>
					</arguments>
					<detaileddescription>
						

						<para>Increment the reference counter. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_cbs_unref">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCoreCbs *" name="cbs" type="LinphoneCoreCbs"/>
					</arguments>
					<detaileddescription>
						

						<para>Decrement the reference counter. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
			</instancemethods>
			<properties>
				<property name="authentication_requested">
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_cbs_set_authentication_requested">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCoreCbs *" name="cbs" type="LinphoneCoreCbs">
								<description>
									

									<para>
										A 
										<ref>LinphoneCoreCbs</ref>
										. 
									</para>
								</description>
								

							</argument>
							<argument completetype="LinphoneCoreCbsAuthenticationRequestedCb" name="cb" type="LinphoneCoreCbsAuthenticationRequestedCb">
								<description>
									

									<para>The callback. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Set the 
								<ref>LinphoneCoreCbsAuthenticationRequestedCb</ref>
								 callback.' 
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="buddy_info_updated">
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_cbs_set_buddy_info_updated">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCoreCbs *" name="cbs" type="LinphoneCoreCbs">
								<description>
									

									<para>
										A 
										<ref>LinphoneCoreCbs</ref>
										. 
									</para>
								</description>
								

							</argument>
							<argument completetype="LinphoneCoreCbsBuddyInfoUpdatedCb" name="cb" type="LinphoneCoreCbsBuddyInfoUpdatedCb">
								<description>
									

									<para>The callback. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Set the 
								<ref>LinphoneCoreCbsBuddyInfoUpdatedCb</ref>
								 callback. 
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="call_encryption_changed">
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_cbs_set_call_encryption_changed">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCoreCbs *" name="cbs" type="LinphoneCoreCbs">
								<description>
									

									<para>
										A 
										<ref>LinphoneCoreCbs</ref>
										. 
									</para>
								</description>
								

							</argument>
							<argument completetype="LinphoneCoreCbsCallEncryptionChangedCb" name="cb" type="LinphoneCoreCbsCallEncryptionChangedCb">
								<description>
									

									<para>The callback. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Set the 
								<ref>LinphoneCoreCbsCallEncryptionChangedCb</ref>
								 callback. 
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="call_log_updated">
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_cbs_set_call_log_updated">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCoreCbs *" name="cbs" type="LinphoneCoreCbs">
								<description>
									

									<para>
										A 
										<ref>LinphoneCoreCbs</ref>
										. 
									</para>
								</description>
								

							</argument>
							<argument completetype="LinphoneCoreCbsCallLogUpdatedCb" name="cb" type="LinphoneCoreCbsCallLogUpdatedCb">
								<description>
									

									<para>The callback. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Set the 
								<ref>LinphoneCoreCbsCallLogUpdatedCb</ref>
								 callback. 
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="call_state_changed">
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_cbs_set_call_state_changed">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCoreCbs *" name="cbs" type="LinphoneCoreCbs">
								<description>
									

									<para>
										A 
										<ref>LinphoneCoreCbs</ref>
										. 
									</para>
								</description>
								

							</argument>
							<argument completetype="LinphoneCoreCbsCallStateChangedCb" name="cb" type="LinphoneCoreCbsCallStateChangedCb">
								<description>
									

									<para>The callback. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Set the 
								<ref>LinphoneCoreCbsCallStateChangedCb</ref>
								 callback. 
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="call_stats_updated">
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_cbs_set_call_stats_updated">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCoreCbs *" name="cbs" type="LinphoneCoreCbs">
								<description>
									

									<para>
										A 
										<ref>LinphoneCoreCbs</ref>
										. 
									</para>
								</description>
								

							</argument>
							<argument completetype="LinphoneCoreCbsCallStatsUpdatedCb" name="cb" type="LinphoneCoreCbsCallStatsUpdatedCb">
								<description>
									

									<para>The callback. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Set the 
								<ref>LinphoneCoreCbsCallStatsUpdatedCb</ref>
								 callback. 
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="configuring_status">
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_cbs_set_configuring_status">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCoreCbs *" name="cbs" type="LinphoneCoreCbs">
								<description>
									

									<para>
										A 
										<ref>LinphoneCoreCbs</ref>
										. 
									</para>
								</description>
								

							</argument>
							<argument completetype="LinphoneCoreCbsConfiguringStatusCb" name="cb" type="LinphoneCoreCbsConfiguringStatusCb">
								<description>
									

									<para>The callback. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Set the 
								<ref>LinphoneCoreCbsConfiguringStatusCb</ref>
								 callback. 
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="dtmf_received">
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_cbs_set_dtmf_received">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCoreCbs *" name="cbs" type="LinphoneCoreCbs">
								<description>
									

									<para>
										A 
										<ref>LinphoneCoreCbs</ref>
										. 
									</para>
								</description>
								

							</argument>
							<argument completetype="LinphoneCoreCbsDtmfReceivedCb" name="cb" type="LinphoneCoreCbsDtmfReceivedCb">
								<description>
									

									<para>The callback. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Set the 
								<ref>LinphoneCoreCbsDtmfReceivedCb</ref>
								 callback. 
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="friend_list_created">
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_cbs_set_friend_list_created">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCoreCbs *" name="cbs" type="LinphoneCoreCbs">
								<description>
									

									<para>
										A 
										<ref>LinphoneCoreCbs</ref>
										. 
									</para>
								</description>
								

							</argument>
							<argument completetype="LinphoneCoreCbsFriendListCreatedCb" name="cb" type="LinphoneCoreCbsFriendListCreatedCb">
								<description>
									

									<para>The callback. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Set the 
								<ref>LinphoneCoreCbsFriendListCreatedCb</ref>
								 callback. 
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="friend_list_removed">
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_cbs_set_friend_list_removed">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCoreCbs *" name="cbs" type="LinphoneCoreCbs">
								<description>
									

									<para>
										A 
										<ref>LinphoneCoreCbs</ref>
										. 
									</para>
								</description>
								

							</argument>
							<argument completetype="LinphoneCoreCbsFriendListRemovedCb" name="cb" type="LinphoneCoreCbsFriendListRemovedCb">
								<description>
									

									<para>The callback. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Set the 
								<ref>LinphoneCoreCbsFriendListRemovedCb</ref>
								 callback. 
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="info_received">
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_cbs_set_info_received">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCoreCbs *" name="cbs" type="LinphoneCoreCbs">
								<description>
									

									<para>
										A 
										<ref>LinphoneCoreCbs</ref>
										. 
									</para>
								</description>
								

							</argument>
							<argument completetype="LinphoneCoreCbsInfoReceivedCb" name="cb" type="LinphoneCoreCbsInfoReceivedCb">
								<description>
									

									<para>The callback. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Set the 
								<ref>LinphoneCoreCbsInfoReceivedCb</ref>
								 callback. 
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="is_composing_received">
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_cbs_set_is_composing_received">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCoreCbs *" name="cbs" type="LinphoneCoreCbs">
								<description>
									

									<para>
										A 
										<ref>LinphoneCoreCbs</ref>
										. 
									</para>
								</description>
								

							</argument>
							<argument completetype="LinphoneCoreCbsIsComposingReceivedCb" name="cb" type="LinphoneCoreCbsIsComposingReceivedCb">
								<description>
									

									<para>The callback. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Set the 
								<ref>LinphoneCoreCbsIsComposingReceivedCb</ref>
								 callback. 
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="log_collection_upload_progress_indication">
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_cbs_set_log_collection_upload_progress_indication">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCoreCbs *" name="cbs" type="LinphoneCoreCbs">
								<description>
									

									<para>
										A 
										<ref>LinphoneCoreCbs</ref>
										. 
									</para>
								</description>
								

							</argument>
							<argument completetype="LinphoneCoreCbsLogCollectionUploadProgressIndicationCb" name="cb" type="LinphoneCoreCbsLogCollectionUploadProgressIndicationCb">
								<description>
									

									<para>The callback. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Set the 
								<ref>LinphoneCoreCbsLogCollectionUploadProgressIndicationCb</ref>
								 callback. 
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="log_collection_upload_state_changed">
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_cbs_set_log_collection_upload_state_changed">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCoreCbs *" name="cbs" type="LinphoneCoreCbs">
								<description>
									

									<para>
										A 
										<ref>LinphoneCoreCbs</ref>
										. 
									</para>
								</description>
								

							</argument>
							<argument completetype="LinphoneCoreCbsLogCollectionUploadStateChangedCb" name="cb" type="LinphoneCoreCbsLogCollectionUploadStateChangedCb">
								<description>
									

									<para>The callback. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Set the 
								<ref>LinphoneCoreCbsLogCollectionUploadStateChangedCb</ref>
								 callback. 
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="message_received">
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_cbs_set_message_received">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCoreCbs *" name="cbs" type="LinphoneCoreCbs">
								<description>
									

									<para>
										A 
										<ref>LinphoneCoreCbs</ref>
										. 
									</para>
								</description>
								

							</argument>
							<argument completetype="LinphoneCoreCbsMessageReceivedCb" name="cb" type="LinphoneCoreCbsMessageReceivedCb">
								<description>
									

									<para>The callback. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Set the 
								<ref>LinphoneCoreCbsMessageReceivedCb</ref>
								 callback. 
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="network_reachable">
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_cbs_set_network_reachable">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCoreCbs *" name="cbs" type="LinphoneCoreCbs">
								<description>
									

									<para>
										A 
										<ref>LinphoneCoreCbs</ref>
										. 
									</para>
								</description>
								

							</argument>
							<argument completetype="LinphoneCoreCbsNetworkReachableCb" name="cb" type="LinphoneCoreCbsNetworkReachableCb">
								<description>
									

									<para>The callback. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Set the 
								<ref>LinphoneCoreCbsNetworkReachableCb</ref>
								 callback. 
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="new_subscription_requested">
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_cbs_set_new_subscription_requested">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCoreCbs *" name="cbs" type="LinphoneCoreCbs">
								<description>
									

									<para>
										A 
										<ref>LinphoneCoreCbs</ref>
										. 
									</para>
								</description>
								

							</argument>
							<argument completetype="LinphoneCoreCbsNewSubscriptionRequestedCb" name="cb" type="LinphoneCoreCbsNewSubscriptionRequestedCb">
								<description>
									

									<para>The callback. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Set the 
								<ref>LinphoneCoreCbsNewSubscriptionRequestedCb</ref>
								 callback. 
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="notify_presence_received">
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_cbs_set_notify_presence_received">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCoreCbs *" name="cbs" type="LinphoneCoreCbs">
								<description>
									

									<para>
										A 
										<ref>LinphoneCoreCbs</ref>
										. 
									</para>
								</description>
								

							</argument>
							<argument completetype="LinphoneCoreCbsNotifyPresenceReceivedCb" name="cb" type="LinphoneCoreCbsNotifyPresenceReceivedCb">
								<description>
									

									<para>The callback. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Set the 
								<ref>LinphoneCoreCbsNotifyPresenceReceivedCb</ref>
								 callback. 
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="notify_presence_received_for_uri_or_tel">
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_cbs_set_notify_presence_received_for_uri_or_tel">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCoreCbs *" name="cbs" type="LinphoneCoreCbs">
								<description>
									

									<para>
										A 
										<ref>LinphoneCoreCbs</ref>
										. 
									</para>
								</description>
								

							</argument>
							<argument completetype="LinphoneCoreCbsNotifyPresenceReceivedForUriOrTelCb" name="cb" type="LinphoneCoreCbsNotifyPresenceReceivedForUriOrTelCb">
								<description>
									

									<para>The callback. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Set the 
								<ref>LinphoneCoreCbsNotifyPresenceReceivedForUriOrTelCb</ref>
								 callback. 
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="notify_received">
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_cbs_set_notify_received">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCoreCbs *" name="cbs" type="LinphoneCoreCbs">
								<description>
									

									<para>
										A 
										<ref>LinphoneCoreCbs</ref>
										. 
									</para>
								</description>
								

							</argument>
							<argument completetype="LinphoneCoreCbsNotifyReceivedCb" name="cb" type="LinphoneCoreCbsNotifyReceivedCb">
								<description>
									

									<para>The callback. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Set the 
								<ref>LinphoneCoreCbsNotifyReceivedCb</ref>
								 callback. 
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="publish_state_changed">
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_cbs_set_publish_state_changed">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCoreCbs *" name="cbs" type="LinphoneCoreCbs">
								<description>
									

									<para>
										A 
										<ref>LinphoneCoreCbs</ref>
										. 
									</para>
								</description>
								

							</argument>
							<argument completetype="LinphoneCoreCbsPublishStateChangedCb" name="cb" type="LinphoneCoreCbsPublishStateChangedCb">
								<description>
									

									<para>The callback. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Set the 
								<ref>LinphoneCoreCbsPublishStateChangedCb</ref>
								 callback. 
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="refer_received">
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_cbs_set_refer_received">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCoreCbs *" name="cbs" type="LinphoneCoreCbs">
								<description>
									

									<para>
										A 
										<ref>LinphoneCoreCbs</ref>
										. 
									</para>
								</description>
								

							</argument>
							<argument completetype="LinphoneCoreCbsReferReceivedCb" name="cb" type="LinphoneCoreCbsReferReceivedCb">
								<description>
									

									<para>The callback. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Set the 
								<ref>LinphoneCoreCbsReferReceivedCb</ref>
								 callback. 
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="registration_state_changed">
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_cbs_set_registration_state_changed">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCoreCbs *" name="cbs" type="LinphoneCoreCbs">
								<description>
									

									<para>
										A 
										<ref>LinphoneCoreCbs</ref>
										. 
									</para>
								</description>
								

							</argument>
							<argument completetype="LinphoneCoreCbsRegistrationStateChangedCb" name="cb" type="LinphoneCoreCbsRegistrationStateChangedCb">
								<description>
									

									<para>The callback. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Set the 
								<ref>LinphoneCoreCbsRegistrationStateChangedCb</ref>
								 callback. 
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="subscription_state_changed">
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_cbs_set_subscription_state_changed">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCoreCbs *" name="cbs" type="LinphoneCoreCbs">
								<description>
									

									<para>
										A 
										<ref>LinphoneCoreCbs</ref>
										. 
									</para>
								</description>
								

							</argument>
							<argument completetype="LinphoneCoreCbsSubscriptionStateChangedCb" name="cb" type="LinphoneCoreCbsSubscriptionStateChangedCb">
								<description>
									

									<para>The callback. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Set the 
								<ref>LinphoneCoreCbsSubscriptionStateChangedCb</ref>
								 callback. 
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="transfer_state_changed">
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_cbs_set_transfer_state_changed">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCoreCbs *" name="cbs" type="LinphoneCoreCbs">
								<description>
									

									<para>
										A 
										<ref>LinphoneCoreCbs</ref>
										. 
									</para>
								</description>
								

							</argument>
							<argument completetype="LinphoneCoreCbsTransferStateChangedCb" name="cb" type="LinphoneCoreCbsTransferStateChangedCb">
								<description>
									

									<para>The callback. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Set the 
								<ref>LinphoneCoreCbsTransferStateChangedCb</ref>
								 callback. 
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="user_data">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_cbs_get_user_data">
						<return completetype="void *" type="void"/>
						<arguments>
							<argument completetype="LinphoneCoreCbs *" name="cbs" type="LinphoneCoreCbs"/>
						</arguments>
						<detaileddescription>
							

							<para>Get the user pointer. </para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_cbs_set_user_data">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCoreCbs *" name="cbs" type="LinphoneCoreCbs"/>
							<argument completetype="void *" name="user_data" type="void"/>
						</arguments>
						<detaileddescription>
							

							<para>Set private data to be get from each callbacks. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
			</properties>
			<detaileddescription>
				

				<para>
					That class holds all the callbacks which are called by 
					<ref>LinphoneCore</ref>
					.
				</para>
				<para>
					Use 
					<ref>linphone_factory_create_core_cbs()</ref>
					 to create an instance. Then, call the callback setters on the events you need to monitor and pass the object to a 
					<ref>LinphoneCore</ref>
					 instance through 
					<ref>linphone_core_add_listener()</ref>
					.
				</para>
				<para>That class is inherited from #belle_sip_object_t. </para>
				        
			</detaileddescription>
			
        
		</class>
		<class cfunctionprefix="linphone_core_v_table_" deprecated="true" destroyable="true" name="LinphoneCoreVTable" refcountable="false">
			<classmethods>
				<classmethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_v_table_new">
					<return completetype="LinphoneCoreVTable *" type="LinphoneCoreVTable">
						<description>
							<para>newly allocated vtable </para>
						</description>
						

					</return>
					<arguments/>
					<detaileddescription>
						

						<para>
							Instantiate a vtable with all arguments set to NULL 
							<description>
								<para>newly allocated vtable </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</classmethod>
			</classmethods>
			<instancemethods>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_v_table_destroy">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneCoreVTable *" name="table" type="LinphoneCoreVTable">
							<description>
								

								<para>to be destroyed </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Destroy a vtable. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
			</instancemethods>
			<properties>
				<property name="user_data">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_v_table_get_user_data">
						<return completetype="void *" type="void">
							<description>
								<para>the data attached to the vtable </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneCoreVTable *" name="table" type="LinphoneCoreVTable">
								<description>
									

									<para>the vtable </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets a user data pointer in the vtable. 
								<description>
									<para>the data attached to the vtable </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_core_v_table_set_user_data">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneCoreVTable *" name="table" type="LinphoneCoreVTable">
								<description>
									

									<para>the vtable </para>
								</description>
								

							</argument>
							<argument completetype="void *" name="data" type="void">
								<description>
									

									<para>the user data to attach </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Sets a user data pointer in the vtable. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
			</properties>
			<detaileddescription>
				

				<para>This structure holds all callbacks that the application should implement. None is mandatory. </para>
				        
			</detaileddescription>
			
        
		</class>
		<class cfunctionprefix="linphone_error_info_" deprecated="false" destroyable="false" name="LinphoneErrorInfo" refcountable="false">
			<properties>
				<property name="details">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/error_info.h" name="linphone_error_info_get_details">
						<return completetype="const char *" type="char">
							<description>
								<para>More details about the failure </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneErrorInfo *" name="ei" type="LinphoneErrorInfo">
								<description>
									

									<para>ErrorInfo object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Provides additional information regarding the failure. With SIP protocol, the &quot;Reason&quot; and &quot;Warning&quot; headers are returned. 
								<description>
									<para>More details about the failure </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="phrase">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/error_info.h" name="linphone_error_info_get_phrase">
						<return completetype="const char *" type="char">
							<description>
								<para>The error phrase </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneErrorInfo *" name="ei" type="LinphoneErrorInfo">
								<description>
									

									<para>ErrorInfo object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get textual phrase from the error info. This is the text that is provided by the peer in the protocol (SIP). 
								<description>
									<para>The error phrase </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="protocol_code">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/error_info.h" name="linphone_error_info_get_protocol_code">
						<return completetype="int" type="int">
							<description>
								<para>The status code </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneErrorInfo *" name="ei" type="LinphoneErrorInfo">
								<description>
									

									<para>ErrorInfo object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the status code from the low level protocol (ex a SIP status code). 
								<description>
									<para>The status code </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="reason">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/error_info.h" name="linphone_error_info_get_reason">
						<return completetype="LinphoneReason" type="LinphoneReason">
							<description>
								<para>
									A 
									<ref>LinphoneReason</ref>
									 
								</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneErrorInfo *" name="ei" type="LinphoneErrorInfo">
								<description>
									

									<para>ErrorInfo object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get reason code from the error info. 
								<description>
									<para>
										A 
										<ref>LinphoneReason</ref>
										 
									</para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
			</properties>
			<detaileddescription>
				

				<para>Object representing full details about a signaling error or status. All LinphoneErrorInfo object returned by the liblinphone API are readonly and transcients. For safety they must be used immediately after obtaining them. Any other function call to the liblinphone may change their content or invalidate the pointer. </para>
				        
			</detaileddescription>
			
        
		</class>
		<class cfunctionprefix="linphone_event_" deprecated="false" destroyable="false" name="LinphoneEvent" refcountable="true">
			<instancemethods>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/event.h" name="linphone_event_accept_subscription">
					<return completetype="int" type="int"/>
					<arguments>
						<argument completetype="LinphoneEvent *" name="lev" type="LinphoneEvent"/>
					</arguments>
					<detaileddescription>
						

						<para>Accept an incoming subcription. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/event.h" name="linphone_event_add_custom_header">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneEvent *" name="ev" type="LinphoneEvent">
							<description>
								

								<para>the LinphoneEvent </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="name" type="char">
							<description>
								

								<para>header's name </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="value" type="char">
							<description>
								

								<para>the header's value. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Add a custom header to an outgoing susbscription or publish. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/event.h" name="linphone_event_deny_subscription">
					<return completetype="int" type="int"/>
					<arguments>
						<argument completetype="LinphoneEvent *" name="lev" type="LinphoneEvent"/>
						<argument completetype="LinphoneReason" name="reason" type="LinphoneReason"/>
					</arguments>
					<detaileddescription>
						

						<para>Deny an incoming subscription with given reason. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/event.h" name="linphone_event_get_custom_header">
					<return completetype="const char *" type="char">
						<description>
							<para>the header's value or NULL if such header doesn't exist. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneEvent *" name="ev" type="LinphoneEvent">
							<description>
								

								<para>the LinphoneEvent </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="name" type="char">
							<description>
								

								<para>header's name </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Obtain the value of a given header for an incoming subscription. 
							<description>
								<para>the header's value or NULL if such header doesn't exist. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/event.h" name="linphone_event_notify">
					<return completetype="int" type="int">
						<description>
							<para>0 if successful, -1 otherwise. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneEvent *" name="lev" type="LinphoneEvent">
							<description>
								

								<para>
									a 
									<ref>LinphoneEvent</ref>
									 corresponding to an incoming subscription previously received and accepted. 
								</para>
							</description>
							

						</argument>
						<argument completetype="const LinphoneContent *" name="body" type="LinphoneContent">
							<description>
								

								<para>an optional body containing the actual notification data. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Send a notification. 
							<description>
								<para>0 if successful, -1 otherwise. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/event.h" name="linphone_event_pause_publish">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneEvent *" name="lev" type="LinphoneEvent">
							<description>
								

								<para>
									<ref>LinphoneEvent</ref>
									 object. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Prevent an event from refreshing its publish. This is useful to let registrations to expire naturally (or) when the application wants to keep control on when refreshes are sent. The refreshing operations can be resumed with 
							<ref>linphone_proxy_config_refresh_register()</ref>
							. 
						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/event.h" name="linphone_event_ref">
					<return completetype="LinphoneEvent *" type="LinphoneEvent"/>
					<arguments>
						<argument completetype="LinphoneEvent *" name="lev" type="LinphoneEvent"/>
					</arguments>
					<detaileddescription>
						

						<para>
							Increase reference count of LinphoneEvent. By default LinphoneEvents created by the core are owned by the core only. An application that wishes to retain a reference to it must call 
							<ref>linphone_event_ref()</ref>
							. When this reference is no longer needed, 
							<ref>linphone_event_unref()</ref>
							 must be called. 
						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/event.h" name="linphone_event_refresh_publish">
					<return completetype="int" type="int">
						<description>
							<para>0 if successful, -1 otherwise. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneEvent *" name="lev" type="LinphoneEvent">
							<description>
								

								<para>LinphoneEvent object. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Refresh an outgoing publish keeping the same body. 
							<description>
								<para>0 if successful, -1 otherwise. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/event.h" name="linphone_event_refresh_subscribe">
					<return completetype="int" type="int">
						<description>
							<para>0 if successful, -1 otherwise. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneEvent *" name="lev" type="LinphoneEvent">
							<description>
								

								<para>LinphoneEvent object. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Refresh an outgoing subscription keeping the same body. 
							<description>
								<para>0 if successful, -1 otherwise. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/event.h" name="linphone_event_send_publish">
					<return completetype="int" type="int"/>
					<arguments>
						<argument completetype="LinphoneEvent *" name="lev" type="LinphoneEvent">
							<description>
								

								<para>
									the 
									<ref>LinphoneEvent</ref>
									 
								</para>
							</description>
							

						</argument>
						<argument completetype="const LinphoneContent *" name="body" type="LinphoneContent">
							<description>
								

								<para>the new data to be published </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Send a publish created by 
							<ref>linphone_core_create_publish()</ref>
							. 
						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/event.h" name="linphone_event_send_subscribe">
					<return completetype="int" type="int">
						<description>
							<para>0 if successful, -1 otherwise. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneEvent *" name="ev" type="LinphoneEvent">
							<description>
								

								<para>the LinphoneEvent </para>
							</description>
							

						</argument>
						<argument completetype="const LinphoneContent *" name="body" type="LinphoneContent">
							<description>
								

								<para>optional content to attach with the subscription. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Send a subscription previously created by 
							<ref>linphone_core_create_subscribe()</ref>
							. 
							<description>
								<para>0 if successful, -1 otherwise. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/event.h" name="linphone_event_terminate">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneEvent *" name="lev" type="LinphoneEvent"/>
					</arguments>
					<detaileddescription>
						

						<para>
							Terminate an incoming or outgoing subscription that was previously acccepted, or a previous publication. The LinphoneEvent shall not be used anymore after this operation, unless the application explicitely took a reference on the object with 
							<ref>linphone_event_ref()</ref>
							. 
						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/event.h" name="linphone_event_unref">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneEvent *" name="lev" type="LinphoneEvent"/>
					</arguments>
					<detaileddescription>
						

						<para>
							Decrease reference count. 
							<see>linphone_event_ref() </see>
						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/event.h" name="linphone_event_update_publish">
					<return completetype="int" type="int"/>
					<arguments>
						<argument completetype="LinphoneEvent *" name="lev" type="LinphoneEvent">
							<description>
								

								<para>
									the 
									<ref>LinphoneEvent</ref>
									 
								</para>
							</description>
							

						</argument>
						<argument completetype="const LinphoneContent *" name="body" type="LinphoneContent">
							<description>
								

								<para>the new data to be published </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Update (refresh) a publish. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/event.h" name="linphone_event_update_subscribe">
					<return completetype="int" type="int"/>
					<arguments>
						<argument completetype="LinphoneEvent *" name="lev" type="LinphoneEvent">
							<description>
								

								<para>a LinphoneEvent </para>
							</description>
							

						</argument>
						<argument completetype="const LinphoneContent *" name="body" type="LinphoneContent">
							<description>
								

								<para>an optional body to include in the subscription update, may be NULL. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Update (refresh) an outgoing subscription, changing the body. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
			</instancemethods>
			<properties>
				<property name="core">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/event.h" name="linphone_event_get_core">
						<return completetype="LinphoneCore *" type="LinphoneCore"/>
						<arguments>
							<argument completetype="const LinphoneEvent *" name="lev" type="LinphoneEvent"/>
						</arguments>
						<detaileddescription>
							

							<para>Returns back pointer to the LinphoneCore that created this LinphoneEvent </para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="error_info">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/event.h" name="linphone_event_get_error_info">
						<return completetype="const LinphoneErrorInfo *" type="LinphoneErrorInfo"/>
						<arguments>
							<argument completetype="const LinphoneEvent *" name="lev" type="LinphoneEvent"/>
						</arguments>
						<detaileddescription>
							

							<para>Get full details about an error occured. </para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="from">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/event.h" name="linphone_event_get_from">
						<return completetype="const LinphoneAddress *" type="LinphoneAddress"/>
						<arguments>
							<argument completetype="const LinphoneEvent *" name="lev" type="LinphoneEvent"/>
						</arguments>
						<detaileddescription>
							

							<para>Get the &quot;from&quot; address of the subscription. </para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="name">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/event.h" name="linphone_event_get_name">
						<return completetype="const char *" type="char"/>
						<arguments>
							<argument completetype="const LinphoneEvent *" name="lev" type="LinphoneEvent"/>
						</arguments>
						<detaileddescription>
							

							<para>Get the name of the event as specified in the event package RFC. </para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="publish_state">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/event.h" name="linphone_event_get_publish_state">
						<return completetype="LinphonePublishState" type="LinphonePublishState"/>
						<arguments>
							<argument completetype="const LinphoneEvent *" name="lev" type="LinphoneEvent"/>
						</arguments>
						<detaileddescription>
							

							<para>
								Get publish state. If the event object was not created by a publish mechanism, 
								<ref>LinphonePublishNone</ref>
								 is returned. 
							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="reason">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/event.h" name="linphone_event_get_reason">
						<return completetype="LinphoneReason" type="LinphoneReason"/>
						<arguments>
							<argument completetype="const LinphoneEvent *" name="lev" type="LinphoneEvent"/>
						</arguments>
						<detaileddescription>
							

							<para>Return reason code (in case of error state reached). </para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="resource">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/event.h" name="linphone_event_get_resource">
						<return completetype="const LinphoneAddress *" type="LinphoneAddress"/>
						<arguments>
							<argument completetype="const LinphoneEvent *" name="lev" type="LinphoneEvent"/>
						</arguments>
						<detaileddescription>
							

							<para>Get the resource address of the subscription or publish. </para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="subscription_dir">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/event.h" name="linphone_event_get_subscription_dir">
						<return completetype="LinphoneSubscriptionDir" type="LinphoneSubscriptionDir"/>
						<arguments>
							<argument completetype="LinphoneEvent *" name="lev" type="LinphoneEvent"/>
						</arguments>
						<detaileddescription>
							

							<para>
								Get subscription direction. If the object wasn't created by a subscription mechanism, 
								<ref>LinphoneSubscriptionInvalidDir</ref>
								 is returned. 
							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="subscription_state">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/event.h" name="linphone_event_get_subscription_state">
						<return completetype="LinphoneSubscriptionState" type="LinphoneSubscriptionState"/>
						<arguments>
							<argument completetype="const LinphoneEvent *" name="lev" type="LinphoneEvent"/>
						</arguments>
						<detaileddescription>
							

							<para>
								Get subscription state. If the event object was not created by a subscription mechanism, 
								<ref>LinphoneSubscriptionNone</ref>
								 is returned. 
							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="user_data">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/event.h" name="linphone_event_get_user_data">
						<return completetype="void *" type="void"/>
						<arguments>
							<argument completetype="const LinphoneEvent *" name="ev" type="LinphoneEvent"/>
						</arguments>
						<detaileddescription>
							

							<para>Retrieve user pointer. </para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/event.h" name="linphone_event_set_user_data">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneEvent *" name="ev" type="LinphoneEvent"/>
							<argument completetype="void *" name="up" type="void"/>
						</arguments>
						<detaileddescription>
							

							<para>Set a user (application) pointer. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
			</properties>
			<detaileddescription>
				

				<para>
					Object representing an event state, which is subcribed or published. 
					<see>linphone_core_publish() </see>
					<see>linphone_core_subscribe() </see>
				</para>
				        
			</detaileddescription>
			
        
		</class>
		<class cfunctionprefix="linphone_factory_" deprecated="false" destroyable="false" name="LinphoneFactory" refcountable="false">
			<classmethods>
				<classmethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/factory.h" name="linphone_factory_get">
					<return completetype="LinphoneFactory *" type="LinphoneFactory">
						<description>
							<para>
								A pointer on the 
								<ref>LinphoneFactory</ref>
								 
							</para>
						</description>
						

					</return>
					<arguments/>
					<detaileddescription>
						

						<para>
							Create the 
							<ref>LinphoneFactory</ref>
							 if that has not been done and return a pointer on it. 
							<description>
								<para>
									A pointer on the 
									<ref>LinphoneFactory</ref>
									 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</classmethod>
			</classmethods>
			<instancemethods>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/factory.h" name="linphone_factory_create_address">
					<return completetype="LinphoneAddress *" type="LinphoneAddress">
						<description>
							<para>
								A new 
								<ref>LinphoneAddress</ref>
								. 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const LinphoneFactory *" name="factory" type="LinphoneFactory">
							<description>
								

								<para>
									The 
									<ref>LinphoneFactory</ref>
									 singleton. 
								</para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="addr" type="char">
							<description>
								

								<para>A string holding the SIP URI to parse. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Parse a string holding a SIP URI and create the according 
							<ref>LinphoneAddress</ref>
							 object. 
							<description>
								<para>
									A new 
									<ref>LinphoneAddress</ref>
									. 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/factory.h" name="linphone_factory_create_auth_info">
					<return completetype="LinphoneAuthInfo *" type="LinphoneAuthInfo">
						<description>
							<para>
								A 
								<ref>LinphoneAuthInfo</ref>
								 object. 
								<ref>linphone_auth_info_destroy()</ref>
								 must be used to destroy it when no longer needed. The LinphoneCore makes a copy of LinphoneAuthInfo passed through 
								<ref>linphone_core_add_auth_info()</ref>
								. 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const LinphoneFactory *" name="factory" type="LinphoneFactory">
							<description>
								

								<para>
									The 
									<ref>LinphoneFactory</ref>
									 singleton. 
								</para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="username" type="char">
							<description>
								

								<para>The username that needs to be authenticated </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="userid" type="char">
							<description>
								

								<para>The userid used for authenticating (use NULL if you don't know what it is) </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="passwd" type="char">
							<description>
								

								<para>The password in clear text </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="ha1" type="char">
							<description>
								

								<para>The ha1-encrypted password if password is not given in clear text. </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="realm" type="char">
							<description>
								

								<para>The authentication domain (which can be larger than the sip domain. Unfortunately many SIP servers don't use this parameter. </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="domain" type="char">
							<description>
								

								<para>The SIP domain for which this authentication information is valid, if it has to be restricted for a single SIP domain. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Creates a 
							<ref>LinphoneAuthInfo</ref>
							 object. The object can be created empty, that is with all arguments set to NULL. Username, userid, password, realm and domain can be set later using specific methods. At the end, username and passwd (or ha1) are required. 
							<description>
								<para>
									A 
									<ref>LinphoneAuthInfo</ref>
									 object. 
									<ref>linphone_auth_info_destroy()</ref>
									 must be used to destroy it when no longer needed. The LinphoneCore makes a copy of LinphoneAuthInfo passed through 
									<ref>linphone_core_add_auth_info()</ref>
									. 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/factory.h" name="linphone_factory_create_core">
					<return completetype="LinphoneCore *" type="LinphoneCore"/>
					<arguments>
						<argument completetype="const LinphoneFactory *" name="factory" type="LinphoneFactory">
							<description>
								

								<para>
									The 
									<ref>LinphoneFactory</ref>
									 singleton. 
								</para>
							</description>
							

						</argument>
						<argument completetype="LinphoneCoreCbs *" name="cbs" type="LinphoneCoreCbs">
							<description>
								

								<para>
									a 
									<ref>LinphoneCoreCbs</ref>
									 object holding your application callbacks. A reference will be taken on it until the destruciton of the core or the unregistration with linphone_core_remove_cbs(). 
								</para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="config_path" type="char">
							<description>
								

								<para>a path to a config file. If it does not exists it will be created. The config file is used to store all settings, call logs, friends, proxies... so that all these settings become persistent over the life of the LinphoneCore object. It is allowed to set a NULL config file. In that case LinphoneCore will not store any settings. </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="factory_config_path" type="char">
							<description>
								

								<para>a path to a read-only config file that can be used to to store hard-coded preference such as proxy settings or internal preferences. The settings in this factory file always override the one in the normal config file. It is OPTIONAL, use NULL if unneeded. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Instanciate a 
							<ref>LinphoneCore</ref>
							 object.
						</para>
						<para>
							The LinphoneCore object is the primary handle for doing all phone actions. It should be unique within your application. 
							<see>linphone_core_new_with_config </see>
						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/factory.h" name="linphone_factory_create_core_cbs">
					<return completetype="LinphoneCoreCbs *" type="LinphoneCoreCbs">
						<description>
							<para>a new #LinponeCoreCbs. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const LinphoneFactory *" name="factory" type="LinphoneFactory"/>
					</arguments>
					<detaileddescription>
						

						<para>
							Instanciate a 
							<ref>LinphoneCoreCbs</ref>
							 object. 
							<description>
								<para>a new #LinponeCoreCbs. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/factory.h" name="linphone_factory_create_core_with_config">
					<return completetype="LinphoneCore *" type="LinphoneCore"/>
					<arguments>
						<argument completetype="const LinphoneFactory *" name="factory" type="LinphoneFactory">
							<description>
								

								<para>
									The 
									<ref>LinphoneFactory</ref>
									 singleton. The LinphoneCore object is the primary handle for doing all phone actions. It should be unique within your application. 
								</para>
							</description>
							

						</argument>
						<argument completetype="LinphoneCoreCbs *" name="cbs" type="LinphoneCoreCbs">
							<description>
								

								<para>
									a 
									<ref>LinphoneCoreCbs</ref>
									 object holding your application callbacks. A reference will be taken on it until the destruciton of the core or the unregistration with linphone_core_remove_cbs(). 
								</para>
							</description>
							

						</argument>
						<argument completetype="LinphoneConfig *" name="config" type="LinphoneConfig">
							<description>
								

								<para>a pointer to an LpConfig object holding the configuration of the LinphoneCore to be instantiated. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Instantiates a LinphoneCore object with a given LpConfig.</para>
						<para>
							<see>linphone_core_new </see>
						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/factory.h" name="linphone_factory_create_vcard">
					<return completetype="LinphoneVcard *" type="LinphoneVcard">
						<description>
							<para>
								a new 
								<ref>LinphoneVcard</ref>
								. 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneFactory *" name="factory" type="LinphoneFactory"/>
					</arguments>
					<detaileddescription>
						

						<para>
							Create an empty 
							<ref>LinphoneVcard</ref>
							. 
							<description>
								<para>
									a new 
									<ref>LinphoneVcard</ref>
									. 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
			</instancemethods>
			<detaileddescription>
				

				<para>
					<ref>LinphoneFactory</ref>
					 is a singleton object devoted to the creation of all the object of Liblinphone that cannot created by 
					<ref>LinphoneCore</ref>
					 or 
					<ref>LinphoneCore</ref>
					 itself. 
				</para>
				        
			</detaileddescription>
			
        
		</class>
		<class cfunctionprefix="linphone_friend_" deprecated="false" destroyable="true" name="LinphoneFriend" refcountable="true">
			<classmethods>
				<classmethod deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_friend_new">
					<return completetype="LinphoneFriend *" type="LinphoneFriend">
						<description>
							<para>
								a new empty 
								<ref>LinphoneFriend</ref>
								 
							</para>
						</description>
						

					</return>
					<arguments/>
					<detaileddescription>
						

						<para>
							Contructor 
							<description>
								<para>
									a new empty 
									<ref>LinphoneFriend</ref>
									 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</classmethod>
				<classmethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_friend_new_from_vcard">
					<return completetype="LinphoneFriend *" type="LinphoneFriend">
						<description>
							<para>
								a new 
								<ref>LinphoneFriend</ref>
								 with 
								<ref>vCard initialized </ref>
								 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneVcard *" name="vcard" type="LinphoneVcard">
							<description>
								

								<para>a vCard object </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Contructor same as 
							<ref>linphone_friend_new()</ref>
							 + 
							<ref>linphone_friend_set_address()</ref>
							 
							<description>
								<para>
									a new 
									<ref>LinphoneFriend</ref>
									 with 
									<ref>vCard initialized </ref>
									 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</classmethod>
				<classmethod deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_friend_new_with_address">
					<return completetype="LinphoneFriend *" type="LinphoneFriend">
						<description>
							<para>
								a new 
								<ref>LinphoneFriend</ref>
								 with 
								<ref>address initialized </ref>
								 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const char *" name="addr" type="char">
							<description>
								

								<para>
									a buddy address, must be a sip uri like sip:
									<ulink url="mailto:joe@sip.linphone.org">joe@sip.linphone.org</ulink>
									 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Contructor same as 
							<ref>linphone_friend_new()</ref>
							 + 
							<ref>linphone_friend_set_address()</ref>
							 
							<description>
								<para>
									a new 
									<ref>LinphoneFriend</ref>
									 with 
									<ref>address initialized </ref>
									 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</classmethod>
			</classmethods>
			<instancemethods>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_friend_add_address">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneFriend *" name="lf" type="LinphoneFriend">
							<description>
								

								<para>
									<ref>LinphoneFriend</ref>
									 object 
								</para>
							</description>
							

						</argument>
						<argument completetype="const LinphoneAddress *" name="addr" type="LinphoneAddress">
							<description>
								

								<para>
									<ref>LinphoneAddress</ref>
									 object 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Adds an address in this friend </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_friend_add_phone_number">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneFriend *" name="lf" type="LinphoneFriend">
							<description>
								

								<para>
									<ref>LinphoneFriend</ref>
									 object 
								</para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="phone" type="char">
							<description>
								

								<para>number to add </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Adds a phone number in this friend </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_friend_create_vcard">
					<return completetype="bool_t" type="bool_t">
						<description>
							<para>true if the vCard has been created, false if it wasn't possible (for exemple if name and the friend's SIP URI are null or if the friend's SIP URI doesn't have a display name), or if there is already one vcard </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneFriend *" name="fr" type="LinphoneFriend">
							<description>
								

								<para>LinphoneFriend object </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="name" type="char">
							<description>
								

								<para>The full name of the friend or NULL to use the one from the friend's SIP URI </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Creates a vCard object associated to this friend if there isn't one yet and if the full name is available, either by the parameter or the one in the friend's SIP URI 
							<description>
								<para>true if the vCard has been created, false if it wasn't possible (for exemple if name and the friend's SIP URI are null or if the friend's SIP URI doesn't have a display name), or if there is already one vcard </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_friend_destroy">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneFriend *" name="lf" type="LinphoneFriend">
							<description>
								

								<para>LinphoneFriend object </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Destroy a LinphoneFriend. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_friend_done">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneFriend *" name="fr" type="LinphoneFriend">
							<description>
								

								<para>
									<ref>LinphoneFriend</ref>
									 object 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Commits modification made to the friend configuration. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_friend_edit">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneFriend *" name="fr" type="LinphoneFriend"/>
					</arguments>
					<detaileddescription>
						

						<para>Starts editing a friend configuration.</para>
						<para>
							Because friend configuration must be consistent, applications MUST call 
							<ref>linphone_friend_edit()</ref>
							 before doing any attempts to modify friend configuration (such as 
							<ref>address </ref>
							 or 
							<ref>subscription policy</ref>
							 and so on). Once the modifications are done, then the application must call 
							<ref>linphone_friend_done()</ref>
							 to commit the changes. 
						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_friend_get_presence_model_for_uri_or_tel">
					<return completetype="const LinphonePresenceModel *" type="LinphonePresenceModel">
						<description>
							<para>
								A 
								<ref>LinphonePresenceModel</ref>
								 object, or NULL if the friend do not have presence information for this SIP URI or phone number 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const LinphoneFriend *" name="lf" type="LinphoneFriend">
							<description>
								

								<para>
									A 
									<ref>LinphoneFriend</ref>
									 object 
								</para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="uri_or_tel" type="char">
							<description>
								

								<para>The SIP URI or phone number for which to get the presence model </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Get the presence model for a specific SIP URI or phone number of a friend 
							<description>
								<para>
									A 
									<ref>LinphonePresenceModel</ref>
									 object, or NULL if the friend do not have presence information for this SIP URI or phone number 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_friend_in_list">
					<return completetype="bool_t" type="bool_t">
						<description>
							<para>TRUE if the friend is in a friend list, FALSE otherwise. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const LinphoneFriend *" name="lf" type="LinphoneFriend">
							<description>
								

								<para>
									<ref>LinphoneFriend</ref>
									 object. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Check that the given friend is in a friend list. 
							<description>
								<para>TRUE if the friend is in a friend list, FALSE otherwise. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_friend_ref">
					<return completetype="LinphoneFriend *" type="LinphoneFriend">
						<description>
							<para>The same LinphoneFriend object </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneFriend *" name="lf" type="LinphoneFriend">
							<description>
								

								<para>LinphoneFriend object </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Acquire a reference to the linphone friend. 
							<description>
								<para>The same LinphoneFriend object </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_friend_remove_address">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneFriend *" name="lf" type="LinphoneFriend">
							<description>
								

								<para>
									<ref>LinphoneFriend</ref>
									 object 
								</para>
							</description>
							

						</argument>
						<argument completetype="const LinphoneAddress *" name="addr" type="LinphoneAddress">
							<description>
								

								<para>
									<ref>LinphoneAddress</ref>
									 object 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Removes an address in this friend </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_friend_remove_phone_number">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneFriend *" name="lf" type="LinphoneFriend">
							<description>
								

								<para>
									<ref>LinphoneFriend</ref>
									 object 
								</para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="phone" type="char">
							<description>
								

								<para>number to remove </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Removes a phone number in this friend </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_friend_save">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneFriend *" name="fr" type="LinphoneFriend">
							<description>
								

								<para>the linphone friend to save </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneCore *" name="lc" type="LinphoneCore">
							<description>
								

								<para>the linphone core </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Saves a friend either in database if configured, otherwise in linphonerc </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_friend_set_presence_model_for_uri_or_tel">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneFriend *" name="lf" type="LinphoneFriend">
							<description>
								

								<para>
									A 
									<ref>LinphoneFriend</ref>
									 object 
								</para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="uri_or_tel" type="char">
							<description>
								

								<para>The SIP URI or phone number for which to set the presence model </para>
							</description>
							

						</argument>
						<argument completetype="LinphonePresenceModel *" name="presence" type="LinphonePresenceModel">
							<description>
								

								<para>
									The 
									<ref>LinphonePresenceModel</ref>
									 object to set 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Set the presence model for a specific SIP URI or phone number of a friend </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_friend_unref">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneFriend *" name="lf" type="LinphoneFriend">
							<description>
								

								<para>LinphoneFriend object </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Release a reference to the linphone friend. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
			</instancemethods>
			<properties>
				<property name="address">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_friend_get_address">
						<return completetype="const LinphoneAddress *" type="LinphoneAddress">
							<description>
								<para>
									<ref>LinphoneAddress</ref>
									 
								</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneFriend *" name="lf" type="LinphoneFriend">
								<description>
									

									<para>
										<ref>LinphoneFriend</ref>
										 object 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get address of this friend. 
								<note>
									<para>the LinphoneAddress object returned is hold by the LinphoneFriend, however calling several time this function may return different objects. </para>
								</note>
								

								<description>
									<para>
										<ref>LinphoneAddress</ref>
										 
									</para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_friend_set_address">
						<return completetype="int" type="int"/>
						<arguments>
							<argument completetype="LinphoneFriend *" name="fr" type="LinphoneFriend">
								<description>
									

									<para>
										<ref>LinphoneFriend</ref>
										 object 
									</para>
								</description>
								

							</argument>
							<argument completetype="const LinphoneAddress *" name="address" type="LinphoneAddress">
								<description>
									

									<para>
										<ref>LinphoneAddress</ref>
										 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Set 
								<ref>LinphoneAddress</ref>
								 for this friend 
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="addresses">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_friend_get_addresses">
						<return completetype="const bctbx_list_t *" containedtype="LinphoneAddress" type="bctbx_list_t">
							<description>
								<para>
									A list of 
									<ref>LinphoneAddress</ref>
									 objects. 
									<bctbxlist>LinphoneAddress</bctbxlist>
									  
								</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneFriend *" name="lf" type="LinphoneFriend">
								<description>
									

									<para>
										<ref>LinphoneFriend</ref>
										 object 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Returns a list of 
								<ref>LinphoneAddress</ref>
								 for this friend 
								<description>
									<para>
										A list of 
										<ref>LinphoneAddress</ref>
										 objects. 
										<bctbxlist>LinphoneAddress</bctbxlist>
										  
									</para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="core">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_friend_get_core">
						<return completetype="LinphoneCore *" type="LinphoneCore"/>
						<arguments>
							<argument completetype="const LinphoneFriend *" name="fr" type="LinphoneFriend">
								<description>
									

									<para>LinphoneFriend object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Returns the LinphoneCore object managing this friend, if any. </para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="inc_subscribe_policy">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_friend_get_inc_subscribe_policy">
						<return completetype="LinphoneSubscribePolicy" type="LinphoneSubscribePolicy">
							<description>
								<para>
									<ref>LinphoneSubscribePolicy</ref>
									 
								</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneFriend *" name="lf" type="LinphoneFriend">
								<description>
									

									<para>
										<ref>LinphoneFriend</ref>
										 object 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								get current subscription policy for this 
								<ref>LinphoneFriend</ref>
								 
								<description>
									<para>
										<ref>LinphoneSubscribePolicy</ref>
										 
									</para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_friend_set_inc_subscribe_policy">
						<return completetype="int" type="int"/>
						<arguments>
							<argument completetype="LinphoneFriend *" name="fr" type="LinphoneFriend">
								<description>
									

									<para>
										<ref>LinphoneFriend</ref>
										 object 
									</para>
								</description>
								

							</argument>
							<argument completetype="LinphoneSubscribePolicy" name="pol" type="LinphoneSubscribePolicy">
								<description>
									

									<para>
										<ref>LinphoneSubscribePolicy</ref>
										 policy to apply. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Configure incoming subscription policy for this friend. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="name">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_friend_get_name">
						<return completetype="const char *" type="char">
							<description>
								<para>The display name of this friend </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneFriend *" name="lf" type="LinphoneFriend">
								<description>
									

									<para>
										<ref>LinphoneFriend</ref>
										 object 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the display name for this friend 
								<description>
									<para>The display name of this friend </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_friend_set_name">
						<return completetype="int" type="int"/>
						<arguments>
							<argument completetype="LinphoneFriend *" name="lf" type="LinphoneFriend">
								<description>
									

									<para>
										<ref>LinphoneFriend</ref>
										 object 
									</para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="name" type="char">
								<description>
									

									<para/>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the display name for this friend </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="phone_numbers">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_friend_get_phone_numbers">
						<return completetype="bctbx_list_t *" containedtype="const char *" type="bctbx_list_t">
							<description>
								<para>
									A list of const char * objects. 
									<bctbxlist>const char *</bctbxlist>
									  
								</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneFriend *" name="lf" type="LinphoneFriend">
								<description>
									

									<para>
										<ref>LinphoneFriend</ref>
										 object 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Returns a list of phone numbers for this friend 
								<description>
									<para>
										A list of const char * objects. 
										<bctbxlist>const char *</bctbxlist>
										  
									</para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="presence_model">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_friend_get_presence_model">
						<return completetype="const LinphonePresenceModel *" type="LinphonePresenceModel">
							<description>
								<para>
									A 
									<ref>LinphonePresenceModel</ref>
									 object, or NULL if the friend do not have presence information (in which case he is considered offline) 
								</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneFriend *" name="lf" type="LinphoneFriend">
								<description>
									

									<para>
										A 
										<ref>LinphoneFriend</ref>
										 object 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the presence model of a friend 
								<description>
									<para>
										A 
										<ref>LinphonePresenceModel</ref>
										 object, or NULL if the friend do not have presence information (in which case he is considered offline) 
									</para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_friend_set_presence_model">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneFriend *" name="lf" type="LinphoneFriend">
								<description>
									

									<para>
										A 
										<ref>LinphoneFriend</ref>
										 object 
									</para>
								</description>
								

							</argument>
							<argument completetype="LinphonePresenceModel *" name="presence" type="LinphonePresenceModel">
								<description>
									

									<para>
										The 
										<ref>LinphonePresenceModel</ref>
										 object to set for the friend 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the presence model of a friend </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="presence_received">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_friend_is_presence_received">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>TRUE if presence information has been received for the friend, FALSE otherwise. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneFriend *" name="lf" type="LinphoneFriend">
								<description>
									

									<para>
										A 
										<ref>LinphoneFriend</ref>
										 object 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Tells whether we already received presence information for a friend. 
								<description>
									<para>TRUE if presence information has been received for the friend, FALSE otherwise. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="ref_key">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_friend_get_ref_key">
						<return completetype="const char *" type="char">
							<description>
								<para>The reference key of the friend. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneFriend *" name="lf" type="LinphoneFriend">
								<description>
									

									<para>
										<ref>LinphoneFriend</ref>
										 object. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the reference key of a friend. 
								<description>
									<para>The reference key of the friend. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_friend_set_ref_key">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneFriend *" name="lf" type="LinphoneFriend">
								<description>
									

									<para>
										<ref>LinphoneFriend</ref>
										 object. 
									</para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="key" type="char">
								<description>
									

									<para>The reference key to use for the friend. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the reference key of a friend. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="status">
					<getter deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_friend_get_status">
						<return completetype="LinphoneOnlineStatus" type="LinphoneOnlineStatus">
							<description>
								<para>
									<ref>LinphoneOnlineStatus</ref>
									 
								</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneFriend *" name="lf" type="LinphoneFriend">
								<description>
									

									<para>
										A 
										<ref>LinphoneFriend</ref>
										 object 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the status of a friend 
								<description>
									<para>
										<ref>LinphoneOnlineStatus</ref>
										 
									</para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="subscribes_enabled">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_friend_subscribes_enabled">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>returns true is subscription is activated for this friend </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneFriend *" name="lf" type="LinphoneFriend">
								<description>
									

									<para>
										<ref>LinphoneFriend</ref>
										 object 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								get subscription flag value 
								<description>
									<para>returns true is subscription is activated for this friend </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_friend_enable_subscribes">
						<return completetype="int" type="int"/>
						<arguments>
							<argument completetype="LinphoneFriend *" name="fr" type="LinphoneFriend">
								<description>
									

									<para>
										<ref>LinphoneFriend</ref>
										 object 
									</para>
								</description>
								

							</argument>
							<argument completetype="bool_t" name="val" type="bool_t">
								<description>
									

									<para>if TRUE this friend will receive subscription message </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Configure 
								<ref>LinphoneFriend</ref>
								 to subscribe to presence information 
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="subscription_state">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_friend_get_subscription_state">
						<return completetype="LinphoneSubscriptionState" type="LinphoneSubscriptionState">
							<description>
								<para>
									<ref>LinphoneSubscriptionState</ref>
									 
								</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneFriend *" name="lf" type="LinphoneFriend">
								<description>
									

									<para>
										A 
										<ref>LinphoneFriend</ref>
										 object 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get subscription state of a friend 
								<description>
									<para>
										<ref>LinphoneSubscriptionState</ref>
										 
									</para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="user_data">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_friend_get_user_data">
						<return completetype="void *" type="void"/>
						<arguments>
							<argument completetype="const LinphoneFriend *" name="lf" type="LinphoneFriend"/>
						</arguments>
						<detaileddescription>
							

							<para>Retrieve user data associated with friend. </para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_friend_set_user_data">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneFriend *" name="lf" type="LinphoneFriend"/>
							<argument completetype="void *" name="data" type="void"/>
						</arguments>
						<detaileddescription>
							

							<para>Store user pointer to friend object. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="vcard">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_friend_get_vcard">
						<return completetype="LinphoneVcard *" type="LinphoneVcard"/>
						<arguments>
							<argument completetype="LinphoneFriend *" name="fr" type="LinphoneFriend">
								<description>
									

									<para>LinphoneFriend object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Returns the vCard object associated to this friend, if any </para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friend.h" name="linphone_friend_set_vcard">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneFriend *" name="fr" type="LinphoneFriend">
								<description>
									

									<para>LinphoneFriend object </para>
								</description>
								

							</argument>
							<argument completetype="LinphoneVcard *" name="vcard" type="LinphoneVcard">
								<description>
									

									<para>The vCard object to bind </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Binds a vCard object to a friend </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
			</properties>
			<detaileddescription>
				

				<para>Represents a buddy, all presence actions like subscription and status change notification are performed on this object </para>
				        
			</detaileddescription>
			
        
		</class>
		<class cfunctionprefix="linphone_friend_list_" deprecated="false" destroyable="false" name="LinphoneFriendList" refcountable="true">
			<instancemethods>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friendlist.h" name="linphone_friend_list_add_friend">
					<return completetype="LinphoneFriendListStatus" type="LinphoneFriendListStatus">
						<description>
							<para>LinphoneFriendListOK if successfully added, LinphoneFriendListInvalidFriend if the friend is not valid. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneFriendList *" name="list" type="LinphoneFriendList">
							<description>
								

								<para>LinphoneFriendList object. </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneFriend *" name="lf" type="LinphoneFriend">
							<description>
								

								<para>LinphoneFriend object to add to the friend list. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Add a friend to a friend list. If or when a remote CardDAV server will be attached to the list, the friend will be sent to the server. 
							<description>
								<para>LinphoneFriendListOK if successfully added, LinphoneFriendListInvalidFriend if the friend is not valid. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friendlist.h" name="linphone_friend_list_add_local_friend">
					<return completetype="LinphoneFriendListStatus" type="LinphoneFriendListStatus">
						<description>
							<para>LinphoneFriendListOK if successfully added, LinphoneFriendListInvalidFriend if the friend is not valid. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneFriendList *" name="list" type="LinphoneFriendList">
							<description>
								

								<para>LinphoneFriendList object. </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneFriend *" name="lf" type="LinphoneFriend">
							<description>
								

								<para>LinphoneFriend object to add to the friend list. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Add a friend to a friend list. The friend will never be sent to a remote CardDAV server. Warning! LinphoneFriends added this way will be removed on the next synchronization, and the callback contact_deleted will be called. 
							<description>
								<para>LinphoneFriendListOK if successfully added, LinphoneFriendListInvalidFriend if the friend is not valid. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friendlist.h" name="linphone_friend_list_export_friends_as_vcard4_file">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneFriendList *" name="list" type="LinphoneFriendList">
							<description>
								

								<para>the LinphoneFriendList object </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="vcard_file" type="char">
							<description>
								

								<para>the path to a file that will contain the vCards </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Creates and export LinphoneFriend objects from LinphoneFriendList to a file using vCard 4 format </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friendlist.h" name="linphone_friend_list_find_friend_by_address">
					<return completetype="LinphoneFriend *" type="LinphoneFriend">
						<description>
							<para>A LinphoneFriend if found, NULL otherwise. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const LinphoneFriendList *" name="list" type="LinphoneFriendList">
							<description>
								

								<para>LinphoneFriendList object. </para>
							</description>
							

						</argument>
						<argument completetype="const LinphoneAddress *" name="address" type="LinphoneAddress">
							<description>
								

								<para>LinphoneAddress object of the friend we want to search for. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Find a friend in the friend list using a LinphoneAddress. 
							<description>
								<para>A LinphoneFriend if found, NULL otherwise. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friendlist.h" name="linphone_friend_list_find_friend_by_ref_key">
					<return completetype="LinphoneFriend *" type="LinphoneFriend">
						<description>
							<para>A LinphoneFriend if found, NULL otherwise. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const LinphoneFriendList *" name="list" type="LinphoneFriendList">
							<description>
								

								<para>LinphoneFriendList object. </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="ref_key" type="char">
							<description>
								

								<para>The ref key string of the friend we want to search for. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Find a friend in the friend list using a ref key. 
							<description>
								<para>A LinphoneFriend if found, NULL otherwise. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friendlist.h" name="linphone_friend_list_find_friend_by_uri">
					<return completetype="LinphoneFriend *" type="LinphoneFriend">
						<description>
							<para>A LinphoneFriend if found, NULL otherwise. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const LinphoneFriendList *" name="list" type="LinphoneFriendList">
							<description>
								

								<para>LinphoneFriendList object. </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="uri" type="char">
							<description>
								

								<para>A string containing the URI of the friend we want to search for. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Find a friend in the friend list using an URI string. 
							<description>
								<para>A LinphoneFriend if found, NULL otherwise. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friendlist.h" name="linphone_friend_list_import_friends_from_vcard4_buffer">
					<return completetype="int" type="int">
						<description>
							<para>the amount of linphone friends created </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneFriendList *" name="list" type="LinphoneFriendList">
							<description>
								

								<para>the LinphoneFriendList object </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="vcard_buffer" type="char">
							<description>
								

								<para>the buffer that contains the vCard(s) to parse </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Creates and adds LinphoneFriend objects to LinphoneFriendList from a buffer that contains the vCard(s) to parse 
							<description>
								<para>the amount of linphone friends created </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friendlist.h" name="linphone_friend_list_import_friends_from_vcard4_file">
					<return completetype="int" type="int">
						<description>
							<para>the amount of linphone friends created </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneFriendList *" name="list" type="LinphoneFriendList">
							<description>
								

								<para>the LinphoneFriendList object </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="vcard_file" type="char">
							<description>
								

								<para>the path to a file that contains the vCard(s) to parse </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Creates and adds LinphoneFriend objects to LinphoneFriendList from a file that contains the vCard(s) to parse 
							<description>
								<para>the amount of linphone friends created </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friendlist.h" name="linphone_friend_list_notify_presence">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneFriendList *" name="list" type="LinphoneFriendList">
							<description>
								

								<para>LinphoneFriendList object. </para>
							</description>
							

						</argument>
						<argument completetype="LinphonePresenceModel *" name="presence" type="LinphonePresenceModel">
							<description>
								

								<para>LinphonePresenceModel object. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Notify our presence to all the friends in the friend list that have subscribed to our presence directly (not using a RLS). </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friendlist.h" name="linphone_friend_list_ref">
					<return completetype="LinphoneFriendList *" type="LinphoneFriendList">
						<description>
							<para>The same LinphoneFriendList object. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneFriendList *" name="list" type="LinphoneFriendList">
							<description>
								

								<para>LinphoneFriendList object. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Acquire a reference to the friend list. 
							<description>
								<para>The same LinphoneFriendList object. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friendlist.h" name="linphone_friend_list_remove_friend">
					<return completetype="LinphoneFriendListStatus" type="LinphoneFriendListStatus">
						<description>
							<para>LinphoneFriendListOK if removed successfully, LinphoneFriendListNonExistentFriend if the friend is not in the list. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneFriendList *" name="list" type="LinphoneFriendList">
							<description>
								

								<para>LinphoneFriendList object. </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneFriend *" name="lf" type="LinphoneFriend">
							<description>
								

								<para>LinphoneFriend object to remove from the friend list. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Remove a friend from a friend list. 
							<description>
								<para>LinphoneFriendListOK if removed successfully, LinphoneFriendListNonExistentFriend if the friend is not in the list. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friendlist.h" name="linphone_friend_list_synchronize_friends_from_server">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneFriendList *" name="list" type="LinphoneFriendList">
							<description>
								

								<para>LinphoneFriendList object. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Starts a CardDAV synchronization using value set using linphone_friend_list_set_uri. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friendlist.h" name="linphone_friend_list_unref">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneFriendList *" name="list" type="LinphoneFriendList">
							<description>
								

								<para>LinphoneFriendList object. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Release reference to the friend list. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friendlist.h" name="linphone_friend_list_update_dirty_friends">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneFriendList *" name="list" type="LinphoneFriendList">
							<description>
								

								<para>LinphoneFriendList object. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Goes through all the LinphoneFriend that are dirty and does a CardDAV PUT to update the server. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friendlist.h" name="linphone_friend_list_update_revision">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneFriendList *" name="list" type="LinphoneFriendList">
							<description>
								

								<para>LinphoneFriendList object. </para>
							</description>
							

						</argument>
						<argument completetype="int" name="rev" type="int">
							<description>
								

								<para>The revision </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Sets the revision from the last synchronization. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friendlist.h" name="linphone_friend_list_update_subscriptions">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneFriendList *" name="list" type="LinphoneFriendList">
							<description>
								

								<para>the friend list </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Update presence subscriptions for the entire list. Calling this function is necessary when list subscriptions are enabled, ie when a RLS presence server is used. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
			</instancemethods>
			<properties>
				<property name="callbacks">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friendlist.h" name="linphone_friend_list_get_callbacks">
						<return completetype="LinphoneFriendListCbs *" type="LinphoneFriendListCbs">
							<description>
								<para>The LinphoneFriendListCbs object associated with the LinphoneFriendList. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneFriendList *" name="list" type="LinphoneFriendList">
								<description>
									

									<para>LinphoneFriendList object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the LinphoneFriendListCbs object associated with a LinphoneFriendList. 
								<description>
									<para>The LinphoneFriendListCbs object associated with the LinphoneFriendList. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="core">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friendlist.h" name="linphone_friend_list_get_core">
						<return completetype="LinphoneCore *" type="LinphoneCore">
							<description>
								<para>a LinphoneCore object </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneFriendList *" name="list" type="LinphoneFriendList">
								<description>
									

									<para>LinphoneFriendList object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Returns the LinphoneCore object attached to this LinphoneFriendList. 
								<description>
									<para>a LinphoneCore object </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="display_name">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friendlist.h" name="linphone_friend_list_get_display_name">
						<return completetype="const char *" type="char">
							<description>
								<para>The display name of the friend list. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneFriendList *" name="list" type="LinphoneFriendList">
								<description>
									

									<para>LinphoneFriendList object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the display name of the friend list. 
								<description>
									<para>The display name of the friend list. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friendlist.h" name="linphone_friend_list_set_display_name">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneFriendList *" name="list" type="LinphoneFriendList">
								<description>
									

									<para>LinphoneFriendList object. </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="display_name" type="char">
								<description>
									

									<para>The new display name of the friend list. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the display name of the friend list. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="friends">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friendlist.h" name="linphone_friend_list_get_friends">
						<return completetype="const bctbx_list_t *" containedtype="LinphoneFriend" type="bctbx_list_t">
							<description>
								<para>
									A list of 
									<ref>LinphoneFriend</ref>
									 objects. 
									<bctbxlist>LinphoneFriend</bctbxlist>
									  a list of LinphoneFriend 
								</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneFriendList *" name="list" type="LinphoneFriendList">
								<description>
									

									<para>LinphoneFriendList object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Retrieves the list of LinphoneFriend from this LinphoneFriendList. 
								<description>
									<para>
										A list of 
										<ref>LinphoneFriend</ref>
										 objects. 
										<bctbxlist>LinphoneFriend</bctbxlist>
										  a list of LinphoneFriend 
									</para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="rls_address">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friendlist.h" name="linphone_friend_list_get_rls_address">
						<return completetype="const LinphoneAddress *" type="LinphoneAddress">
							<description>
								<para>The RLS URI associated with the friend list. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneFriendList *" name="list" type="LinphoneFriendList">
								<description>
									

									<para>LinphoneFriendList object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the RLS (Resource List Server) URI associated with the friend list to subscribe to these friends presence. 
								<description>
									<para>The RLS URI associated with the friend list. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friendlist.h" name="linphone_friend_list_set_rls_address">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneFriendList *" name="list" type="LinphoneFriendList">
								<description>
									

									<para>LinphoneFriendList object. </para>
								</description>
								

							</argument>
							<argument completetype="const LinphoneAddress *" name="rls_addr" type="LinphoneAddress">
								<description>
									

									<para>The RLS URI to associate with the friend list. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the RLS (Resource List Server) URI associated with the friend list to subscribe to these friends presence. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="rls_uri">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friendlist.h" name="linphone_friend_list_get_rls_uri">
						<return completetype="const char *" type="char">
							<description>
								<para>The RLS URI associated with the friend list. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneFriendList *" name="list" type="LinphoneFriendList">
								<description>
									

									<para>LinphoneFriendList object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the RLS (Resource List Server) URI associated with the friend list to subscribe to these friends presence. 
								<description>
									<para>The RLS URI associated with the friend list. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friendlist.h" name="linphone_friend_list_set_rls_uri">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneFriendList *" name="list" type="LinphoneFriendList">
								<description>
									

									<para>LinphoneFriendList object. </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="rls_uri" type="char">
								<description>
									

									<para>The RLS URI to associate with the friend list. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the RLS (Resource List Server) URI associated with the friend list to subscribe to these friends presence. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="subscriptions_enabled">
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friendlist.h" name="linphone_friend_list_enable_subscriptions">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneFriendList *" name="list" type="LinphoneFriendList">
								<description>
									

									<para>the LinphoneFriendList object </para>
								</description>
								

							</argument>
							<argument completetype="bool_t" name="enabled" type="bool_t">
								<description>
									

									<para>should subscription be enabled or not </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Enable subscription to NOTIFYes of all friends list </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="uri">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friendlist.h" name="linphone_friend_list_get_uri">
						<return completetype="const char *" type="char">
							<description>
								<para>The URI associated with the friend list. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneFriendList *" name="list" type="LinphoneFriendList">
								<description>
									

									<para>LinphoneFriendList object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the URI associated with the friend list. 
								<description>
									<para>The URI associated with the friend list. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friendlist.h" name="linphone_friend_list_set_uri">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneFriendList *" name="list" type="LinphoneFriendList">
								<description>
									

									<para>LinphoneFriendList object. </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="uri" type="char">
								<description>
									

									<para>The URI to associate with the friend list. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the URI associated with the friend list. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="user_data">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friendlist.h" name="linphone_friend_list_get_user_data">
						<return completetype="void *" type="void">
							<description>
								<para>The user pointer associated with the friend list. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneFriendList *" name="list" type="LinphoneFriendList">
								<description>
									

									<para>LinphoneFriendList object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Retrieve the user pointer associated with the friend list. 
								<description>
									<para>The user pointer associated with the friend list. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friendlist.h" name="linphone_friend_list_set_user_data">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneFriendList *" name="list" type="LinphoneFriendList">
								<description>
									

									<para>LinphoneFriendList object. </para>
								</description>
								

							</argument>
							<argument completetype="void *" name="ud" type="void">
								<description>
									

									<para>The user pointer to associate with the friend list. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Assign a user pointer to the friend list. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
			</properties>
			<detaileddescription>
				

				<para>The LinphoneFriendList object representing a list of friends. </para>
				        
			</detaileddescription>
			
        
		</class>
		<class cfunctionprefix="linphone_friend_list_cbs_" deprecated="false" destroyable="false" name="LinphoneFriendListCbs" refcountable="true">
			<events>
				<event deprecated="false" name="LinphoneFriendListCbsContactCreatedCb">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneFriendList *" name="list" type="LinphoneFriendList">
							<description>
								

								<para>The LinphoneFriendList object the new contact is added to </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneFriend *" name="lf" type="LinphoneFriend">
							<description>
								

								<para>The LinphoneFriend object that has been created </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Callback used to notify a new contact has been created on the CardDAV server and downloaded locally </para>
						        
					</detaileddescription>
					
        
				</event>
				<event deprecated="false" name="LinphoneFriendListCbsContactDeletedCb">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneFriendList *" name="list" type="LinphoneFriendList">
							<description>
								

								<para>The LinphoneFriendList object a contact has been removed from </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneFriend *" name="lf" type="LinphoneFriend">
							<description>
								

								<para>The LinphoneFriend object that has been deleted </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Callback used to notify a contact has been deleted on the CardDAV server </para>
						        
					</detaileddescription>
					
        
				</event>
				<event deprecated="false" name="LinphoneFriendListCbsContactUpdatedCb">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneFriendList *" name="list" type="LinphoneFriendList">
							<description>
								

								<para>The LinphoneFriendList object in which a contact has been updated </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneFriend *" name="new_friend" type="LinphoneFriend">
							<description>
								

								<para>The new LinphoneFriend object corresponding to the updated contact </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneFriend *" name="old_friend" type="LinphoneFriend">
							<description>
								

								<para>The old LinphoneFriend object before update </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Callback used to notify a contact has been updated on the CardDAV server </para>
						        
					</detaileddescription>
					
        
				</event>
				<event deprecated="false" name="LinphoneFriendListCbsSyncStateChangedCb">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneFriendList *" name="list" type="LinphoneFriendList">
							<description>
								

								<para>The LinphoneFriendList object for which the status has changed </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneFriendListSyncStatus" name="status" type="LinphoneFriendListSyncStatus">
							<description>
								

								<para>The new synchronisation status </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="msg" type="char">
							<description>
								

								<para>An additional information on the status update </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Callback used to notify the status of the synchronization has changed </para>
						        
					</detaileddescription>
					
        
				</event>
			</events>
			<instancemethods>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friendlist.h" name="linphone_friend_list_cbs_ref">
					<return completetype="LinphoneFriendListCbs *" type="LinphoneFriendListCbs">
						<description>
							<para>The same LinphoneFriendListCbs object. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneFriendListCbs *" name="cbs" type="LinphoneFriendListCbs">
							<description>
								

								<para>LinphoneFriendListCbs object. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Acquire a reference to a LinphoneFriendListCbs object. 
							<description>
								<para>The same LinphoneFriendListCbs object. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friendlist.h" name="linphone_friend_list_cbs_unref">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneFriendListCbs *" name="cbs" type="LinphoneFriendListCbs">
							<description>
								

								<para>LinphoneFriendListCbs object. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Release a reference to a LinphoneFriendListCbs object. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
			</instancemethods>
			<properties>
				<property name="contact_created">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friendlist.h" name="linphone_friend_list_cbs_get_contact_created">
						<return completetype="LinphoneFriendListCbsContactCreatedCb" type="LinphoneFriendListCbsContactCreatedCb">
							<description>
								<para>The current contact created callback. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneFriendListCbs *" name="cbs" type="LinphoneFriendListCbs">
								<description>
									

									<para>LinphoneFriendListCbs object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the contact created callback. 
								<description>
									<para>The current contact created callback. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friendlist.h" name="linphone_friend_list_cbs_set_contact_created">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneFriendListCbs *" name="cbs" type="LinphoneFriendListCbs">
								<description>
									

									<para>LinphoneFriendListCbs object. </para>
								</description>
								

							</argument>
							<argument completetype="LinphoneFriendListCbsContactCreatedCb" name="cb" type="LinphoneFriendListCbsContactCreatedCb">
								<description>
									

									<para>The contact created to be used. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the contact created callback. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="contact_deleted">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friendlist.h" name="linphone_friend_list_cbs_get_contact_deleted">
						<return completetype="LinphoneFriendListCbsContactDeletedCb" type="LinphoneFriendListCbsContactDeletedCb">
							<description>
								<para>The current contact deleted callback. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneFriendListCbs *" name="cbs" type="LinphoneFriendListCbs">
								<description>
									

									<para>LinphoneFriendListCbs object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the contact deleted callback. 
								<description>
									<para>The current contact deleted callback. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friendlist.h" name="linphone_friend_list_cbs_set_contact_deleted">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneFriendListCbs *" name="cbs" type="LinphoneFriendListCbs">
								<description>
									

									<para>LinphoneFriendListCbs object. </para>
								</description>
								

							</argument>
							<argument completetype="LinphoneFriendListCbsContactDeletedCb" name="cb" type="LinphoneFriendListCbsContactDeletedCb">
								<description>
									

									<para>The contact deleted to be used. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the contact deleted callback. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="contact_updated">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friendlist.h" name="linphone_friend_list_cbs_get_contact_updated">
						<return completetype="LinphoneFriendListCbsContactUpdatedCb" type="LinphoneFriendListCbsContactUpdatedCb">
							<description>
								<para>The current contact updated callback. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneFriendListCbs *" name="cbs" type="LinphoneFriendListCbs">
								<description>
									

									<para>LinphoneFriendListCbs object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the contact updated callback. 
								<description>
									<para>The current contact updated callback. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friendlist.h" name="linphone_friend_list_cbs_set_contact_updated">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneFriendListCbs *" name="cbs" type="LinphoneFriendListCbs">
								<description>
									

									<para>LinphoneFriendListCbs object. </para>
								</description>
								

							</argument>
							<argument completetype="LinphoneFriendListCbsContactUpdatedCb" name="cb" type="LinphoneFriendListCbsContactUpdatedCb">
								<description>
									

									<para>The contact updated to be used. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the contact updated callback. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="sync_status_changed">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friendlist.h" name="linphone_friend_list_cbs_get_sync_status_changed">
						<return completetype="LinphoneFriendListCbsSyncStateChangedCb" type="LinphoneFriendListCbsSyncStateChangedCb">
							<description>
								<para>The current sync status changedcallback. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneFriendListCbs *" name="cbs" type="LinphoneFriendListCbs">
								<description>
									

									<para>LinphoneFriendListCbs object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the sync status changed callback. 
								<description>
									<para>The current sync status changedcallback. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friendlist.h" name="linphone_friend_list_cbs_set_sync_status_changed">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneFriendListCbs *" name="cbs" type="LinphoneFriendListCbs">
								<description>
									

									<para>LinphoneFriendListCbs object. </para>
								</description>
								

							</argument>
							<argument completetype="LinphoneFriendListCbsSyncStateChangedCb" name="cb" type="LinphoneFriendListCbsSyncStateChangedCb">
								<description>
									

									<para>The sync status changed to be used. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the contact updated callback. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="user_data">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friendlist.h" name="linphone_friend_list_cbs_get_user_data">
						<return completetype="void *" type="void">
							<description>
								<para>The user pointer associated with the LinphoneFriendListCbs object. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneFriendListCbs *" name="cbs" type="LinphoneFriendListCbs">
								<description>
									

									<para>LinphoneFriendListCbs object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Retrieve the user pointer associated with a LinphoneFriendListCbs object. 
								<description>
									<para>The user pointer associated with the LinphoneFriendListCbs object. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/friendlist.h" name="linphone_friend_list_cbs_set_user_data">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneFriendListCbs *" name="cbs" type="LinphoneFriendListCbs">
								<description>
									

									<para>LinphoneFriendListCbs object. </para>
								</description>
								

							</argument>
							<argument completetype="void *" name="ud" type="void">
								<description>
									

									<para>The user pointer to associate with the LinphoneFriendListCbs object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Assign a user pointer to a LinphoneFriendListCbs object. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
			</properties>
			<detaileddescription>
				

				<para>An object to handle the callbacks for LinphoneFriend synchronization. </para>
				        
			</detaileddescription>
			
        
		</class>
		<class cfunctionprefix="linphone_im_encryption_engine_" deprecated="false" destroyable="false" name="LinphoneImEncryptionEngine" refcountable="true">
			<instancemethods>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/im_encryption_engine.h" name="linphone_im_encryption_engine_ref">
					<return completetype="LinphoneImEncryptionEngine *" type="LinphoneImEncryptionEngine">
						<description>
							<para>The same LinphoneImEncryptionEngine object. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneImEncryptionEngine *" name="imee" type="LinphoneImEncryptionEngine">
							<description>
								

								<para>LinphoneImEncryptionEngine object. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Acquire a reference to the LinphoneImEncryptionEngine. 
							<description>
								<para>The same LinphoneImEncryptionEngine object. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/im_encryption_engine.h" name="linphone_im_encryption_engine_unref">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneImEncryptionEngine *" name="imee" type="LinphoneImEncryptionEngine">
							<description>
								

								<para>LinphoneImEncryptionEngine object. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Release reference to the LinphoneImEncryptionEngine. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
			</instancemethods>
			<properties>
				<property name="callbacks">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/im_encryption_engine.h" name="linphone_im_encryption_engine_get_callbacks">
						<return completetype="LinphoneImEncryptionEngineCbs *" type="LinphoneImEncryptionEngineCbs">
							<description>
								<para>the LinphoneImEncryptionEngineCbs object </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneImEncryptionEngine *" name="imee" type="LinphoneImEncryptionEngine">
								<description>
									

									<para>the LinphoneImEncryptionEngine object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the LinphoneImEncryptionEngineCbs object that holds the callbacks 
								<description>
									<para>the LinphoneImEncryptionEngineCbs object </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="core">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/im_encryption_engine.h" name="linphone_im_encryption_engine_get_core">
						<return completetype="LinphoneCore *" type="LinphoneCore">
							<description>
								<para>The LinphoneCore object that created the IM encryption engine </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneImEncryptionEngine *" name="imee" type="LinphoneImEncryptionEngine">
								<description>
									

									<para>LinphoneImEncryptionEngine object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the LinphoneCore object that created the IM encryption engine 
								<description>
									<para>The LinphoneCore object that created the IM encryption engine </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="user_data">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/im_encryption_engine.h" name="linphone_im_encryption_engine_get_user_data">
						<return completetype="void *" type="void">
							<description>
								<para>the user data </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneImEncryptionEngine *" name="imee" type="LinphoneImEncryptionEngine">
								<description>
									

									<para>the LinphoneImEncryptionEngine </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the user data in the LinphoneImEncryptionEngine object 
								<description>
									<para>the user data </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/im_encryption_engine.h" name="linphone_im_encryption_engine_set_user_data">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneImEncryptionEngine *" name="imee" type="LinphoneImEncryptionEngine">
								<description>
									

									<para>the LinphoneImEncryptionEngine object </para>
								</description>
								

							</argument>
							<argument completetype="void *" name="data" type="void">
								<description>
									

									<para>the user data </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Sets the user data in the LinphoneImEncryptionEngine object </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
			</properties>
			<detaileddescription>
				

				<para>IM encryption engine. </para>
				        
			</detaileddescription>
			
        
		</class>
		<class cfunctionprefix="linphone_im_encryption_engine_cbs_" deprecated="false" destroyable="false" name="LinphoneImEncryptionEngineCbs" refcountable="true">
			<events>
				<event deprecated="false" name="LinphoneImEncryptionEngineCbsDownloadingFileCb">
					<return completetype="int" type="int">
						<description>
							<para>-1 if nothing to be done, 0 on success or an integer &gt; 0 for error </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneImEncryptionEngine *" name="engine" type="LinphoneImEncryptionEngine">
							<description>
								

								<para>LinphoneImEncryptionEngine object </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneChatMessage *" name="msg" type="LinphoneChatMessage">
							<description>
								

								<para>LinphoneChatMessage object </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="buffer" type="char">
							<description>
								

								<para>Encrypted data buffer </para>
							</description>
							

						</argument>
						<argument completetype="size_t" name="size" type="size_t">
							<description>
								

								<para>Size of the encrypted data buffer </para>
							</description>
							

						</argument>
						<argument completetype="char *" name="decrypted_buffer" type="char">
							<description>
								

								<para>Buffer in which to write the decrypted data </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Callback to decrypt downloading file 
							<description>
								<para>-1 if nothing to be done, 0 on success or an integer &gt; 0 for error </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</event>
				<event deprecated="false" name="LinphoneImEncryptionEngineCbsGenerateFileTransferKeyCb">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneImEncryptionEngine *" name="engine" type="LinphoneImEncryptionEngine">
							<description>
								

								<para>LinphoneImEncryptionEngine object </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneChatRoom *" name="room" type="LinphoneChatRoom">
							<description>
								

								<para>LinphoneChatRoom object </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneChatMessage *" name="msg" type="LinphoneChatMessage">
							<description>
								

								<para>LinphoneChatMessage object </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Callback to generate the key used to encrypt the files before uploading them Key can be stored in the LinphoneContent object inside the LinphoneChatMessage using linphone_content_set_key </para>
						        
					</detaileddescription>
					
        
				</event>
				<event deprecated="false" name="LinphoneImEncryptionEngineCbsIncomingMessageCb">
					<return completetype="int" type="int">
						<description>
							<para>-1 if nothing to be done, 0 on success or an integer &gt; 0 for error </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneImEncryptionEngine *" name="engine" type="LinphoneImEncryptionEngine">
							<description>
								

								<para>ImEncryptionEngine object </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneChatRoom *" name="room" type="LinphoneChatRoom">
							<description>
								

								<para>LinphoneChatRoom object </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneChatMessage *" name="msg" type="LinphoneChatMessage">
							<description>
								

								<para>LinphoneChatMessage object </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Callback to decrypt incoming LinphoneChatMessage 
							<description>
								<para>-1 if nothing to be done, 0 on success or an integer &gt; 0 for error </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</event>
				<event deprecated="false" name="LinphoneImEncryptionEngineCbsIsEncryptionEnabledForFileTransferCb">
					<return completetype="bool_t" type="bool_t">
						<description>
							<para>TRUE if files will be encrypted, FALSE otherwise </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneImEncryptionEngine *" name="engine" type="LinphoneImEncryptionEngine">
							<description>
								

								<para>LinphoneImEncryptionEngine object </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneChatRoom *" name="room" type="LinphoneChatRoom">
							<description>
								

								<para>LinphoneChatRoom object </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Callback to know whether or not the engine will encrypt files before uploading them 
							<description>
								<para>TRUE if files will be encrypted, FALSE otherwise </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</event>
				<event deprecated="false" name="LinphoneImEncryptionEngineCbsOutgoingMessageCb">
					<return completetype="int" type="int">
						<description>
							<para>-1 if nothing to be done, 0 on success or an integer &gt; 0 for error </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneImEncryptionEngine *" name="engine" type="LinphoneImEncryptionEngine">
							<description>
								

								<para>LinphoneImEncryptionEngine object </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneChatRoom *" name="room" type="LinphoneChatRoom">
							<description>
								

								<para>LinphoneChatRoom object </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneChatMessage *" name="msg" type="LinphoneChatMessage">
							<description>
								

								<para>LinphoneChatMessage object </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Callback to encrypt outgoing LinphoneChatMessage 
							<description>
								<para>-1 if nothing to be done, 0 on success or an integer &gt; 0 for error </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</event>
				<event deprecated="false" name="LinphoneImEncryptionEngineCbsUploadingFileCb">
					<return completetype="int" type="int">
						<description>
							<para>-1 if nothing to be done, 0 on success or an integer &gt; 0 for error </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneImEncryptionEngine *" name="engine" type="LinphoneImEncryptionEngine">
							<description>
								

								<para>LinphoneImEncryptionEngine object </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneChatMessage *" name="msg" type="LinphoneChatMessage">
							<description>
								

								<para>LinphoneChatMessage object </para>
							</description>
							

						</argument>
						<argument completetype="size_t" name="offset" type="size_t">
							<description>
								

								<para>The current offset of the upload </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="buffer" type="char">
							<description>
								

								<para>Encrypted data buffer </para>
							</description>
							

						</argument>
						<argument completetype="size_t *" name="size" type="size_t">
							<description>
								

								<para>Size of the plain data buffer and the size of the encrypted data buffer once encryption is done </para>
							</description>
							

						</argument>
						<argument completetype="char *" name="encrypted_buffer" type="char">
							<description>
								

								<para>Buffer in which to write the encrypted data </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Callback to encrypt uploading file 
							<description>
								<para>-1 if nothing to be done, 0 on success or an integer &gt; 0 for error </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</event>
			</events>
			<instancemethods>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/im_encryption_engine.h" name="linphone_im_encryption_engine_cbs_ref">
					<return completetype="LinphoneImEncryptionEngineCbs *" type="LinphoneImEncryptionEngineCbs">
						<description>
							<para>The same LinphoneImEncryptionEngineCbs object. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneImEncryptionEngineCbs *" name="cbs" type="LinphoneImEncryptionEngineCbs">
							<description>
								

								<para>LinphoneImEncryptionEngineCbs object. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Acquire a reference to the LinphoneImEncryptionEngineCbs. 
							<description>
								<para>The same LinphoneImEncryptionEngineCbs object. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/im_encryption_engine.h" name="linphone_im_encryption_engine_cbs_unref">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneImEncryptionEngineCbs *" name="cbs" type="LinphoneImEncryptionEngineCbs">
							<description>
								

								<para>LinphoneImEncryptionEngineCbs object. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Release reference to the LinphoneImEncryptionEngineCbs. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
			</instancemethods>
			<properties>
				<property name="generate_file_transfer_key">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/im_encryption_engine.h" name="linphone_im_encryption_engine_cbs_get_generate_file_transfer_key">
						<return completetype="LinphoneImEncryptionEngineCbsGenerateFileTransferKeyCb" type="LinphoneImEncryptionEngineCbsGenerateFileTransferKeyCb">
							<description>
								<para>the callback </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneImEncryptionEngineCbs *" name="cbs" type="LinphoneImEncryptionEngineCbs">
								<description>
									

									<para>the LinphoneImEncryptionEngineCbs object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the callback that will generate the key to encrypt the file before uploading it 
								<description>
									<para>the callback </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/im_encryption_engine.h" name="linphone_im_encryption_engine_cbs_set_generate_file_transfer_key">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneImEncryptionEngineCbs *" name="cbs" type="LinphoneImEncryptionEngineCbs">
								<description>
									

									<para>the LinphoneImEncryptionEngineCbs object </para>
								</description>
								

							</argument>
							<argument completetype="LinphoneImEncryptionEngineCbsGenerateFileTransferKeyCb" name="cb" type="LinphoneImEncryptionEngineCbsGenerateFileTransferKeyCb">
								<description>
									

									<para>the callback to call </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Sets the callback that will generate the key to encrypt the file before uploading it </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="is_encryption_enabled_for_file_transfer">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/im_encryption_engine.h" name="linphone_im_encryption_engine_cbs_get_is_encryption_enabled_for_file_transfer">
						<return completetype="LinphoneImEncryptionEngineCbsIsEncryptionEnabledForFileTransferCb" type="LinphoneImEncryptionEngineCbsIsEncryptionEnabledForFileTransferCb">
							<description>
								<para>the callback </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneImEncryptionEngineCbs *" name="cbs" type="LinphoneImEncryptionEngineCbs">
								<description>
									

									<para>the LinphoneImEncryptionEngineCbs object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the callback telling wheter or not to encrypt the files 
								<description>
									<para>the callback </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/im_encryption_engine.h" name="linphone_im_encryption_engine_cbs_set_is_encryption_enabled_for_file_transfer">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneImEncryptionEngineCbs *" name="cbs" type="LinphoneImEncryptionEngineCbs">
								<description>
									

									<para>the LinphoneImEncryptionEngineCbs object </para>
								</description>
								

							</argument>
							<argument completetype="LinphoneImEncryptionEngineCbsIsEncryptionEnabledForFileTransferCb" name="cb" type="LinphoneImEncryptionEngineCbsIsEncryptionEnabledForFileTransferCb">
								<description>
									

									<para>the callback to call </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Sets the callback telling wheter or not to encrypt the files </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="process_downloading_file">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/im_encryption_engine.h" name="linphone_im_encryption_engine_cbs_get_process_downloading_file">
						<return completetype="LinphoneImEncryptionEngineCbsDownloadingFileCb" type="LinphoneImEncryptionEngineCbsDownloadingFileCb">
							<description>
								<para>the callback </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneImEncryptionEngineCbs *" name="cbs" type="LinphoneImEncryptionEngineCbs">
								<description>
									

									<para>the LinphoneImEncryptionEngineCbs object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the callback that will decrypt the files while downloading them 
								<description>
									<para>the callback </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/im_encryption_engine.h" name="linphone_im_encryption_engine_cbs_set_process_downloading_file">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneImEncryptionEngineCbs *" name="cbs" type="LinphoneImEncryptionEngineCbs">
								<description>
									

									<para>the LinphoneImEncryptionEngineCbs object </para>
								</description>
								

							</argument>
							<argument completetype="LinphoneImEncryptionEngineCbsDownloadingFileCb" name="cb" type="LinphoneImEncryptionEngineCbsDownloadingFileCb">
								<description>
									

									<para>the callback to call </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Sets the callback that will decrypt the files while downloading them </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="process_incoming_message">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/im_encryption_engine.h" name="linphone_im_encryption_engine_cbs_get_process_incoming_message">
						<return completetype="LinphoneImEncryptionEngineCbsIncomingMessageCb" type="LinphoneImEncryptionEngineCbsIncomingMessageCb">
							<description>
								<para>the callback </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneImEncryptionEngineCbs *" name="cbs" type="LinphoneImEncryptionEngineCbs">
								<description>
									

									<para>the LinphoneImEncryptionEngineCbs object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the callback that will decrypt the chat messages upon reception 
								<description>
									<para>the callback </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/im_encryption_engine.h" name="linphone_im_encryption_engine_cbs_set_process_incoming_message">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneImEncryptionEngineCbs *" name="cbs" type="LinphoneImEncryptionEngineCbs">
								<description>
									

									<para>the LinphoneImEncryptionEngineCbs object </para>
								</description>
								

							</argument>
							<argument completetype="LinphoneImEncryptionEngineCbsIncomingMessageCb" name="cb" type="LinphoneImEncryptionEngineCbsIncomingMessageCb">
								<description>
									

									<para>the callback to call </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Sets the callback that will decrypt the chat messages upon reception </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="process_outgoing_message">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/im_encryption_engine.h" name="linphone_im_encryption_engine_cbs_get_process_outgoing_message">
						<return completetype="LinphoneImEncryptionEngineCbsOutgoingMessageCb" type="LinphoneImEncryptionEngineCbsOutgoingMessageCb">
							<description>
								<para>the callback </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneImEncryptionEngineCbs *" name="cbs" type="LinphoneImEncryptionEngineCbs">
								<description>
									

									<para>the LinphoneImEncryptionEngineCbs object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the callback that will encrypt the chat messages before sending them 
								<description>
									<para>the callback </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/im_encryption_engine.h" name="linphone_im_encryption_engine_cbs_set_process_outgoing_message">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneImEncryptionEngineCbs *" name="cbs" type="LinphoneImEncryptionEngineCbs">
								<description>
									

									<para>the LinphoneImEncryptionEngineCbs object </para>
								</description>
								

							</argument>
							<argument completetype="LinphoneImEncryptionEngineCbsOutgoingMessageCb" name="cb" type="LinphoneImEncryptionEngineCbsOutgoingMessageCb">
								<description>
									

									<para>the callback to call </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Sets the callback that will encrypt the chat messages before sending them </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="process_uploading_file">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/im_encryption_engine.h" name="linphone_im_encryption_engine_cbs_get_process_uploading_file">
						<return completetype="LinphoneImEncryptionEngineCbsUploadingFileCb" type="LinphoneImEncryptionEngineCbsUploadingFileCb">
							<description>
								<para>the callback </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneImEncryptionEngineCbs *" name="cbs" type="LinphoneImEncryptionEngineCbs">
								<description>
									

									<para>the LinphoneImEncryptionEngineCbs object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the callback that will will encrypt the files while uploading them 
								<description>
									<para>the callback </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/im_encryption_engine.h" name="linphone_im_encryption_engine_cbs_set_process_uploading_file">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneImEncryptionEngineCbs *" name="cbs" type="LinphoneImEncryptionEngineCbs">
								<description>
									

									<para>the LinphoneImEncryptionEngineCbs object </para>
								</description>
								

							</argument>
							<argument completetype="LinphoneImEncryptionEngineCbsUploadingFileCb" name="cb" type="LinphoneImEncryptionEngineCbsUploadingFileCb">
								<description>
									

									<para>the callback to call </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Sets the callback that will encrypt the files while uploading them </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="user_data">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/im_encryption_engine.h" name="linphone_im_encryption_engine_cbs_get_user_data">
						<return completetype="void *" type="void">
							<description>
								<para>the user data </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneImEncryptionEngineCbs *" name="cbs" type="LinphoneImEncryptionEngineCbs">
								<description>
									

									<para>the LinphoneImEncryptionEngineCbs </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the user data in the LinphoneImEncryptionEngineCbs object 
								<description>
									<para>the user data </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/im_encryption_engine.h" name="linphone_im_encryption_engine_cbs_set_user_data">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneImEncryptionEngineCbs *" name="cbs" type="LinphoneImEncryptionEngineCbs">
								<description>
									

									<para>the LinphoneImEncryptionEngineCbs object </para>
								</description>
								

							</argument>
							<argument completetype="void *" name="data" type="void">
								<description>
									

									<para>the user data </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Sets the user data in the LinphoneImEncryptionEngineCbs object </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
			</properties>
			<detaileddescription>
				

				<para>An object to handle the callbacks for the handling a LinphoneImEncryptionEngine object. </para>
				        
			</detaileddescription>
			
        
		</class>
		<class cfunctionprefix="linphone_im_notif_policy_" deprecated="false" destroyable="false" name="LinphoneImNotifPolicy" refcountable="true">
			<instancemethods>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/im_notif_policy.h" name="linphone_im_notif_policy_clear">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneImNotifPolicy *" name="policy" type="LinphoneImNotifPolicy">
							<description>
								

								<para>LinphoneImNotifPolicy object. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Clear an IM notif policy (deactivate all receiving and sending of notifications). </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/im_notif_policy.h" name="linphone_im_notif_policy_enable_all">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneImNotifPolicy *" name="policy" type="LinphoneImNotifPolicy">
							<description>
								

								<para>LinphoneImNotifPolicy object. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Enable all receiving and sending of notifications. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/im_notif_policy.h" name="linphone_im_notif_policy_ref">
					<return completetype="LinphoneImNotifPolicy *" type="LinphoneImNotifPolicy">
						<description>
							<para>The same LinphoneImNotifPolicy object. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneImNotifPolicy *" name="policy" type="LinphoneImNotifPolicy">
							<description>
								

								<para>LinphoneImNotifPolicy object. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Acquire a reference to the LinphoneImNotifPolicy object. 
							<description>
								<para>The same LinphoneImNotifPolicy object. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/im_notif_policy.h" name="linphone_im_notif_policy_unref">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneImNotifPolicy *" name="policy" type="LinphoneImNotifPolicy">
							<description>
								

								<para>LinphoneImNotifPolicy object. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Release reference to the LinphoneImNotifPolicy object. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
			</instancemethods>
			<properties>
				<property name="recv_imdn_delivered">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/im_notif_policy.h" name="linphone_im_notif_policy_get_recv_imdn_delivered">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>Boolean value telling whether imdn delivered notifications are being notified when received. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneImNotifPolicy *" name="policy" type="LinphoneImNotifPolicy">
								<description>
									

									<para>LinphoneImNotifPolicy object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Tell whether imdn delivered notifications are being notified when received. 
								<description>
									<para>Boolean value telling whether imdn delivered notifications are being notified when received. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/im_notif_policy.h" name="linphone_im_notif_policy_set_recv_imdn_delivered">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneImNotifPolicy *" name="policy" type="LinphoneImNotifPolicy">
								<description>
									

									<para>LinphoneImNotifPolicy object </para>
								</description>
								

							</argument>
							<argument completetype="bool_t" name="enable" type="bool_t">
								<description>
									

									<para>Boolean value telling whether to notify received imdn delivered notifications. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Enable imdn delivered notifications receiving. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="recv_imdn_displayed">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/im_notif_policy.h" name="linphone_im_notif_policy_get_recv_imdn_displayed">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>Boolean value telling whether imdn displayed notifications are being notified when received. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneImNotifPolicy *" name="policy" type="LinphoneImNotifPolicy">
								<description>
									

									<para>LinphoneImNotifPolicy object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Tell whether imdn displayed notifications are being notified when received. 
								<description>
									<para>Boolean value telling whether imdn displayed notifications are being notified when received. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/im_notif_policy.h" name="linphone_im_notif_policy_set_recv_imdn_displayed">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneImNotifPolicy *" name="policy" type="LinphoneImNotifPolicy">
								<description>
									

									<para>LinphoneImNotifPolicy object </para>
								</description>
								

							</argument>
							<argument completetype="bool_t" name="enable" type="bool_t">
								<description>
									

									<para>Boolean value telling whether to notify received imdn displayed notifications. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Enable imdn displayed notifications receiving. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="recv_is_composing">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/im_notif_policy.h" name="linphone_im_notif_policy_get_recv_is_composing">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>Boolean value telling whether is_composing notifications are being notified when received. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneImNotifPolicy *" name="policy" type="LinphoneImNotifPolicy">
								<description>
									

									<para>LinphoneImNotifPolicy object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Tell whether is_composing notifications are being notified when received. 
								<description>
									<para>Boolean value telling whether is_composing notifications are being notified when received. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/im_notif_policy.h" name="linphone_im_notif_policy_set_recv_is_composing">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneImNotifPolicy *" name="policy" type="LinphoneImNotifPolicy">
								<description>
									

									<para>LinphoneImNotifPolicy object </para>
								</description>
								

							</argument>
							<argument completetype="bool_t" name="enable" type="bool_t">
								<description>
									

									<para>Boolean value telling whether to notify received is_composing notifications. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Enable is_composing notifications receiving. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="send_imdn_delivered">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/im_notif_policy.h" name="linphone_im_notif_policy_get_send_imdn_delivered">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>Boolean value telling whether imdn delivered notifications are being sent. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneImNotifPolicy *" name="policy" type="LinphoneImNotifPolicy">
								<description>
									

									<para>LinphoneImNotifPolicy object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Tell whether imdn delivered notifications are being sent. 
								<description>
									<para>Boolean value telling whether imdn delivered notifications are being sent. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/im_notif_policy.h" name="linphone_im_notif_policy_set_send_imdn_delivered">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneImNotifPolicy *" name="policy" type="LinphoneImNotifPolicy">
								<description>
									

									<para>LinphoneImNotifPolicy object </para>
								</description>
								

							</argument>
							<argument completetype="bool_t" name="enable" type="bool_t">
								<description>
									

									<para>Boolean value telling whether to send imdn delivered notifications. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Enable imdn delivered notifications sending. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="send_imdn_displayed">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/im_notif_policy.h" name="linphone_im_notif_policy_get_send_imdn_displayed">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>Boolean value telling whether imdn displayed notifications are being sent. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneImNotifPolicy *" name="policy" type="LinphoneImNotifPolicy">
								<description>
									

									<para>LinphoneImNotifPolicy object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Tell whether imdn displayed notifications are being sent. 
								<description>
									<para>Boolean value telling whether imdn displayed notifications are being sent. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/im_notif_policy.h" name="linphone_im_notif_policy_set_send_imdn_displayed">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneImNotifPolicy *" name="policy" type="LinphoneImNotifPolicy">
								<description>
									

									<para>LinphoneImNotifPolicy object </para>
								</description>
								

							</argument>
							<argument completetype="bool_t" name="enable" type="bool_t">
								<description>
									

									<para>Boolean value telling whether to send imdn displayed notifications. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Enable imdn displayed notifications sending. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="send_is_composing">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/im_notif_policy.h" name="linphone_im_notif_policy_get_send_is_composing">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>Boolean value telling whether is_composing notifications are being sent. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneImNotifPolicy *" name="policy" type="LinphoneImNotifPolicy">
								<description>
									

									<para>LinphoneImNotifPolicy object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Tell whether is_composing notifications are being sent. 
								<description>
									<para>Boolean value telling whether is_composing notifications are being sent. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/im_notif_policy.h" name="linphone_im_notif_policy_set_send_is_composing">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneImNotifPolicy *" name="policy" type="LinphoneImNotifPolicy">
								<description>
									

									<para>LinphoneImNotifPolicy object </para>
								</description>
								

							</argument>
							<argument completetype="bool_t" name="enable" type="bool_t">
								<description>
									

									<para>Boolean value telling whether to send is_composing notifications. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Enable is_composing notifications sending. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="user_data">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/im_notif_policy.h" name="linphone_im_notif_policy_get_user_data">
						<return completetype="void *" type="void">
							<description>
								<para>The user pointer associated with the LinphoneImNotifPolicy object. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneImNotifPolicy *" name="policy" type="LinphoneImNotifPolicy">
								<description>
									

									<para>LinphoneImNotifPolicy object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Retrieve the user pointer associated with the LinphoneImNotifPolicy object. 
								<description>
									<para>The user pointer associated with the LinphoneImNotifPolicy object. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/im_notif_policy.h" name="linphone_im_notif_policy_set_user_data">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneImNotifPolicy *" name="policy" type="LinphoneImNotifPolicy">
								<description>
									

									<para>LinphoneImNotifPolicy object. </para>
								</description>
								

							</argument>
							<argument completetype="void *" name="ud" type="void">
								<description>
									

									<para>The user pointer to associate with the LinphoneImNotifPolicy object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Assign a user pointer to the LinphoneImNotifPolicy object. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
			</properties>
			<detaileddescription>
				

				<para>Policy to use to send/receive instant messaging composing/delivery/display notifications. The sending of this information is done as in the RFCs 3994 (is_composing) and 5438 (imdn delivered/displayed). </para>
				        
			</detaileddescription>
			
        
		</class>
		<class cfunctionprefix="linphone_nat_policy_" deprecated="false" destroyable="false" name="LinphoneNatPolicy" refcountable="true">
			<instancemethods>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/nat_policy.h" name="linphone_nat_policy_clear">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneNatPolicy *" name="policy" type="LinphoneNatPolicy">
							<description>
								

								<para>LinphoneNatPolicy object. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Clear a NAT policy (deactivate all protocols and unset the STUN server). </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/nat_policy.h" name="linphone_nat_policy_ref">
					<return completetype="LinphoneNatPolicy *" type="LinphoneNatPolicy">
						<description>
							<para>The same LinphoneNatPolicy object. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneNatPolicy *" name="policy" type="LinphoneNatPolicy">
							<description>
								

								<para>LinphoneNatPolicy object. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Acquire a reference to the LinphoneNatPolicy object. 
							<description>
								<para>The same LinphoneNatPolicy object. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/nat_policy.h" name="linphone_nat_policy_resolve_stun_server">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneNatPolicy *" name="policy" type="LinphoneNatPolicy">
							<description>
								

								<para>LinphoneNatPolicy object </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Start a STUN server DNS resolution. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/nat_policy.h" name="linphone_nat_policy_unref">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneNatPolicy *" name="policy" type="LinphoneNatPolicy">
							<description>
								

								<para>LinphoneNatPolicy object. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Release reference to the LinphoneNatPolicy object. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
			</instancemethods>
			<properties>
				<property name="ice_enabled">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/nat_policy.h" name="linphone_nat_policy_ice_enabled">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>Boolean value telling whether ICE is enabled. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneNatPolicy *" name="policy" type="LinphoneNatPolicy">
								<description>
									

									<para>LinphoneNatPolicy object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Tell whether ICE is enabled. 
								<description>
									<para>Boolean value telling whether ICE is enabled. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/nat_policy.h" name="linphone_nat_policy_enable_ice">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneNatPolicy *" name="policy" type="LinphoneNatPolicy">
								<description>
									

									<para>LinphoneNatPolicy object </para>
								</description>
								

							</argument>
							<argument completetype="bool_t" name="enable" type="bool_t">
								<description>
									

									<para>Boolean value telling whether to enable ICE. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Enable ICE. ICE can be enabled without STUN/TURN, in which case only the local candidates will be used. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="stun_enabled">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/nat_policy.h" name="linphone_nat_policy_stun_enabled">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>Boolean value telling whether STUN is enabled. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneNatPolicy *" name="policy" type="LinphoneNatPolicy">
								<description>
									

									<para>LinphoneNatPolicy object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Tell whether STUN is enabled. 
								<description>
									<para>Boolean value telling whether STUN is enabled. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/nat_policy.h" name="linphone_nat_policy_enable_stun">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneNatPolicy *" name="policy" type="LinphoneNatPolicy">
								<description>
									

									<para>LinphoneNatPolicy object </para>
								</description>
								

							</argument>
							<argument completetype="bool_t" name="enable" type="bool_t">
								<description>
									

									<para>Boolean value telling whether to enable STUN. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Enable STUN. If TURN is also enabled, TURN will be used instead of STUN. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="stun_server">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/nat_policy.h" name="linphone_nat_policy_get_stun_server">
						<return completetype="const char *" type="char">
							<description>
								<para>The STUN server used by this NAT policy. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneNatPolicy *" name="policy" type="LinphoneNatPolicy">
								<description>
									

									<para>LinphoneNatPolicy object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the STUN/TURN server to use with this NAT policy. Used when STUN or TURN are enabled. 
								<description>
									<para>The STUN server used by this NAT policy. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/nat_policy.h" name="linphone_nat_policy_set_stun_server">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneNatPolicy *" name="policy" type="LinphoneNatPolicy">
								<description>
									

									<para>LinphoneNatPolicy object </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="stun_server" type="char">
								<description>
									

									<para>The STUN server to use with this NAT policy. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the STUN/TURN server to use with this NAT policy. Used when STUN or TURN are enabled. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="stun_server_addrinfo">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/nat_policy.h" name="linphone_nat_policy_get_stun_server_addrinfo">
						<return completetype="const struct addrinfo *" type="addrinfo">
							<description>
								<para>addrinfo representation of the STUN server address. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneNatPolicy *" name="policy" type="LinphoneNatPolicy">
								<description>
									

									<para>LinphoneNatPolicy object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the addrinfo representation of the STUN server address. WARNING: This function may block for up to 1 second. 
								<description>
									<para>addrinfo representation of the STUN server address. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="stun_server_username">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/nat_policy.h" name="linphone_nat_policy_get_stun_server_username">
						<return completetype="const char *" type="char">
							<description>
								<para>The username used to authenticate with the STUN/TURN server. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneNatPolicy *" name="policy" type="LinphoneNatPolicy">
								<description>
									

									<para>LinphoneNatPolicy object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the username used to authenticate with the STUN/TURN server. The authentication will search for a LinphoneAuthInfo with this username. If it is not set the username of the currently used LinphoneProxyConfig is used to search for a LinphoneAuthInfo. 
								<description>
									<para>The username used to authenticate with the STUN/TURN server. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/nat_policy.h" name="linphone_nat_policy_set_stun_server_username">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneNatPolicy *" name="policy" type="LinphoneNatPolicy">
								<description>
									

									<para>LinphoneNatPolicy object </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="username" type="char">
								<description>
									

									<para>The username used to authenticate with the STUN/TURN server. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the username used to authenticate with the STUN/TURN server. The authentication will search for a LinphoneAuthInfo with this username. If it is not set the username of the currently used LinphoneProxyConfig is used to search for a LinphoneAuthInfo. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="turn_enabled">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/nat_policy.h" name="linphone_nat_policy_turn_enabled">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>Boolean value telling whether TURN is enabled. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneNatPolicy *" name="policy" type="LinphoneNatPolicy">
								<description>
									

									<para>LinphoneNatPolicy object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Tell whether TURN is enabled. 
								<description>
									<para>Boolean value telling whether TURN is enabled. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/nat_policy.h" name="linphone_nat_policy_enable_turn">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneNatPolicy *" name="policy" type="LinphoneNatPolicy">
								<description>
									

									<para>LinphoneNatPolicy object </para>
								</description>
								

							</argument>
							<argument completetype="bool_t" name="enable" type="bool_t">
								<description>
									

									<para>Boolean value telling whether to enable TURN. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Enable TURN. If STUN is also enabled, it is ignored and TURN is used. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="upnp_enabled">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/nat_policy.h" name="linphone_nat_policy_upnp_enabled">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>Boolean value telling whether uPnP is enabled. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneNatPolicy *" name="policy" type="LinphoneNatPolicy">
								<description>
									

									<para>LinphoneNatPolicy object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Tell whether uPnP is enabled. 
								<description>
									<para>Boolean value telling whether uPnP is enabled. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/nat_policy.h" name="linphone_nat_policy_enable_upnp">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneNatPolicy *" name="policy" type="LinphoneNatPolicy">
								<description>
									

									<para>LinphoneNatPolicy object </para>
								</description>
								

							</argument>
							<argument completetype="bool_t" name="enable" type="bool_t">
								<description>
									

									<para>Boolean value telling whether to enable uPnP. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Enable uPnP. This has the effect to disable every other policies (ICE, STUN and TURN). </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="user_data">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/nat_policy.h" name="linphone_nat_policy_get_user_data">
						<return completetype="void *" type="void">
							<description>
								<para>The user pointer associated with the LinphoneNatPolicy object. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneNatPolicy *" name="policy" type="LinphoneNatPolicy">
								<description>
									

									<para>LinphoneNatPolicy object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Retrieve the user pointer associated with the LinphoneNatPolicy object. 
								<description>
									<para>The user pointer associated with the LinphoneNatPolicy object. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/nat_policy.h" name="linphone_nat_policy_set_user_data">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneNatPolicy *" name="policy" type="LinphoneNatPolicy">
								<description>
									

									<para>LinphoneNatPolicy object. </para>
								</description>
								

							</argument>
							<argument completetype="void *" name="ud" type="void">
								<description>
									

									<para>The user pointer to associate with the LinphoneNatPolicy object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Assign a user pointer to the LinphoneNatPolicy object. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
			</properties>
			<detaileddescription>
				

				<para>Policy to use to pass through NATs/firewalls. </para>
				        
			</detaileddescription>
			
        
		</class>
		<class cfunctionprefix="linphone_payload_type_" deprecated="false" destroyable="false" name="LinphonePayloadType" refcountable="false">
			<properties>
				<property name="channels">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_payload_type_get_channels">
						<return completetype="int" type="int">
							<description>
								<para>The number of channels. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphonePayloadType *" name="pt" type="LinphonePayloadType">
								<description>
									

									<para>LinphonePayloadType object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the number of channels. 
								<description>
									<para>The number of channels. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="mime_type">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_payload_type_get_mime_type">
						<return completetype="const char *" type="char">
							<description>
								<para>The mime type. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphonePayloadType *" name="pt" type="LinphonePayloadType">
								<description>
									

									<para>LinphonePayloadType object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the mime type. 
								<description>
									<para>The mime type. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="normal_bitrate">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_payload_type_get_normal_bitrate">
						<return completetype="int" type="int">
							<description>
								<para>The normal bitrate in bits/s. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphonePayloadType *" name="pt" type="LinphonePayloadType">
								<description>
									

									<para>LinphonePayloadType object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the normal bitrate in bits/s. 
								<description>
									<para>The normal bitrate in bits/s. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="type">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_payload_type_get_type">
						<return completetype="int" type="int">
							<description>
								<para>The type of payload. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphonePayloadType *" name="pt" type="LinphonePayloadType">
								<description>
									

									<para>LinphonePayloadType object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the type of payload. 
								<description>
									<para>The type of payload. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
			</properties>
			<detaileddescription>
				

				<para>Object representing an RTP payload type. </para>
				        
			</detaileddescription>
			
        
		</class>
		<class cfunctionprefix="linphone_player_" deprecated="false" destroyable="true" name="LinphonePlayer" refcountable="false">
			<instancemethods>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_player_close">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphonePlayer *" name="obj" type="LinphonePlayer">
							<description>
								

								<para>the player. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Close the player. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_player_destroy">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphonePlayer *" name="obj" type="LinphonePlayer">
							<description>
								

								<para>The player </para>
							</description>
							

						</argument>
					</arguments>
					<briefdescription>Destroy a player.</briefdescription>
					<detaileddescription>
						

						<para/>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_player_open">
					<return completetype="int" type="int">
						<description>
							<para>0 if successful, -1 otherwise </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphonePlayer *" name="obj" type="LinphonePlayer">
							<description>
								

								<para>the player </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="filename" type="char">
							<description>
								

								<para>file to open. </para>
							</description>
							

						</argument>
						<argument completetype="LinphonePlayerEofCallback" name="" type="LinphonePlayerEofCallback"/>
						<argument completetype="void *" name="user_data" type="void">
							<description>
								

								<para>a user-data provided in the callback to help the application to retrieve its context. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Open a new source on this player. 
							<description>
								<para>0 if successful, -1 otherwise </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_player_pause">
					<return completetype="int" type="int">
						<description>
							<para>0 if successful, -1 otherwise </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphonePlayer *" name="obj" type="LinphonePlayer">
							<description>
								

								<para>the player. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Suspend a play operation. The player must have been started previously with 
							<ref>linphone_player_start()</ref>
							. 
							<description>
								<para>0 if successful, -1 otherwise </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_player_seek">
					<return completetype="int" type="int">
						<description>
							<para>0 if successful, -1 otherwise </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphonePlayer *" name="obj" type="LinphonePlayer">
							<description>
								

								<para>the player. </para>
							</description>
							

						</argument>
						<argument completetype="int" name="time_ms" type="int">
							<description>
								

								<para>the position to seek to. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Seek at a given position given in milliseconds. The player must be in the paused state. 
							<description>
								<para>0 if successful, -1 otherwise </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_player_start">
					<return completetype="int" type="int">
						<description>
							<para>0 if successful, -1 otherwise </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphonePlayer *" name="obj" type="LinphonePlayer">
							<description>
								

								<para>the player. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Start a play operation. The player must have been open previously with 
							<ref>linphone_player_open()</ref>
							. 
							<description>
								<para>0 if successful, -1 otherwise </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
			</instancemethods>
			<properties>
				<property name="current_position">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_player_get_current_position">
						<return completetype="int" type="int">
							<description>
								<para>Position of the playback in milliseconds </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphonePlayer *" name="obj" type="LinphonePlayer">
								<description>
									

									<para>the player </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the position of the playback 
								<description>
									<para>Position of the playback in milliseconds </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="duration">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_player_get_duration">
						<return completetype="int" type="int">
							<description>
								<para>The duration in milliseconds </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphonePlayer *" name="obj" type="LinphonePlayer">
								<description>
									

									<para>the player </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the duration of the media 
								<description>
									<para>The duration in milliseconds </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="state">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="linphone_player_get_state">
						<return completetype="MSPlayerState" type="MSPlayerState">
							<description>
								<para>the state of the player within MSPlayerClosed, MSPlayerStarted, MSPlayerPaused. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphonePlayer *" name="obj" type="LinphonePlayer">
								<description>
									

									<para>the player. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the state of play operation. 
								<description>
									<para>the state of the player within MSPlayerClosed, MSPlayerStarted, MSPlayerPaused. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
			</properties>
			<detaileddescription>
				

				<para>Player interface. </para>
				        
			</detaileddescription>
			
        
		</class>
		<class cfunctionprefix="linphone_presence_activity_" deprecated="false" destroyable="false" name="LinphonePresenceActivity" refcountable="true">
			<classmethods>
				<classmethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_activity_new">
					<return completetype="LinphonePresenceActivity *" type="LinphonePresenceActivity">
						<description>
							<para>The created presence activity, NULL on error. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphonePresenceActivityType" name="acttype" type="LinphonePresenceActivityType">
							<description>
								

								<para>
									The 
									<ref>LinphonePresenceActivityType</ref>
									 to set for the activity. 
								</para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="description" type="char">
							<description>
								

								<para>An additional description of the activity to set for the activity. Can be NULL if no additional description is to be added. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Creates a presence activity. 
							<description>
								<para>The created presence activity, NULL on error. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</classmethod>
			</classmethods>
			<instancemethods>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_activity_ref">
					<return completetype="LinphonePresenceActivity *" type="LinphonePresenceActivity">
						<description>
							<para>
								The 
								<ref>LinphonePresenceActivity</ref>
								 object with the increased reference count. 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphonePresenceActivity *" name="activity" type="LinphonePresenceActivity">
							<description>
								

								<para>
									The 
									<ref>LinphonePresenceActivity</ref>
									 object for which the reference count is to be increased. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Increase the reference count of the 
							<ref>LinphonePresenceActivity</ref>
							 object. 
							<description>
								<para>
									The 
									<ref>LinphonePresenceActivity</ref>
									 object with the increased reference count. 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_activity_to_string">
					<return completetype="char *" type="char">
						<description>
							<para>A pointer a dynamically allocated string representing the given activity.</para>
						</description>
						
The returned string is to be freed by calling ms_free(). 
					</return>
					<arguments>
						<argument completetype="const LinphonePresenceActivity *" name="activity" type="LinphonePresenceActivity">
							<description>
								

								<para>
									A pointer to the 
									<ref>LinphonePresenceActivity</ref>
									 object for which to get a string representation. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Gets the string representation of a presence activity. 
							<description>
								<para>A pointer a dynamically allocated string representing the given activity.</para>
							</description>
							
The returned string is to be freed by calling ms_free(). 
						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_activity_unref">
					<return completetype="LinphonePresenceActivity *" type="LinphonePresenceActivity">
						<description>
							<para>
								The 
								<ref>LinphonePresenceActivity</ref>
								 object if the reference count is still positive, NULL if the object has been destroyed. 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphonePresenceActivity *" name="activity" type="LinphonePresenceActivity">
							<description>
								

								<para>
									The 
									<ref>LinphonePresenceActivity</ref>
									 object for which the reference count is to be decreased. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Decrease the reference count of the 
							<ref>LinphonePresenceActivity</ref>
							 object and destroy it if it reaches 0. 
							<description>
								<para>
									The 
									<ref>LinphonePresenceActivity</ref>
									 object if the reference count is still positive, NULL if the object has been destroyed. 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
			</instancemethods>
			<properties>
				<property name="description">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_activity_get_description">
						<return completetype="const char *" type="char">
							<description>
								<para>A pointer to the description string of the presence activity, or NULL if no description is specified. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphonePresenceActivity *" name="activity" type="LinphonePresenceActivity">
								<description>
									

									<para>
										A pointer to the 
										<ref>LinphonePresenceActivity</ref>
										 for which to get the description. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the description of a presence activity. 
								<description>
									<para>A pointer to the description string of the presence activity, or NULL if no description is specified. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_activity_set_description">
						<return completetype="int" type="int">
							<description>
								<para>0 if successful, a value &lt; 0 in case of error. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphonePresenceActivity *" name="activity" type="LinphonePresenceActivity">
								<description>
									

									<para>
										The 
										<ref>LinphonePresenceActivity</ref>
										 object for which to set the description. 
									</para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="description" type="char">
								<description>
									

									<para>An additional description of the activity. Can be NULL if no additional description is to be added. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Sets the description of a presence activity. 
								<description>
									<para>0 if successful, a value &lt; 0 in case of error. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="type">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_activity_get_type">
						<return completetype="LinphonePresenceActivityType" type="LinphonePresenceActivityType">
							<description>
								<para>
									The 
									<ref>LinphonePresenceActivityType</ref>
									 of the activity. 
								</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphonePresenceActivity *" name="activity" type="LinphonePresenceActivity">
								<description>
									

									<para>
										A pointer to the 
										<ref>LinphonePresenceActivity</ref>
										 for which to get the type. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the activity type of a presence activity. 
								<description>
									<para>
										The 
										<ref>LinphonePresenceActivityType</ref>
										 of the activity. 
									</para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_activity_set_type">
						<return completetype="int" type="int">
							<description>
								<para>0 if successful, a value &lt; 0 in case of error. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphonePresenceActivity *" name="activity" type="LinphonePresenceActivity">
								<description>
									

									<para>
										The 
										<ref>LinphonePresenceActivity</ref>
										 for which to set for the activity type. 
									</para>
								</description>
								

							</argument>
							<argument completetype="LinphonePresenceActivityType" name="acttype" type="LinphonePresenceActivityType">
								<description>
									

									<para>The activity type to set for the activity. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Sets the type of activity of a presence activity. 
								<description>
									<para>0 if successful, a value &lt; 0 in case of error. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="user_data">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_activity_get_user_data">
						<return completetype="void *" type="void">
							<description>
								<para>A pointer to the user data. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphonePresenceActivity *" name="activity" type="LinphonePresenceActivity">
								<description>
									

									<para>
										The 
										<ref>LinphonePresenceActivity</ref>
										 object for which to get the user data. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the user data of a 
								<ref>LinphonePresenceActivity</ref>
								 object. 
								<description>
									<para>A pointer to the user data. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_activity_set_user_data">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphonePresenceActivity *" name="activity" type="LinphonePresenceActivity">
								<description>
									

									<para>
										The 
										<ref>LinphonePresenceActivity</ref>
										 object for which to set the user data. 
									</para>
								</description>
								

							</argument>
							<argument completetype="void *" name="user_data" type="void">
								<description>
									

									<para>A pointer to the user data to set. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Sets the user data of a 
								<ref>LinphonePresenceActivity</ref>
								 object. 
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
			</properties>
			<detaileddescription>
				

				<para>Presence activity type holding information about a presence activity. </para>
				        
			</detaileddescription>
			
        
		</class>
		<class cfunctionprefix="linphone_presence_model_" deprecated="false" destroyable="false" name="LinphonePresenceModel" refcountable="true">
			<classmethods>
				<classmethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_model_new">
					<return completetype="LinphonePresenceModel *" type="LinphonePresenceModel">
						<description>
							<para>The created presence model, NULL on error. </para>
						</description>
						

					</return>
					<arguments/>
					<detaileddescription>
						

						<para>
							Creates a default presence model. 
							<description>
								<para>The created presence model, NULL on error. </para>
							</description>
							

							<see>linphone_presence_model_new_with_activity </see>
							<see>linphone_presence_model_new_with_activity_and_note</see>
						</para>
						        
					</detaileddescription>
					
        
				</classmethod>
				<classmethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_model_new_with_activity">
					<return completetype="LinphonePresenceModel *" type="LinphonePresenceModel">
						<description>
							<para>The created presence model, or NULL if an error occured. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphonePresenceActivityType" name="activity" type="LinphonePresenceActivityType">
							<description>
								

								<para>The activity to set for the created presence model. </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="description" type="char">
							<description>
								

								<para>An additional description of the activity (mainly useful for the 'other' activity). Set it to NULL to not add a description. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Creates a presence model specifying an activity. 
							<description>
								<para>The created presence model, or NULL if an error occured. </para>
							</description>
							

							<see>linphone_presence_model_new </see>
							<see>linphone_presence_model_new_with_activity_and_note</see>
						</para>
						        
					</detaileddescription>
					
        
				</classmethod>
				<classmethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_model_new_with_activity_and_note">
					<return completetype="LinphonePresenceModel *" type="LinphonePresenceModel">
						<description>
							<para>The created presence model, or NULL if an error occured. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphonePresenceActivityType" name="activity" type="LinphonePresenceActivityType">
							<description>
								

								<para>The activity to set for the created presence model. </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="description" type="char">
							<description>
								

								<para>An additional description of the activity (mainly useful for the 'other' activity). Set it to NULL to not add a description. </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="note" type="char">
							<description>
								

								<para>An additional note giving additional information about the contact presence. </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="lang" type="char">
							<description>
								

								<para>The language the note is written in. It can be set to NULL in order to not specify the language of the note. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Creates a presence model specifying an activity and adding a note. 
							<description>
								<para>The created presence model, or NULL if an error occured. </para>
							</description>
							

							<see>linphone_presence_model_new_with_activity </see>
							<see>linphone_presence_model_new_with_activity_and_note</see>
						</para>
						        
					</detaileddescription>
					
        
				</classmethod>
			</classmethods>
			<instancemethods>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_model_add_activity">
					<return completetype="int" type="int">
						<description>
							<para>0 if successful, a value &lt; 0 in case of error. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphonePresenceModel *" name="model" type="LinphonePresenceModel">
							<description>
								

								<para>
									The 
									<ref>LinphonePresenceModel</ref>
									 object for which to add an activity. 
								</para>
							</description>
							

						</argument>
						<argument completetype="LinphonePresenceActivity *" name="activity" type="LinphonePresenceActivity">
							<description>
								

								<para>
									The 
									<ref>LinphonePresenceActivity</ref>
									 object to add to the model. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Adds an activity to a presence model. 
							<description>
								<para>0 if successful, a value &lt; 0 in case of error. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_model_add_note">
					<return completetype="int" type="int">
						<description>
							<para>0 if successful, a value &lt; 0 in case of error.</para>
						</description>
						
Only one note for each language can be set, so e.g. setting a note for the 'fr' language if there is only one will replace the existing one. 
					</return>
					<arguments>
						<argument completetype="LinphonePresenceModel *" name="model" type="LinphonePresenceModel">
							<description>
								

								<para>
									The 
									<ref>LinphonePresenceModel</ref>
									 object to add a note to. 
								</para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="note_content" type="char">
							<description>
								

								<para>The note to be added to the presence model. </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="lang" type="char">
							<description>
								

								<para>The language of the note to be added. Can be NULL if no language is to be specified for the note. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Adds a note to a presence model. 
							<description>
								<para>0 if successful, a value &lt; 0 in case of error.</para>
							</description>
							
Only one note for each language can be set, so e.g. setting a note for the 'fr' language if there is only one will replace the existing one. 
						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_model_add_person">
					<return completetype="int" type="int">
						<description>
							<para>0 if successful, a value &lt; 0 in case of error. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphonePresenceModel *" name="model" type="LinphonePresenceModel">
							<description>
								

								<para>
									The 
									<ref>LinphonePresenceModel</ref>
									 object for which to add a person. 
								</para>
							</description>
							

						</argument>
						<argument completetype="LinphonePresencePerson *" name="person" type="LinphonePresencePerson">
							<description>
								

								<para>
									The 
									<ref>LinphonePresencePerson</ref>
									 object to add to the model. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Adds a person to a presence model. 
							<description>
								<para>0 if successful, a value &lt; 0 in case of error. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_model_add_service">
					<return completetype="int" type="int">
						<description>
							<para>0 if successful, a value &lt; 0 in case of error. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphonePresenceModel *" name="model" type="LinphonePresenceModel">
							<description>
								

								<para>
									The 
									<ref>LinphonePresenceModel</ref>
									 object for which to add a service. 
								</para>
							</description>
							

						</argument>
						<argument completetype="LinphonePresenceService *" name="service" type="LinphonePresenceService">
							<description>
								

								<para>
									The 
									<ref>LinphonePresenceService</ref>
									 object to add to the model. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Adds a service to a presence model. 
							<description>
								<para>0 if successful, a value &lt; 0 in case of error. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_model_clear_activities">
					<return completetype="int" type="int">
						<description>
							<para>0 if successful, a value &lt; 0 in case of error. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphonePresenceModel *" name="model" type="LinphonePresenceModel">
							<description>
								

								<para>
									The 
									<ref>LinphonePresenceModel</ref>
									 object for which to clear the activities. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Clears the activities of a presence model. 
							<description>
								<para>0 if successful, a value &lt; 0 in case of error. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_model_clear_notes">
					<return completetype="int" type="int">
						<description>
							<para>0 if successful, a value &lt; 0 in case of error. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphonePresenceModel *" name="model" type="LinphonePresenceModel">
							<description>
								

								<para>
									The 
									<ref>LinphonePresenceModel</ref>
									 for which to clear notes. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Clears all the notes of a presence model. 
							<description>
								<para>0 if successful, a value &lt; 0 in case of error. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_model_clear_persons">
					<return completetype="int" type="int">
						<description>
							<para>0 if successful, a value &lt; 0 in case of error. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphonePresenceModel *" name="model" type="LinphonePresenceModel">
							<description>
								

								<para>
									The 
									<ref>LinphonePresenceModel</ref>
									 object for which to clear the persons. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Clears the persons of a presence model. 
							<description>
								<para>0 if successful, a value &lt; 0 in case of error. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_model_clear_services">
					<return completetype="int" type="int">
						<description>
							<para>0 if successful, a value &lt; 0 in case of error. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphonePresenceModel *" name="model" type="LinphonePresenceModel">
							<description>
								

								<para>
									The 
									<ref>LinphonePresenceModel</ref>
									 object for which to clear the services. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Clears the services of a presence model. 
							<description>
								<para>0 if successful, a value &lt; 0 in case of error. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_model_get_note">
					<return completetype="LinphonePresenceNote *" type="LinphonePresenceNote">
						<description>
							<para>
								A pointer to a 
								<ref>LinphonePresenceNote</ref>
								 object if successful, NULL otherwise. 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const LinphonePresenceModel *" name="model" type="LinphonePresenceModel">
							<description>
								

								<para>
									The 
									<ref>LinphonePresenceModel</ref>
									 object to get the note from. 
								</para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="lang" type="char">
							<description>
								

								<para>The language of the note to get. Can be NULL to get a note that has no language specified or to get the first note whatever language it is written into. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Gets the first note of a presence model (there is usually only one). 
							<description>
								<para>
									A pointer to a 
									<ref>LinphonePresenceNote</ref>
									 object if successful, NULL otherwise. 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_model_get_nth_activity">
					<return completetype="LinphonePresenceActivity *" type="LinphonePresenceActivity">
						<description>
							<para>
								A pointer to a 
								<ref>LinphonePresenceActivity</ref>
								 object if successful, NULL otherwise. 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const LinphonePresenceModel *" name="model" type="LinphonePresenceModel">
							<description>
								

								<para>
									The 
									<ref>LinphonePresenceModel</ref>
									 object to get the activity from. 
								</para>
							</description>
							

						</argument>
						<argument completetype="unsigned int" name="idx" type="int">
							<description>
								

								<para>The index of the activity to get (the first activity having the index 0). </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Gets the nth activity of a presence model. 
							<description>
								<para>
									A pointer to a 
									<ref>LinphonePresenceActivity</ref>
									 object if successful, NULL otherwise. 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_model_get_nth_person">
					<return completetype="LinphonePresencePerson *" type="LinphonePresencePerson">
						<description>
							<para>
								A pointer to a 
								<ref>LinphonePresencePerson</ref>
								 object if successful, NULL otherwise. 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const LinphonePresenceModel *" name="model" type="LinphonePresenceModel">
							<description>
								

								<para>
									The 
									<ref>LinphonePresenceModel</ref>
									 object to get the person from. 
								</para>
							</description>
							

						</argument>
						<argument completetype="unsigned int" name="idx" type="int">
							<description>
								

								<para>The index of the person to get (the first person having the index 0). </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Gets the nth person of a presence model. 
							<description>
								<para>
									A pointer to a 
									<ref>LinphonePresencePerson</ref>
									 object if successful, NULL otherwise. 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_model_get_nth_service">
					<return completetype="LinphonePresenceService *" type="LinphonePresenceService">
						<description>
							<para>
								A pointer to a 
								<ref>LinphonePresenceService</ref>
								 object if successful, NULL otherwise. 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const LinphonePresenceModel *" name="model" type="LinphonePresenceModel">
							<description>
								

								<para>
									The 
									<ref>LinphonePresenceModel</ref>
									 object to get the service from. 
								</para>
							</description>
							

						</argument>
						<argument completetype="unsigned int" name="idx" type="int">
							<description>
								

								<para>The index of the service to get (the first service having the index 0). </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Gets the nth service of a presence model. 
							<description>
								<para>
									A pointer to a 
									<ref>LinphonePresenceService</ref>
									 object if successful, NULL otherwise. 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_model_ref">
					<return completetype="LinphonePresenceModel *" type="LinphonePresenceModel">
						<description>
							<para>
								The 
								<ref>LinphonePresenceModel</ref>
								 object with the increased reference count. 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphonePresenceModel *" name="model" type="LinphonePresenceModel">
							<description>
								

								<para>
									The 
									<ref>LinphonePresenceModel</ref>
									 object for which the reference count is to be increased. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Increase the reference count of the 
							<ref>LinphonePresenceModel</ref>
							 object. 
							<description>
								<para>
									The 
									<ref>LinphonePresenceModel</ref>
									 object with the increased reference count. 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_model_set_activity">
					<return completetype="int" type="int">
						<description>
							<para>0 if successful, a value &lt; 0 in case of error.</para>
						</description>
						
WARNING: This function will modify the basic status of the model according to the activity being set. If you don't want the basic status to be modified automatically, you can use the combination of 
					</return>
					<arguments>
						<argument completetype="LinphonePresenceModel *" name="model" type="LinphonePresenceModel">
							<description>
								

								<para>
									The 
									<ref>LinphonePresenceModel</ref>
									 object for which to set the activity. 
								</para>
							</description>
							

						</argument>
						<argument completetype="LinphonePresenceActivityType" name="activity" type="LinphonePresenceActivityType">
							<description>
								

								<para>
									The 
									<ref>LinphonePresenceActivityType</ref>
									 to set for the model. 
								</para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="description" type="char">
							<description>
								

								<para>An additional description of the activity to set for the model. Can be NULL if no additional description is to be added. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Sets the activity of a presence model (limits to only one activity). 
							<description>
								<para>0 if successful, a value &lt; 0 in case of error.</para>
							</description>
							
WARNING: This function will modify the basic status of the model according to the activity being set. If you don't want the basic status to be modified automatically, you can use the combination of 
							<ref>linphone_presence_model_set_basic_status()</ref>
							, 
							<ref>linphone_presence_model_clear_activities()</ref>
							 and 
							<ref>linphone_presence_model_add_activity()</ref>
							. 
						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_model_unref">
					<return completetype="LinphonePresenceModel *" type="LinphonePresenceModel">
						<description>
							<para>
								The 
								<ref>LinphonePresenceModel</ref>
								 object if the reference count is still positive, NULL if the object has been destroyed. 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphonePresenceModel *" name="model" type="LinphonePresenceModel">
							<description>
								

								<para>
									The 
									<ref>LinphonePresenceModel</ref>
									 object for which the reference count is to be decreased. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Decrease the reference count of the 
							<ref>LinphonePresenceModel</ref>
							 object and destroy it if it reaches 0. 
							<description>
								<para>
									The 
									<ref>LinphonePresenceModel</ref>
									 object if the reference count is still positive, NULL if the object has been destroyed. 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
			</instancemethods>
			<properties>
				<property name="activity">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_model_get_activity">
						<return completetype="LinphonePresenceActivity *" type="LinphonePresenceActivity">
							<description>
								<para>
									A 
									<ref>LinphonePresenceActivity</ref>
									 object if successful, NULL otherwise. 
								</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphonePresenceModel *" name="model" type="LinphonePresenceModel">
								<description>
									

									<para>
										The 
										<ref>LinphonePresenceModel</ref>
										 object to get the activity from. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the first activity of a presence model (there is usually only one). 
								<description>
									<para>
										A 
										<ref>LinphonePresenceActivity</ref>
										 object if successful, NULL otherwise. 
									</para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="basic_status">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_model_get_basic_status">
						<return completetype="LinphonePresenceBasicStatus" type="LinphonePresenceBasicStatus">
							<description>
								<para>
									The 
									<ref>LinphonePresenceBasicStatus</ref>
									 of the 
									<ref>LinphonePresenceModel</ref>
									 object given as parameter. 
								</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphonePresenceModel *" name="model" type="LinphonePresenceModel">
								<description>
									

									<para>
										The 
										<ref>LinphonePresenceModel</ref>
										 object to get the basic status from. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the basic status of a presence model. 
								<description>
									<para>
										The 
										<ref>LinphonePresenceBasicStatus</ref>
										 of the 
										<ref>LinphonePresenceModel</ref>
										 object given as parameter. 
									</para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_model_set_basic_status">
						<return completetype="int" type="int">
							<description>
								<para>0 if successful, a value &lt; 0 in case of error. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphonePresenceModel *" name="model" type="LinphonePresenceModel">
								<description>
									

									<para>
										The 
										<ref>LinphonePresenceModel</ref>
										 object for which to set the basic status. 
									</para>
								</description>
								

							</argument>
							<argument completetype="LinphonePresenceBasicStatus" name="basic_status" type="LinphonePresenceBasicStatus">
								<description>
									

									<para>
										The 
										<ref>LinphonePresenceBasicStatus</ref>
										 to set for the 
										<ref>LinphonePresenceModel</ref>
										 object. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Sets the basic status of a presence model. 
								<description>
									<para>0 if successful, a value &lt; 0 in case of error. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="contact">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_model_get_contact">
						<return completetype="char *" type="char">
							<description>
								<para>A pointer to a dynamically allocated string containing the contact, or NULL if no contact is found.</para>
							</description>
							
The returned string is to be freed by calling ms_free(). 
						</return>
						<arguments>
							<argument completetype="const LinphonePresenceModel *" name="model" type="LinphonePresenceModel">
								<description>
									

									<para>
										The 
										<ref>LinphonePresenceModel</ref>
										 object to get the contact from. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the contact of a presence model. 
								<description>
									<para>A pointer to a dynamically allocated string containing the contact, or NULL if no contact is found.</para>
								</description>
								
The returned string is to be freed by calling ms_free(). 
							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_model_set_contact">
						<return completetype="int" type="int">
							<description>
								<para>0 if successful, a value &lt; 0 in case of error. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphonePresenceModel *" name="model" type="LinphonePresenceModel">
								<description>
									

									<para>
										The 
										<ref>LinphonePresenceModel</ref>
										 object for which to set the contact. 
									</para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="contact" type="char">
								<description>
									

									<para>The contact string to set. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Sets the contact of a presence model. 
								<description>
									<para>0 if successful, a value &lt; 0 in case of error. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="nb_activities">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_model_get_nb_activities">
						<return completetype="unsigned int" type="int">
							<description>
								<para>
									The number of activities included in the 
									<ref>LinphonePresenceModel</ref>
									 object. 
								</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphonePresenceModel *" name="model" type="LinphonePresenceModel">
								<description>
									

									<para>
										The 
										<ref>LinphonePresenceModel</ref>
										 object to get the number of activities from. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the number of activities included in the presence model. 
								<description>
									<para>
										The number of activities included in the 
										<ref>LinphonePresenceModel</ref>
										 object. 
									</para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="nb_persons">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_model_get_nb_persons">
						<return completetype="unsigned int" type="int">
							<description>
								<para>
									The number of persons included in the 
									<ref>LinphonePresenceModel</ref>
									 object. 
								</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphonePresenceModel *" name="model" type="LinphonePresenceModel">
								<description>
									

									<para>
										The 
										<ref>LinphonePresenceModel</ref>
										 object to get the number of persons from. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the number of persons included in the presence model. 
								<description>
									<para>
										The number of persons included in the 
										<ref>LinphonePresenceModel</ref>
										 object. 
									</para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="nb_services">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_model_get_nb_services">
						<return completetype="unsigned int" type="int">
							<description>
								<para>
									The number of services included in the 
									<ref>LinphonePresenceModel</ref>
									 object. 
								</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphonePresenceModel *" name="model" type="LinphonePresenceModel">
								<description>
									

									<para>
										The 
										<ref>LinphonePresenceModel</ref>
										 object to get the number of services from. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the number of services included in the presence model. 
								<description>
									<para>
										The number of services included in the 
										<ref>LinphonePresenceModel</ref>
										 object. 
									</para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="presentity">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_model_get_presentity">
						<return completetype="const LinphoneAddress *" type="LinphoneAddress">
							<description>
								<para>A pointer to a const LinphoneAddress, or NULL if no contact is found. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphonePresenceModel *" name="model" type="LinphonePresenceModel">
								<description>
									

									<para>
										The 
										<ref>LinphonePresenceModel</ref>
										 object to get the contact from. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the presentity of a presence model. 
								<description>
									<para>A pointer to a const LinphoneAddress, or NULL if no contact is found. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_model_set_presentity">
						<return completetype="int" type="int">
							<description>
								<para>0 if successful, a value &lt; 0 in case of error. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphonePresenceModel *" name="model" type="LinphonePresenceModel">
								<description>
									

									<para>
										The 
										<ref>LinphonePresenceModel</ref>
										 object for which to set the contact. 
									</para>
								</description>
								

							</argument>
							<argument completetype="const LinphoneAddress *" name="presentity" type="LinphoneAddress">
								<description>
									

									<para>The presentity address to set (presentity is copied). </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Sets the presentity of a presence model. 
								<description>
									<para>0 if successful, a value &lt; 0 in case of error. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="timestamp">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_model_get_timestamp">
						<return completetype="time_t" type="time_t">
							<description>
								<para>
									The timestamp of the 
									<ref>LinphonePresenceModel</ref>
									 object or -1 on error. 
								</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphonePresenceModel *" name="model" type="LinphonePresenceModel">
								<description>
									

									<para>
										The 
										<ref>LinphonePresenceModel</ref>
										 object to get the timestamp from. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the timestamp of a presence model. 
								<description>
									<para>
										The timestamp of the 
										<ref>LinphonePresenceModel</ref>
										 object or -1 on error. 
									</para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="user_data">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_model_get_user_data">
						<return completetype="void *" type="void">
							<description>
								<para>A pointer to the user data. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphonePresenceModel *" name="model" type="LinphonePresenceModel">
								<description>
									

									<para>
										The 
										<ref>LinphonePresenceModel</ref>
										 object for which to get the user data. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the user data of a 
								<ref>LinphonePresenceModel</ref>
								 object. 
								<description>
									<para>A pointer to the user data. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_model_set_user_data">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphonePresenceModel *" name="model" type="LinphonePresenceModel">
								<description>
									

									<para>
										The 
										<ref>LinphonePresenceModel</ref>
										 object for which to set the user data. 
									</para>
								</description>
								

							</argument>
							<argument completetype="void *" name="user_data" type="void">
								<description>
									

									<para>A pointer to the user data to set. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Sets the user data of a 
								<ref>LinphonePresenceModel</ref>
								 object. 
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
			</properties>
			<detaileddescription>
				

				<para>Presence model type holding information about the presence of a person. </para>
				        
			</detaileddescription>
			
        
		</class>
		<class cfunctionprefix="linphone_presence_note_" deprecated="false" destroyable="false" name="LinphonePresenceNote" refcountable="true">
			<classmethods>
				<classmethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_note_new">
					<return completetype="LinphonePresenceNote *" type="LinphonePresenceNote">
						<description>
							<para>The created presence note, NULL on error. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const char *" name="content" type="char">
							<description>
								

								<para>The content of the note to be created. </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="lang" type="char">
							<description>
								

								<para>The language of the note to be created. Can be NULL if no language is to be specified for the note. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Creates a presence note. 
							<description>
								<para>The created presence note, NULL on error. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</classmethod>
			</classmethods>
			<instancemethods>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_note_ref">
					<return completetype="LinphonePresenceNote *" type="LinphonePresenceNote">
						<description>
							<para>
								The 
								<ref>LinphonePresenceNote</ref>
								 object with the increased reference count. 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphonePresenceNote *" name="note" type="LinphonePresenceNote">
							<description>
								

								<para>
									The 
									<ref>LinphonePresenceNote</ref>
									 object for which the reference count is to be increased. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Increase the reference count of the 
							<ref>LinphonePresenceNote</ref>
							 object. 
							<description>
								<para>
									The 
									<ref>LinphonePresenceNote</ref>
									 object with the increased reference count. 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_note_unref">
					<return completetype="LinphonePresenceNote *" type="LinphonePresenceNote">
						<description>
							<para>
								The 
								<ref>LinphonePresenceNote</ref>
								 object if the reference count is still positive, NULL if the object has been destroyed. 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphonePresenceNote *" name="note" type="LinphonePresenceNote">
							<description>
								

								<para>
									The 
									<ref>LinphonePresenceNote</ref>
									 object for which the reference count is to be decreased. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Decrease the reference count of the 
							<ref>LinphonePresenceNote</ref>
							 object and destroy it if it reaches 0. 
							<description>
								<para>
									The 
									<ref>LinphonePresenceNote</ref>
									 object if the reference count is still positive, NULL if the object has been destroyed. 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
			</instancemethods>
			<properties>
				<property name="content">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_note_get_content">
						<return completetype="const char *" type="char">
							<description>
								<para>A pointer to the content of the presence note. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphonePresenceNote *" name="note" type="LinphonePresenceNote">
								<description>
									

									<para>
										A pointer to the 
										<ref>LinphonePresenceNote</ref>
										 for which to get the content. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the content of a presence note. 
								<description>
									<para>A pointer to the content of the presence note. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_note_set_content">
						<return completetype="int" type="int">
							<description>
								<para>0 if successful, a value &lt; 0 in case of error. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphonePresenceNote *" name="note" type="LinphonePresenceNote">
								<description>
									

									<para>
										The 
										<ref>LinphonePresenceNote</ref>
										 object for which to set the content. 
									</para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="content" type="char">
								<description>
									

									<para>The content of the note. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Sets the content of a presence note. 
								<description>
									<para>0 if successful, a value &lt; 0 in case of error. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="lang">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_note_get_lang">
						<return completetype="const char *" type="char">
							<description>
								<para>A pointer to the language string of the presence note, or NULL if no language is specified. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphonePresenceNote *" name="note" type="LinphonePresenceNote">
								<description>
									

									<para>
										A pointer to the 
										<ref>LinphonePresenceNote</ref>
										 for which to get the language. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the language of a presence note. 
								<description>
									<para>A pointer to the language string of the presence note, or NULL if no language is specified. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_note_set_lang">
						<return completetype="int" type="int">
							<description>
								<para>0 if successful, a value &lt; 0 in case of error. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphonePresenceNote *" name="note" type="LinphonePresenceNote">
								<description>
									

									<para>
										The 
										<ref>LinphonePresenceNote</ref>
										 object for which to set the language. 
									</para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="lang" type="char">
								<description>
									

									<para>The language of the note. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Sets the language of a presence note. 
								<description>
									<para>0 if successful, a value &lt; 0 in case of error. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="user_data">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_note_get_user_data">
						<return completetype="void *" type="void">
							<description>
								<para>A pointer to the user data. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphonePresenceNote *" name="note" type="LinphonePresenceNote">
								<description>
									

									<para>
										The 
										<ref>LinphonePresenceNote</ref>
										 object for which to get the user data. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the user data of a 
								<ref>LinphonePresenceNote</ref>
								 object. 
								<description>
									<para>A pointer to the user data. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_note_set_user_data">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphonePresenceNote *" name="note" type="LinphonePresenceNote">
								<description>
									

									<para>
										The 
										<ref>LinphonePresenceNote</ref>
										 object for which to set the user data. 
									</para>
								</description>
								

							</argument>
							<argument completetype="void *" name="user_data" type="void">
								<description>
									

									<para>A pointer to the user data to set. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Sets the user data of a 
								<ref>LinphonePresenceNote</ref>
								 object. 
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
			</properties>
			<detaileddescription>
				

				<para>Presence note type holding information about a presence note. </para>
				        
			</detaileddescription>
			
        
		</class>
		<class cfunctionprefix="linphone_presence_person_" deprecated="false" destroyable="false" name="LinphonePresencePerson" refcountable="true">
			<classmethods>
				<classmethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_person_new">
					<return completetype="LinphonePresencePerson *" type="LinphonePresencePerson">
						<description>
							<para>The created presence person, NULL on error. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const char *" name="id" type="char">
							<description>
								

								<para>The id of the presence person to be created. Can be NULL to generate it automatically. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Creates a presence person. 
							<description>
								<para>The created presence person, NULL on error. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</classmethod>
			</classmethods>
			<instancemethods>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_person_add_activities_note">
					<return completetype="int" type="int">
						<description>
							<para>0 if successful, a value &lt; 0 in case of error. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphonePresencePerson *" name="person" type="LinphonePresencePerson">
							<description>
								

								<para>
									The 
									<ref>LinphonePresencePerson</ref>
									 object for which to add an activities note. 
								</para>
							</description>
							

						</argument>
						<argument completetype="LinphonePresenceNote *" name="note" type="LinphonePresenceNote">
							<description>
								

								<para>
									The 
									<ref>LinphonePresenceNote</ref>
									 object to add to the person. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Adds an activities note to a presence person. 
							<description>
								<para>0 if successful, a value &lt; 0 in case of error. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_person_add_activity">
					<return completetype="int" type="int">
						<description>
							<para>0 if successful, a value &lt; 0 in case of error. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphonePresencePerson *" name="person" type="LinphonePresencePerson">
							<description>
								

								<para>
									The 
									<ref>LinphonePresencePerson</ref>
									 object for which to add an activity. 
								</para>
							</description>
							

						</argument>
						<argument completetype="LinphonePresenceActivity *" name="activity" type="LinphonePresenceActivity">
							<description>
								

								<para>
									The 
									<ref>LinphonePresenceActivity</ref>
									 object to add to the person. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Adds an activity to a presence person. 
							<description>
								<para>0 if successful, a value &lt; 0 in case of error. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_person_add_note">
					<return completetype="int" type="int">
						<description>
							<para>0 if successful, a value &lt; 0 in case of error. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphonePresencePerson *" name="person" type="LinphonePresencePerson">
							<description>
								

								<para>
									The 
									<ref>LinphonePresencePerson</ref>
									 object for which to add a note. 
								</para>
							</description>
							

						</argument>
						<argument completetype="LinphonePresenceNote *" name="note" type="LinphonePresenceNote">
							<description>
								

								<para>
									The 
									<ref>LinphonePresenceNote</ref>
									 object to add to the person. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Adds a note to a presence person. 
							<description>
								<para>0 if successful, a value &lt; 0 in case of error. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_person_clear_activities">
					<return completetype="int" type="int">
						<description>
							<para>0 if successful, a value &lt; 0 in case of error. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphonePresencePerson *" name="person" type="LinphonePresencePerson">
							<description>
								

								<para>
									The 
									<ref>LinphonePresencePerson</ref>
									 object for which to clear the activities. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Clears the activities of a presence person. 
							<description>
								<para>0 if successful, a value &lt; 0 in case of error. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_person_clear_activities_notes">
					<return completetype="int" type="int">
						<description>
							<para>0 if successful, a value &lt; 0 in case of error. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphonePresencePerson *" name="person" type="LinphonePresencePerson">
							<description>
								

								<para>
									The 
									<ref>LinphonePresencePerson</ref>
									 object for which to clear the activities notes. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Clears the activities notes of a presence person. 
							<description>
								<para>0 if successful, a value &lt; 0 in case of error. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_person_clear_notes">
					<return completetype="int" type="int">
						<description>
							<para>0 if successful, a value &lt; 0 in case of error. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphonePresencePerson *" name="person" type="LinphonePresencePerson">
							<description>
								

								<para>
									The 
									<ref>LinphonePresencePerson</ref>
									 object for which to clear the notes. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Clears the notes of a presence person. 
							<description>
								<para>0 if successful, a value &lt; 0 in case of error. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_person_get_nth_activities_note">
					<return completetype="LinphonePresenceNote *" type="LinphonePresenceNote">
						<description>
							<para>
								A pointer to a 
								<ref>LinphonePresenceNote</ref>
								 object if successful, NULL otherwise. 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const LinphonePresencePerson *" name="person" type="LinphonePresencePerson">
							<description>
								

								<para>
									The 
									<ref>LinphonePresencePerson</ref>
									 object to get the activities note from. 
								</para>
							</description>
							

						</argument>
						<argument completetype="unsigned int" name="idx" type="int">
							<description>
								

								<para>The index of the activities note to get (the first note having the index 0). </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Gets the nth activities note of a presence person. 
							<description>
								<para>
									A pointer to a 
									<ref>LinphonePresenceNote</ref>
									 object if successful, NULL otherwise. 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_person_get_nth_activity">
					<return completetype="LinphonePresenceActivity *" type="LinphonePresenceActivity">
						<description>
							<para>
								A pointer to a 
								<ref>LinphonePresenceActivity</ref>
								 object if successful, NULL otherwise. 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const LinphonePresencePerson *" name="person" type="LinphonePresencePerson">
							<description>
								

								<para>
									The 
									<ref>LinphonePresencePerson</ref>
									 object to get the activity from. 
								</para>
							</description>
							

						</argument>
						<argument completetype="unsigned int" name="idx" type="int">
							<description>
								

								<para>The index of the activity to get (the first activity having the index 0). </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Gets the nth activity of a presence person. 
							<description>
								<para>
									A pointer to a 
									<ref>LinphonePresenceActivity</ref>
									 object if successful, NULL otherwise. 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_person_get_nth_note">
					<return completetype="LinphonePresenceNote *" type="LinphonePresenceNote">
						<description>
							<para>
								A pointer to a 
								<ref>LinphonePresenceNote</ref>
								 object if successful, NULL otherwise. 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const LinphonePresencePerson *" name="person" type="LinphonePresencePerson">
							<description>
								

								<para>
									The 
									<ref>LinphonePresencePerson</ref>
									 object to get the note from. 
								</para>
							</description>
							

						</argument>
						<argument completetype="unsigned int" name="idx" type="int">
							<description>
								

								<para>The index of the note to get (the first note having the index 0). </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Gets the nth note of a presence person. 
							<description>
								<para>
									A pointer to a 
									<ref>LinphonePresenceNote</ref>
									 object if successful, NULL otherwise. 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_person_ref">
					<return completetype="LinphonePresencePerson *" type="LinphonePresencePerson">
						<description>
							<para>
								The 
								<ref>LinphonePresencePerson</ref>
								 object with the increased reference count. 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphonePresencePerson *" name="person" type="LinphonePresencePerson">
							<description>
								

								<para>
									The 
									<ref>LinphonePresencePerson</ref>
									 object for which the reference count is to be increased. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Increase the reference count of the 
							<ref>LinphonePresencePerson</ref>
							 object. 
							<description>
								<para>
									The 
									<ref>LinphonePresencePerson</ref>
									 object with the increased reference count. 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_person_unref">
					<return completetype="LinphonePresencePerson *" type="LinphonePresencePerson">
						<description>
							<para>
								The 
								<ref>LinphonePresencePerson</ref>
								 object if the reference count is still positive, NULL if the object has been destroyed. 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphonePresencePerson *" name="person" type="LinphonePresencePerson">
							<description>
								

								<para>
									The 
									<ref>LinphonePresencePerson</ref>
									 object for which the reference count is to be decreased. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Decrease the reference count of the 
							<ref>LinphonePresencePerson</ref>
							 object and destroy it if it reaches 0. 
							<description>
								<para>
									The 
									<ref>LinphonePresencePerson</ref>
									 object if the reference count is still positive, NULL if the object has been destroyed. 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
			</instancemethods>
			<properties>
				<property name="id">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_person_get_id">
						<return completetype="char *" type="char">
							<description>
								<para>A pointer to a dynamically allocated string containing the id, or NULL in case of error.</para>
							</description>
							
The returned string is to be freed by calling ms_free(). 
						</return>
						<arguments>
							<argument completetype="const LinphonePresencePerson *" name="person" type="LinphonePresencePerson">
								<description>
									

									<para>
										The 
										<ref>LinphonePresencePerson</ref>
										 object to get the id from. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the id of a presence person. 
								<description>
									<para>A pointer to a dynamically allocated string containing the id, or NULL in case of error.</para>
								</description>
								
The returned string is to be freed by calling ms_free(). 
							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_person_set_id">
						<return completetype="int" type="int">
							<description>
								<para>0 if successful, a value &lt; 0 in case of error. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphonePresencePerson *" name="person" type="LinphonePresencePerson">
								<description>
									

									<para>
										The 
										<ref>LinphonePresencePerson</ref>
										 object for which to set the id. 
									</para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="id" type="char">
								<description>
									

									<para>The id string to set. Can be NULL to generate it automatically. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Sets the id of a presence person. 
								<description>
									<para>0 if successful, a value &lt; 0 in case of error. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="nb_activities">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_person_get_nb_activities">
						<return completetype="unsigned int" type="int">
							<description>
								<para>
									The number of activities included in the 
									<ref>LinphonePresencePerson</ref>
									 object. 
								</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphonePresencePerson *" name="person" type="LinphonePresencePerson">
								<description>
									

									<para>
										The 
										<ref>LinphonePresencePerson</ref>
										 object to get the number of activities from. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the number of activities included in the presence person. 
								<description>
									<para>
										The number of activities included in the 
										<ref>LinphonePresencePerson</ref>
										 object. 
									</para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="nb_activities_notes">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_person_get_nb_activities_notes">
						<return completetype="unsigned int" type="int">
							<description>
								<para>
									The number of activities notes included in the 
									<ref>LinphonePresencePerson</ref>
									 object. 
								</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphonePresencePerson *" name="person" type="LinphonePresencePerson">
								<description>
									

									<para>
										The 
										<ref>LinphonePresencePerson</ref>
										 object to get the number of activities notes from. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the number of activities notes included in the presence person. 
								<description>
									<para>
										The number of activities notes included in the 
										<ref>LinphonePresencePerson</ref>
										 object. 
									</para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="nb_notes">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_person_get_nb_notes">
						<return completetype="unsigned int" type="int">
							<description>
								<para>
									The number of notes included in the 
									<ref>LinphonePresencePerson</ref>
									 object. 
								</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphonePresencePerson *" name="person" type="LinphonePresencePerson">
								<description>
									

									<para>
										The 
										<ref>LinphonePresencePerson</ref>
										 object to get the number of notes from. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the number of notes included in the presence person. 
								<description>
									<para>
										The number of notes included in the 
										<ref>LinphonePresencePerson</ref>
										 object. 
									</para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="user_data">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_person_get_user_data">
						<return completetype="void *" type="void">
							<description>
								<para>A pointer to the user data. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphonePresencePerson *" name="person" type="LinphonePresencePerson">
								<description>
									

									<para>
										The 
										<ref>LinphonePresencePerson</ref>
										 object for which to get the user data. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the user data of a 
								<ref>LinphonePresencePerson</ref>
								 object. 
								<description>
									<para>A pointer to the user data. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_person_set_user_data">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphonePresencePerson *" name="person" type="LinphonePresencePerson">
								<description>
									

									<para>
										The 
										<ref>LinphonePresencePerson</ref>
										 object for which to set the user data. 
									</para>
								</description>
								

							</argument>
							<argument completetype="void *" name="user_data" type="void">
								<description>
									

									<para>A pointer to the user data to set. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Sets the user data of a 
								<ref>LinphonePresencePerson</ref>
								 object. 
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
			</properties>
			<detaileddescription>
				

				<para>Presence person holding information about a presence person. </para>
				        
			</detaileddescription>
			
        
		</class>
		<class cfunctionprefix="linphone_presence_service_" deprecated="false" destroyable="false" name="LinphonePresenceService" refcountable="true">
			<classmethods>
				<classmethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_service_new">
					<return completetype="LinphonePresenceService *" type="LinphonePresenceService">
						<description>
							<para>The created presence service, NULL on error.</para>
						</description>
						
The created presence service has the basic status 'closed'. 
					</return>
					<arguments>
						<argument completetype="const char *" name="id" type="char">
							<description>
								

								<para>The id of the presence service to be created. Can be NULL to generate it automatically. </para>
							</description>
							

						</argument>
						<argument completetype="LinphonePresenceBasicStatus" name="basic_status" type="LinphonePresenceBasicStatus">
							<description>
								

								<para>
									The 
									<ref>LinphonePresenceBasicStatus</ref>
									 to set for the 
									<ref>LinphonePresenceService</ref>
									 object. 
								</para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="contact" type="char">
							<description>
								

								<para>The contact string to set. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Creates a presence service. 
							<description>
								<para>The created presence service, NULL on error.</para>
							</description>
							
The created presence service has the basic status 'closed'. 
						</para>
						        
					</detaileddescription>
					
        
				</classmethod>
			</classmethods>
			<instancemethods>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_service_add_note">
					<return completetype="int" type="int">
						<description>
							<para>0 if successful, a value &lt; 0 in case of error. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphonePresenceService *" name="service" type="LinphonePresenceService">
							<description>
								

								<para>
									The 
									<ref>LinphonePresenceService</ref>
									 object for which to add a note. 
								</para>
							</description>
							

						</argument>
						<argument completetype="LinphonePresenceNote *" name="note" type="LinphonePresenceNote">
							<description>
								

								<para>
									The 
									<ref>LinphonePresenceNote</ref>
									 object to add to the service. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Adds a note to a presence service. 
							<description>
								<para>0 if successful, a value &lt; 0 in case of error. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_service_clear_notes">
					<return completetype="int" type="int">
						<description>
							<para>0 if successful, a value &lt; 0 in case of error. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphonePresenceService *" name="service" type="LinphonePresenceService">
							<description>
								

								<para>
									The 
									<ref>LinphonePresenceService</ref>
									 object for which to clear the notes. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Clears the notes of a presence service. 
							<description>
								<para>0 if successful, a value &lt; 0 in case of error. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_service_get_nth_note">
					<return completetype="LinphonePresenceNote *" type="LinphonePresenceNote">
						<description>
							<para>
								A pointer to a 
								<ref>LinphonePresenceNote</ref>
								 object if successful, NULL otherwise. 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const LinphonePresenceService *" name="service" type="LinphonePresenceService">
							<description>
								

								<para>
									The 
									<ref>LinphonePresenceService</ref>
									 object to get the note from. 
								</para>
							</description>
							

						</argument>
						<argument completetype="unsigned int" name="idx" type="int">
							<description>
								

								<para>The index of the note to get (the first note having the index 0). </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Gets the nth note of a presence service. 
							<description>
								<para>
									A pointer to a 
									<ref>LinphonePresenceNote</ref>
									 object if successful, NULL otherwise. 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_service_ref">
					<return completetype="LinphonePresenceService *" type="LinphonePresenceService">
						<description>
							<para>
								The 
								<ref>LinphonePresenceService</ref>
								 object with the increased reference count. 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphonePresenceService *" name="service" type="LinphonePresenceService">
							<description>
								

								<para>
									The 
									<ref>LinphonePresenceService</ref>
									 object for which the reference count is to be increased. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Increase the reference count of the 
							<ref>LinphonePresenceService</ref>
							 object. 
							<description>
								<para>
									The 
									<ref>LinphonePresenceService</ref>
									 object with the increased reference count. 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_service_unref">
					<return completetype="LinphonePresenceService *" type="LinphonePresenceService">
						<description>
							<para>
								The 
								<ref>LinphonePresenceService</ref>
								 object if the reference count is still positive, NULL if the object has been destroyed. 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphonePresenceService *" name="service" type="LinphonePresenceService">
							<description>
								

								<para>
									The 
									<ref>LinphonePresenceService</ref>
									 object for which the reference count is to be decreased. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Decrease the reference count of the 
							<ref>LinphonePresenceService</ref>
							 object and destroy it if it reaches 0. 
							<description>
								<para>
									The 
									<ref>LinphonePresenceService</ref>
									 object if the reference count is still positive, NULL if the object has been destroyed. 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
			</instancemethods>
			<properties>
				<property name="basic_status">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_service_get_basic_status">
						<return completetype="LinphonePresenceBasicStatus" type="LinphonePresenceBasicStatus">
							<description>
								<para>
									The 
									<ref>LinphonePresenceBasicStatus</ref>
									 of the 
									<ref>LinphonePresenceService</ref>
									 object given as parameter. 
								</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphonePresenceService *" name="service" type="LinphonePresenceService">
								<description>
									

									<para>
										The 
										<ref>LinphonePresenceService</ref>
										 object to get the basic status from. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the basic status of a presence service. 
								<description>
									<para>
										The 
										<ref>LinphonePresenceBasicStatus</ref>
										 of the 
										<ref>LinphonePresenceService</ref>
										 object given as parameter. 
									</para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_service_set_basic_status">
						<return completetype="int" type="int">
							<description>
								<para>0 if successful, a value &lt; 0 in case of error. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphonePresenceService *" name="service" type="LinphonePresenceService">
								<description>
									

									<para>
										The 
										<ref>LinphonePresenceService</ref>
										 object for which to set the basic status. 
									</para>
								</description>
								

							</argument>
							<argument completetype="LinphonePresenceBasicStatus" name="basic_status" type="LinphonePresenceBasicStatus">
								<description>
									

									<para>
										The 
										<ref>LinphonePresenceBasicStatus</ref>
										 to set for the 
										<ref>LinphonePresenceService</ref>
										 object. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Sets the basic status of a presence service. 
								<description>
									<para>0 if successful, a value &lt; 0 in case of error. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="contact">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_service_get_contact">
						<return completetype="char *" type="char">
							<description>
								<para>A pointer to a dynamically allocated string containing the contact, or NULL if no contact is found.</para>
							</description>
							
The returned string is to be freed by calling ms_free(). 
						</return>
						<arguments>
							<argument completetype="const LinphonePresenceService *" name="service" type="LinphonePresenceService">
								<description>
									

									<para>
										The 
										<ref>LinphonePresenceService</ref>
										 object to get the contact from. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the contact of a presence service. 
								<description>
									<para>A pointer to a dynamically allocated string containing the contact, or NULL if no contact is found.</para>
								</description>
								
The returned string is to be freed by calling ms_free(). 
							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_service_set_contact">
						<return completetype="int" type="int">
							<description>
								<para>0 if successful, a value &lt; 0 in case of error. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphonePresenceService *" name="service" type="LinphonePresenceService">
								<description>
									

									<para>
										The 
										<ref>LinphonePresenceService</ref>
										 object for which to set the contact. 
									</para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="contact" type="char">
								<description>
									

									<para>The contact string to set. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Sets the contact of a presence service. 
								<description>
									<para>0 if successful, a value &lt; 0 in case of error. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="id">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_service_get_id">
						<return completetype="char *" type="char">
							<description>
								<para>A pointer to a dynamically allocated string containing the id, or NULL in case of error.</para>
							</description>
							
The returned string is to be freed by calling ms_free(). 
						</return>
						<arguments>
							<argument completetype="const LinphonePresenceService *" name="service" type="LinphonePresenceService">
								<description>
									

									<para>
										The 
										<ref>LinphonePresenceService</ref>
										 object to get the id from. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the id of a presence service. 
								<description>
									<para>A pointer to a dynamically allocated string containing the id, or NULL in case of error.</para>
								</description>
								
The returned string is to be freed by calling ms_free(). 
							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_service_set_id">
						<return completetype="int" type="int">
							<description>
								<para>0 if successful, a value &lt; 0 in case of error. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphonePresenceService *" name="service" type="LinphonePresenceService">
								<description>
									

									<para>
										The 
										<ref>LinphonePresenceService</ref>
										 object for which to set the id. 
									</para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="id" type="char">
								<description>
									

									<para>The id string to set. Can be NULL to generate it automatically. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Sets the id of a presence service. 
								<description>
									<para>0 if successful, a value &lt; 0 in case of error. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="nb_notes">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_service_get_nb_notes">
						<return completetype="unsigned int" type="int">
							<description>
								<para>
									The number of notes included in the 
									<ref>LinphonePresenceService</ref>
									 object. 
								</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphonePresenceService *" name="service" type="LinphonePresenceService">
								<description>
									

									<para>
										The 
										<ref>LinphonePresenceService</ref>
										 object to get the number of notes from. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the number of notes included in the presence service. 
								<description>
									<para>
										The number of notes included in the 
										<ref>LinphonePresenceService</ref>
										 object. 
									</para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="user_data">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_service_get_user_data">
						<return completetype="void *" type="void">
							<description>
								<para>A pointer to the user data. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphonePresenceService *" name="service" type="LinphonePresenceService">
								<description>
									

									<para>
										The 
										<ref>LinphonePresenceService</ref>
										 object for which to get the user data. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the user data of a 
								<ref>LinphonePresenceService</ref>
								 object. 
								<description>
									<para>A pointer to the user data. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/presence.h" name="linphone_presence_service_set_user_data">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphonePresenceService *" name="service" type="LinphonePresenceService">
								<description>
									

									<para>
										The 
										<ref>LinphonePresenceService</ref>
										 object for which to set the user data. 
									</para>
								</description>
								

							</argument>
							<argument completetype="void *" name="user_data" type="void">
								<description>
									

									<para>A pointer to the user data to set. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Sets the user data of a 
								<ref>LinphonePresenceService</ref>
								 object. 
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
			</properties>
			<detaileddescription>
				

				<para>Presence service type holding information about a presence service. </para>
				        
			</detaileddescription>
			
        
		</class>
		<class cfunctionprefix="linphone_proxy_config_" deprecated="false" destroyable="true" name="LinphoneProxyConfig" refcountable="true">
			<classmethods>
				<classmethod deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_new">
					<return completetype="LinphoneProxyConfig *" type="LinphoneProxyConfig"/>
					<arguments/>
					<detaileddescription>
						

						<para>Creates an empty proxy config. </para>
						        
					</detaileddescription>
					
        
				</classmethod>
			</classmethods>
			<instancemethods>
				<instancemethod deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_destroy">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig"/>
					</arguments>
					<detaileddescription>
						

						<para>Destroys a proxy config. </para>
						<para>
							<note>
								<para>
									: LinphoneProxyConfig that have been removed from LinphoneCore with 
									<ref>linphone_core_remove_proxy_config()</ref>
									 must not be freed. 
								</para>
							</note>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_done">
					<return completetype="int" type="int"/>
					<arguments>
						<argument completetype="LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig"/>
					</arguments>
					<detaileddescription>
						

						<para>Commits modification made to the proxy configuration. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_edit">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig"/>
					</arguments>
					<detaileddescription>
						

						<para>Starts editing a proxy configuration.</para>
						<para>
							Because proxy configuration must be consistent, applications MUST call 
							<ref>linphone_proxy_config_edit()</ref>
							 before doing any attempts to modify proxy configuration (such as identity, proxy address and so on). Once the modifications are done, then the application must call 
							<ref>linphone_proxy_config_done()</ref>
							 to commit the changes. 
						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_find_auth_info">
					<return completetype="const LinphoneAuthInfo *" type="LinphoneAuthInfo">
						<description>
							<para>
								a 
								<ref>LinphoneAuthInfo</ref>
								 matching proxy config criteria if possible, NULL if nothing can be found. 
							</para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig">
							<description>
								

								<para>
									<ref>LinphoneProxyConfig</ref>
									 object. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Find authentication info matching proxy config, if any, similarly to linphone_core_find_auth_info. 
							<description>
								<para>
									a 
									<ref>LinphoneAuthInfo</ref>
									 matching proxy config criteria if possible, NULL if nothing can be found. 
								</para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_get_custom_header">
					<return completetype="const char *" type="char">
						<description>
							<para>the value of the queried header. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig">
							<description>
								

								<para>
									<ref>LinphoneProxyConfig</ref>
									 object. 
								</para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="header_name" type="char">
							<description>
								

								<para>the header name for which to fetch corresponding value </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Obtain the value of a header sent by the server in last answer to REGISTER. 
							<description>
								<para>the value of the queried header. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_is_phone_number">
					<return completetype="bool_t" type="bool_t">
						<description>
							<para>TRUE if input is a phone number, FALSE otherwise. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneProxyConfig *" name="proxy" type="LinphoneProxyConfig">
							<description>
								

								<para>
									<ref>LinphoneProxyConfig</ref>
									 argument, unused yet but may contain useful data. Can be NULL. 
								</para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="username" type="char">
							<description>
								

								<para>string to parse. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Detect if the given input is a phone number or not. 
							<description>
								<para>TRUE if input is a phone number, FALSE otherwise. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_normalize_number">
					<return completetype="bool_t" type="bool_t">
						<description>
							<para>TRUE if a phone number was recognized, FALSE otherwise. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneProxyConfig *" name="proxy" type="LinphoneProxyConfig">
							<description>
								

								<para>
									<ref>LinphoneProxyConfig</ref>
									 object containing country code and/or escape symbol. If NULL passed, will use default configuration. 
								</para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="username" type="char">
							<description>
								

								<para>the string to parse </para>
							</description>
							

						</argument>
						<argument completetype="char *" name="result" type="char">
							<description>
								

								<para>the newly normalized number </para>
							</description>
							

						</argument>
						<argument completetype="size_t" name="result_len" type="size_t">
							<description>
								

								<para>
									the size of the normalized number 
									<emphasis>result</emphasis>
									 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							See linphone_proxy_config_normalize_phone_number 
							<description>
								<para>TRUE if a phone number was recognized, FALSE otherwise. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_normalize_phone_number">
					<return completetype="char *" type="char">
						<description>
							<para>NULL if input is an invalid phone number, normalized phone number from username input otherwise. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneProxyConfig *" name="proxy" type="LinphoneProxyConfig">
							<description>
								

								<para>
									<ref>LinphoneProxyConfig</ref>
									 object containing country code and/or escape symbol. If NULL passed, will use default configuration. 
								</para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="username" type="char">
							<description>
								

								<para>the string to parse </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Normalize a human readable phone number into a basic string. 888-444-222 becomes 888444222 or +33888444222 depending on the 
							<ref>LinphoneProxyConfig</ref>
							 object. This function will always generate a normalized username if input is a phone number. 
							<description>
								<para>NULL if input is an invalid phone number, normalized phone number from username input otherwise. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_normalize_sip_uri">
					<return completetype="LinphoneAddress *" type="LinphoneAddress">
						<description>
							<para>NULL if invalid input, normalized sip address otherwise. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneProxyConfig *" name="proxy" type="LinphoneProxyConfig">
							<description>
								

								<para>
									<ref>LinphoneProxyConfig</ref>
									 object containing country code, escape symbol and/or domain name. Can be NULL if domain is already provided. 
								</para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="username" type="char">
							<description>
								

								<para>the string to parse </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Normalize a human readable sip uri into a fully qualified LinphoneAddress. A sip address should look like DisplayName &lt;sip:username@domain:port&gt; . Basically this function performs the following tasks
							<itemizedlist>
								

								<listitem>
									<para>if a phone number is entered, prepend country prefix and eventually escape the '+' by 00 of the proxy config.</para>
								</listitem>
								<listitem>
									<para>if no domain part is supplied, append the domain name of the proxy config. Returns NULL if no proxy is provided at this point.</para>
								</listitem>
								<listitem>
									<para>if no sip: is present, prepend it.</para>
								</listitem>
							</itemizedlist>
							

						</para>
						<para>
							The result is a syntactically correct SIP address. 
							<description>
								<para>NULL if invalid input, normalized sip address otherwise. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_pause_register">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig">
							<description>
								

								<para>
									<ref>LinphoneProxyConfig</ref>
									 object. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Prevent a proxy config from refreshing its registration. This is useful to let registrations to expire naturally (or) when the application wants to keep control on when refreshes are sent. However, linphone_core_set_network_reachable(lc,TRUE) will always request the proxy configs to refresh their registrations. The refreshing operations can be resumed with 
							<ref>linphone_proxy_config_refresh_register()</ref>
							. 
						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_ref">
					<return completetype="LinphoneProxyConfig *" type="LinphoneProxyConfig">
						<description>
							<para>The same proxy config. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig">
							<description>
								

								<para>
									<ref>LinphoneProxyConfig</ref>
									 object. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Acquire a reference to the proxy config. 
							<description>
								<para>The same proxy config. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_refresh_register">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig"/>
					</arguments>
					<detaileddescription>
						

						<para>Refresh a proxy registration. This is useful if for example you resuming from suspend, thus IP address may have changed. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_set_custom_header">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig">
							<description>
								

								<para>
									<ref>LinphoneProxyConfig</ref>
									 object. 
								</para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="header_name" type="char">
							<description>
								

								<para>the header name </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="header_value" type="char">
							<description>
								

								<para>the header's value </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Set the value of a custom header sent to the server in REGISTERs request. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_unref">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig">
							<description>
								

								<para>
									<ref>LinphoneProxyConfig</ref>
									 object. 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Release reference to the proxy config. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
			</instancemethods>
			<properties>
				<property name="avpf_enabled">
					<getter deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_avpf_enabled">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>True if AVPF/SAVPF is enabled, false otherwise. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig">
								<description>
									

									<para>
										<ref>LinphoneProxyConfig</ref>
										 object. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Indicates whether AVPF/SAVPF is being used for calls using this proxy config. 
								<description>
									<para>True if AVPF/SAVPF is enabled, false otherwise. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_enable_avpf">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig">
								<description>
									

									<para>
										<ref>LinphoneProxyConfig</ref>
										 object. 
									</para>
								</description>
								

							</argument>
							<argument completetype="bool_t" name="enable" type="bool_t">
								<description>
									

									<para>True to enable AVPF/SAVF, false to disable it. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Indicates whether AVPF/SAVPF must be used for calls using this proxy config. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="avpf_mode">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_get_avpf_mode">
						<return completetype="LinphoneAVPFMode" type="LinphoneAVPFMode">
							<description>
								<para>the enablement mode, which can be LinphoneAVPFDefault (use LinphoneCore's mode), LinphoneAVPFEnabled (avpf is enabled), or LinphoneAVPFDisabled (disabled). </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig">
								<description>
									

									<para>
										<ref>LinphoneProxyConfig</ref>
										 object. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get enablement status of RTCP feedback (also known as AVPF profile). 
								<description>
									<para>the enablement mode, which can be LinphoneAVPFDefault (use LinphoneCore's mode), LinphoneAVPFEnabled (avpf is enabled), or LinphoneAVPFDisabled (disabled). </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_set_avpf_mode">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig">
								<description>
									

									<para>
										<ref>LinphoneProxyConfig</ref>
										 object. 
									</para>
								</description>
								

							</argument>
							<argument completetype="LinphoneAVPFMode" name="mode" type="LinphoneAVPFMode">
								<description>
									

									<para>the enablement mode, which can be LinphoneAVPFDefault (use LinphoneCore's mode), LinphoneAVPFEnabled (avpf is enabled), or LinphoneAVPFDisabled (disabled). </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Enable the use of RTCP feedback (also known as AVPF profile). </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="avpf_rr_interval">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_get_avpf_rr_interval">
						<return completetype="uint8_t" type="uint8_t">
							<description>
								<para>The interval in seconds. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig">
								<description>
									

									<para>
										<ref>LinphoneProxyConfig</ref>
										 object. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the interval between regular RTCP reports when using AVPF/SAVPF. 
								<description>
									<para>The interval in seconds. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_set_avpf_rr_interval">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig">
								<description>
									

									<para>
										<ref>LinphoneProxyConfig</ref>
										 object. 
									</para>
								</description>
								

							</argument>
							<argument completetype="uint8_t" name="interval" type="uint8_t">
								<description>
									

									<para>The interval in seconds (between 0 and 5 seconds). </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the interval between regular RTCP reports when using AVPF/SAVPF. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="contact_parameters">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_get_contact_parameters">
						<return completetype="const char *" type="char">
							<description>
								<para>previously set contact parameters. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig"/>
						</arguments>
						<detaileddescription>
							

							<para>
								<description>
									<para>previously set contact parameters. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_set_contact_parameters">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig">
								<description>
									

									<para>
										<ref>LinphoneProxyConfig</ref>
										 object. 
									</para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="contact_params" type="char">
								<description>
									

									<para>a string contaning the additional parameters in text form, like &quot;myparam=something;myparam2=something_else&quot;</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Set optional contact parameters that will be added to the contact information sent in the registration. 
								<ulink url="mailto:joe@15.128.128.93">joe@15.128.128.93</ulink>
								:50421&gt;;apple-push-id=43143-DFE23F-2323-FA2232. 
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="contact_uri_parameters">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_get_contact_uri_parameters">
						<return completetype="const char *" type="char">
							<description>
								<para>previously set contact URI parameters. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig"/>
						</arguments>
						<detaileddescription>
							

							<para>
								<description>
									<para>previously set contact URI parameters. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_set_contact_uri_parameters">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig">
								<description>
									

									<para>
										<ref>LinphoneProxyConfig</ref>
										 object. 
									</para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="contact_uri_params" type="char">
								<description>
									

									<para>a string containing the additional parameters in text form, like &quot;myparam=something;myparam2=something_else&quot;</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Set optional contact parameters that will be added to the contact information sent in the registration, inside the URI. 
								<ulink url="mailto:joe@15.128.128.93">joe@15.128.128.93</ulink>
								:50421;apple-push-id=43143-DFE23F-2323-FA2232&gt;. 
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="core">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_get_core">
						<return completetype="LinphoneCore *" type="LinphoneCore">
							<description>
								<para>
									The 
									<ref>LinphoneCore</ref>
									 object to which is associated the 
									<ref>LinphoneProxyConfig</ref>
									. 
								</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig">
								<description>
									

									<para>
										<ref>LinphoneProxyConfig</ref>
										 object. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the 
								<ref>LinphoneCore</ref>
								 object to which is associated the 
								<ref>LinphoneProxyConfig</ref>
								. 
								<description>
									<para>
										The 
										<ref>LinphoneCore</ref>
										 object to which is associated the 
										<ref>LinphoneProxyConfig</ref>
										. 
									</para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="dial_escape_plus">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_get_dial_escape_plus">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>
									whether liblinphone should replace &quot;+&quot; by &quot;00&quot; in dialed numbers (passed to 
									<ref>linphone_core_invite</ref>
									 ). 
								</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig"/>
						</arguments>
						<detaileddescription>
							

							<para>
								<description>
									<para>
										whether liblinphone should replace &quot;+&quot; by &quot;00&quot; in dialed numbers (passed to 
										<ref>linphone_core_invite</ref>
										 ). 
									</para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_set_dial_escape_plus">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig"/>
							<argument completetype="bool_t" name="val" type="bool_t"/>
						</arguments>
						<detaileddescription>
							

							<para>
								Sets whether liblinphone should replace &quot;+&quot; by international calling prefix in dialed numbers (passed to 
								<ref>linphone_core_invite</ref>
								 ). 
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="dial_prefix">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_get_dial_prefix">
						<return completetype="const char *" type="char">
							<description>
								<para>dialing prefix. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig"/>
						</arguments>
						<detaileddescription>
							

							<para>
								<description>
									<para>dialing prefix. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_set_dial_prefix">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig"/>
							<argument completetype="const char *" name="prefix" type="char"/>
						</arguments>
						<detaileddescription>
							

							<para>
								Sets a dialing prefix to be automatically prepended when inviting a number with 
								<ref>linphone_core_invite()</ref>
								; This dialing prefix shall usually be the country code of the country where the user is living, without &quot;+&quot;. 
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="domain">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_get_domain">
						<return completetype="const char *" type="char">
							<description>
								<para>The domain name of the proxy config. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig">
								<description>
									

									<para>
										<ref>LinphoneProxyConfig</ref>
										 object. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the domain name of the given proxy config. 
								<description>
									<para>The domain name of the proxy config. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="error">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_get_error">
						<return completetype="LinphoneReason" type="LinphoneReason">
							<description>
								<para>The reason why registration failed for this proxy config. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig">
								<description>
									

									<para>
										<ref>LinphoneProxyConfig</ref>
										 object. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the reason why registration failed when the proxy config state is LinphoneRegistrationFailed. 
								<description>
									<para>The reason why registration failed for this proxy config. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="error_info">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_get_error_info">
						<return completetype="const LinphoneErrorInfo *" type="LinphoneErrorInfo">
							<description>
								<para>The details why registration failed for this proxy config. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig">
								<description>
									

									<para>
										<ref>LinphoneProxyConfig</ref>
										 object. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get detailed information why registration failed when the proxy config state is LinphoneRegistrationFailed. 
								<description>
									<para>The details why registration failed for this proxy config. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="expires">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_get_expires">
						<return completetype="int" type="int">
							<description>
								<para>the duration of registration. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig"/>
						</arguments>
						<detaileddescription>
							

							<para>
								<description>
									<para>the duration of registration. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_set_expires">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig"/>
							<argument completetype="int" name="expires" type="int"/>
						</arguments>
						<detaileddescription>
							

							<para>Sets the registration expiration time in seconds. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="file_transfer_server">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_get_file_transfer_server">
						<return completetype="const char *" type="char">
							<description>
								<para>
									URL of the file server like 
									<ulink url="https://file.linphone.org/upload.php">https://file.linphone.org/upload.php</ulink>
									 
								</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig">
								<description>
									

									<para>
										<ref>LinphoneProxyConfig</ref>
										 object. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the http file transfer server to be used for content type application/vnd.gsma.rcs-ft-http+xml 
								<description>
									<para>
										URL of the file server like 
										<ulink url="https://file.linphone.org/upload.php">https://file.linphone.org/upload.php</ulink>
										 
									</para>
								</description>
								

								<simplesect kind="warning">
									<para>That function isn't implemented yet. </para>
								</simplesect>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_set_file_transfer_server">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig">
								<description>
									

									<para>
										<ref>LinphoneProxyConfig</ref>
										 object. 
									</para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="server_url" type="char">
								<description>
									

									<para>
										URL of the file server like 
										<ulink url="https://file.linphone.org/upload.php">https://file.linphone.org/upload.php</ulink>
										 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Set the http file transfer server to be used for content type application/vnd.gsma.rcs-ft-http+xml 
								<simplesect kind="warning">
									<para>That function isn't implemented yet. </para>
								</simplesect>
								

							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="identity_address">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_get_identity_address">
						<return completetype="const LinphoneAddress *" type="LinphoneAddress">
							<description>
								<para>the SIP identity that belongs to this proxy configuration. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig"/>
						</arguments>
						<detaileddescription>
							

							<para>
								<description>
									<para>the SIP identity that belongs to this proxy configuration. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_set_identity_address">
						<return completetype="int" type="int"/>
						<arguments>
							<argument completetype="LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig"/>
							<argument completetype="const LinphoneAddress *" name="identity" type="LinphoneAddress"/>
						</arguments>
						<detaileddescription>
							

							<para>Sets the user identity as a SIP address.</para>
							<para>
								This identity is normally formed with display name, username and domain, such as: Alice &lt;sip:
								<ulink url="mailto:alice@example.net">alice@example.net</ulink>
								&gt; The REGISTER messages will have from and to set to this identity. 
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="nat_policy">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_get_nat_policy">
						<return completetype="LinphoneNatPolicy *" type="LinphoneNatPolicy">
							<description>
								<para>LinphoneNatPolicy object in use. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig">
								<description>
									

									<para>
										<ref>LinphoneProxyConfig</ref>
										 object 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get The policy that is used to pass through NATs/firewalls when using this proxy config. If it is set to NULL, the default NAT policy from the core will be used instead. 
								<description>
									<para>LinphoneNatPolicy object in use. </para>
								</description>
								

								<see>linphone_core_get_nat_policy() </see>
							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_set_nat_policy">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig">
								<description>
									

									<para>
										<ref>LinphoneProxyConfig</ref>
										 object 
									</para>
								</description>
								

							</argument>
							<argument completetype="LinphoneNatPolicy *" name="policy" type="LinphoneNatPolicy">
								<description>
									

									<para>LinphoneNatPolicy object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Set the policy to use to pass through NATs/firewalls when using this proxy config. If it is set to NULL, the default NAT policy from the core will be used instead. 
								<see>linphone_core_set_nat_policy() </see>
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="privacy">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_get_privacy">
						<return completetype="LinphonePrivacyMask" type="LinphonePrivacyMask">
							<description>
								<para>Privacy mode </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig">
								<description>
									

									<para>
										<ref>LinphoneProxyConfig</ref>
										 object. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get default privacy policy for all calls routed through this proxy. 
								<description>
									<para>Privacy mode </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_set_privacy">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig">
								<description>
									

									<para>
										<ref>LinphoneProxyConfig</ref>
										 object. 
									</para>
								</description>
								

							</argument>
							<argument completetype="LinphonePrivacyMask" name="privacy" type="LinphonePrivacyMask">
								<description>
									

									<para>LinphonePrivacy to configure privacy </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set default privacy policy for all calls routed through this proxy. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="publish_enabled">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_publish_enabled">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>TRUE if PUBLISH request is enabled for this proxy. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig"/>
						</arguments>
						<detaileddescription>
							

							<para>
								<description>
									<para>TRUE if PUBLISH request is enabled for this proxy. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_enable_publish">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig">
								<description>
									

									<para>
										<ref>LinphoneProxyConfig</ref>
										 object. 
									</para>
								</description>
								

							</argument>
							<argument completetype="bool_t" name="val" type="bool_t">
								<description>
									

									<para>if true, publish will be engaged </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Indicates either or not, PUBLISH must be issued for this 
								<ref>LinphoneProxyConfig</ref>
								 . 
								<linebreak/>
								
 In case this 
								<ref>LinphoneProxyConfig</ref>
								 has been added to 
								<ref>LinphoneCore</ref>
								, follows the 
								<ref>linphone_proxy_config_edit()</ref>
								 rule. 
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="publish_expires">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_get_publish_expires">
						<return completetype="int" type="int">
							<description>
								<para>expires in second </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig">
								<description>
									

									<para>
										<ref>LinphoneProxyConfig</ref>
										 object. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								get the publish expiration time in second. Default value is the registration expiration value. 
								<description>
									<para>expires in second </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_set_publish_expires">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig">
								<description>
									

									<para>
										<ref>LinphoneProxyConfig</ref>
										 object. 
									</para>
								</description>
								

							</argument>
							<argument completetype="int" name="expires" type="int">
								<description>
									

									<para>in second </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the publish expiration time in second. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="quality_reporting_collector">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_get_quality_reporting_collector">
						<return completetype="const char *" type="char">
							<description>
								<para>The SIP address of the collector end-point. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig">
								<description>
									

									<para>
										<ref>LinphoneProxyConfig</ref>
										 object. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the route of the collector end-point when using quality reporting. This SIP address should be used on server-side to process packets directly before discarding packets. Collector address should be a non existing account and will not receive any messages. If NULL, reports will be send to the proxy domain. 
								<description>
									<para>The SIP address of the collector end-point. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_set_quality_reporting_collector">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig">
								<description>
									

									<para>
										<ref>LinphoneProxyConfig</ref>
										 object. 
									</para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="collector" type="char">
								<description>
									

									<para>route of the collector end-point, if NULL PUBLISH will be sent to the proxy domain. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the route of the collector end-point when using quality reporting. This SIP address should be used on server-side to process packets directly before discarding packets. Collector address should be a non existing account and will not receive any messages. If NULL, reports will be send to the proxy domain. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="quality_reporting_enabled">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_quality_reporting_enabled">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>True if quality repotring is enabled, false otherwise. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig">
								<description>
									

									<para>
										<ref>LinphoneProxyConfig</ref>
										 object. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Indicates whether quality statistics during call should be stored and sent to a collector according to RFC 6035. 
								<description>
									<para>True if quality repotring is enabled, false otherwise. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_enable_quality_reporting">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig">
								<description>
									

									<para>
										<ref>LinphoneProxyConfig</ref>
										 object. 
									</para>
								</description>
								

							</argument>
							<argument completetype="bool_t" name="enable" type="bool_t">
								<description>
									

									<para>True to sotre quality statistics and sent them to the collector, false to disable it. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Indicates whether quality statistics during call should be stored and sent to a collector according to RFC 6035. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="quality_reporting_interval">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_get_quality_reporting_interval">
						<return completetype="int" type="int">
							<description>
								<para>The interval in seconds, 0 means interval reports are disabled. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig">
								<description>
									

									<para>
										<ref>LinphoneProxyConfig</ref>
										 object. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the interval between interval reports when using quality reporting. 
								<description>
									<para>The interval in seconds, 0 means interval reports are disabled. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_set_quality_reporting_interval">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig">
								<description>
									

									<para>
										<ref>LinphoneProxyConfig</ref>
										 object. 
									</para>
								</description>
								

							</argument>
							<argument completetype="uint8_t" name="interval" type="uint8_t">
								<description>
									

									<para>The interval in seconds, 0 means interval reports are disabled. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the interval between 2 interval reports sending when using quality reporting. If call exceed interval size, an interval report will be sent to the collector. On call termination, a session report will be sent for the remaining period. Value must be 0 (disabled) or positive. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="realm">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_get_realm">
						<return completetype="const char *" type="char">
							<description>
								<para>The realm of the proxy config. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig">
								<description>
									

									<para>
										<ref>LinphoneProxyConfig</ref>
										 object. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the realm of the given proxy config. 
								<description>
									<para>The realm of the proxy config. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_set_realm">
						<return completetype="void" type="void">
							<description>
								<para>The realm of the proxy config. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig">
								<description>
									

									<para>
										<ref>LinphoneProxyConfig</ref>
										 object. 
									</para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="realm" type="char">
								<description>
									

									<para>New realm value. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Set the realm of the given proxy config. 
								<description>
									<para>The realm of the proxy config. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="ref_key">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_get_ref_key">
						<return completetype="const char *" type="char">
							<description>
								<para>The reference key string that has been associated to the proxy config, or NULL if none has been associated. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig">
								<description>
									

									<para>
										<ref>LinphoneProxyConfig</ref>
										 object. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Get the persistent reference key associated to the proxy config.</para>
							<para>The reference key can be for example an id to an external database. It is stored in the config file, thus can survive to process exits/restarts.</para>
							<para>
								<description>
									<para>The reference key string that has been associated to the proxy config, or NULL if none has been associated. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_set_ref_key">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig">
								<description>
									

									<para>
										<ref>LinphoneProxyConfig</ref>
										 object. 
									</para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="refkey" type="char">
								<description>
									

									<para>The reference key string to associate to the proxy config. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Associate a persistent reference key to the proxy config.</para>
							<para>The reference key can be for example an id to an external database. It is stored in the config file, thus can survive to process exits/restarts.</para>
							<para/>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="register_enabled">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_register_enabled">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>TRUE if registration to the proxy is enabled. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig"/>
						</arguments>
						<detaileddescription>
							

							<para>
								<description>
									<para>TRUE if registration to the proxy is enabled. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_enable_register">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig">
								<description>
									

									<para>
										<ref>LinphoneProxyConfig</ref>
										 object. 
									</para>
								</description>
								

							</argument>
							<argument completetype="bool_t" name="val" type="bool_t">
								<description>
									

									<para>if true, registration will be engaged </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Indicates either or not, REGISTRATION must be issued for this 
								<ref>LinphoneProxyConfig</ref>
								 . 
								<linebreak/>
								
 In case this 
								<ref>LinphoneProxyConfig</ref>
								 has been added to 
								<ref>LinphoneCore</ref>
								, follows the 
								<ref>linphone_proxy_config_edit()</ref>
								 rule. 
							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="registered">
					<getter deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_is_registered">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>a boolean indicating that the user is sucessfully registered on the proxy. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig"/>
						</arguments>
						<detaileddescription>
							

							<para>
								<description>
									<para>a boolean indicating that the user is sucessfully registered on the proxy. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="route">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_get_route">
						<return completetype="const char *" type="char">
							<description>
								<para>the route set for this proxy configuration. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig"/>
						</arguments>
						<detaileddescription>
							

							<para>
								<description>
									<para>the route set for this proxy configuration. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_set_route">
						<return completetype="int" type="int">
							<description>
								<para>-1 if route is invalid, 0 otherwise. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig"/>
							<argument completetype="const char *" name="route" type="char"/>
						</arguments>
						<detaileddescription>
							

							<para>
								Sets a SIP route. When a route is set, all outgoing calls will go to the route's destination if this proxy is the default one (see 
								<ref>linphone_core_set_default_proxy()</ref>
								 ). 
								<description>
									<para>-1 if route is invalid, 0 otherwise. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="server_addr">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_get_server_addr">
						<return completetype="const char *" type="char">
							<description>
								<para>the proxy's SIP address. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig"/>
						</arguments>
						<detaileddescription>
							

							<para>
								<description>
									<para>the proxy's SIP address. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_set_server_addr">
						<return completetype="int" type="int"/>
						<arguments>
							<argument completetype="LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig"/>
							<argument completetype="const char *" name="server_addr" type="char"/>
						</arguments>
						<detaileddescription>
							

							<para>Sets the proxy address</para>
							<para>
								Examples of valid sip proxy address are:
								<itemizedlist>
									

									<listitem>
										<para>IP address: sip:87.98.157.38</para>
									</listitem>
									<listitem>
										<para>IP address with port: sip:87.98.157.38:5062</para>
									</listitem>
									<listitem>
										<para>hostnames : sip:sip.example.net </para>
									</listitem>
								</itemizedlist>
								

							</para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="state">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_get_state">
						<return completetype="LinphoneRegistrationState" type="LinphoneRegistrationState">
							<description>
								<para>The registration state of the proxy config. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig">
								<description>
									

									<para>
										<ref>LinphoneProxyConfig</ref>
										 object. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the registration state of the given proxy config. 
								<description>
									<para>The registration state of the proxy config. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="transport">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_get_transport">
						<return completetype="const char *" type="char">
							<description>
								<para>The transport as a string (I.E udp, tcp, tls, dtls) </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig">
								<description>
									

									<para>
										<ref>LinphoneProxyConfig</ref>
										 object. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the transport from either service route, route or addr. 
								<description>
									<para>The transport as a string (I.E udp, tcp, tls, dtls) </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="user_data">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_get_user_data">
						<return completetype="void *" type="void">
							<description>
								<para>The user pointer associated with the proxy config. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig">
								<description>
									

									<para>
										<ref>LinphoneProxyConfig</ref>
										 object. 
									</para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Retrieve the user pointer associated with the proxy config. 
								<description>
									<para>The user pointer associated with the proxy config. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/proxy_config.h" name="linphone_proxy_config_set_user_data">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneProxyConfig *" name="cfg" type="LinphoneProxyConfig">
								<description>
									

									<para>
										<ref>LinphoneProxyConfig</ref>
										 object. 
									</para>
								</description>
								

							</argument>
							<argument completetype="void *" name="ud" type="void">
								<description>
									

									<para>The user pointer to associate with the proxy config. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Assign a user pointer to the proxy config. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
			</properties>
			<detaileddescription>
				

				<para>
					The LinphoneProxyConfig object represents a proxy configuration to be used by the LinphoneCore object. Its fields must not be used directly in favour of the accessors methods. Once created and filled properly the LinphoneProxyConfig can be given to LinphoneCore with 
					<ref>linphone_core_add_proxy_config()</ref>
					. This will automatically triggers the registration, if enabled.
				</para>
				<para>
					The proxy configuration are persistent to restarts because they are saved in the configuration file. As a consequence, after 
					<ref>linphone_core_new()</ref>
					 there might already be a list of configured proxy that can be examined with 
					<ref>linphone_core_get_proxy_config_list()</ref>
					.
				</para>
				<para>
					The default proxy (see 
					<ref>linphone_core_set_default_proxy()</ref>
					 ) is the one of the list that is used by default for calls. 
				</para>
				        
			</detaileddescription>
			
        
		</class>
		<class cfunctionprefix="linphone_tunnel_" deprecated="false" destroyable="false" name="LinphoneTunnel" refcountable="false">
			<classmethods>
				<classmethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/tunnel.h" name="linphone_tunnel_mode_from_string">
					<return completetype="LinphoneTunnelMode" type="LinphoneTunnelMode">
						<description>
							<para>An LinphoneTunnelMode enum. If the passed string is NULL or does not match with any mode, the LinphoneTunnelModeDisable is returned. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const char *" name="string" type="char">
							<description>
								

								<para>String to convert </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Convert a string into LinphoneTunnelMode enum 
							<description>
								<para>An LinphoneTunnelMode enum. If the passed string is NULL or does not match with any mode, the LinphoneTunnelModeDisable is returned. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</classmethod>
				<classmethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/tunnel.h" name="linphone_tunnel_mode_to_string">
					<return completetype="const char *" type="char">
						<description>
							<para>&quot;disable&quot;, &quot;enable&quot; or &quot;auto&quot; </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneTunnelMode" name="mode" type="LinphoneTunnelMode">
							<description>
								

								<para>Enum to convert </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Convert a tunnel mode enum into string 
							<description>
								<para>&quot;disable&quot;, &quot;enable&quot; or &quot;auto&quot; </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</classmethod>
			</classmethods>
			<instancemethods>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/tunnel.h" name="linphone_tunnel_add_server">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneTunnel *" name="tunnel" type="LinphoneTunnel">
							<description>
								

								<para>LinphoneTunnel object </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneTunnelConfig *" name="tunnel_config" type="LinphoneTunnelConfig">
							<description>
								

								<para>LinphoneTunnelConfig object </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Add a tunnel server configuration. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/tunnel.h" name="linphone_tunnel_auto_detect">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneTunnel *" name="tunnel" type="LinphoneTunnel">
							<description>
								

								<para>
									object In auto detect mode, the tunnel manager try to establish a real time rtp communication with the tunnel server on specified port. 
									<linebreak/>
									
In case of success, the tunnel is automatically turned off. Otherwise, if no udp communication is feasible, tunnel mode is turned on. 
									<linebreak/>
									
 Call this method each time to run the auto detection algorithm 
								</para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Start tunnel need detection. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/tunnel.h" name="linphone_tunnel_clean_servers">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneTunnel *" name="tunnel" type="LinphoneTunnel">
							<description>
								

								<para>LinphoneTunnel object </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Remove all tunnel server addresses previously entered with 
							<ref>linphone_tunnel_add_server()</ref>
							 
						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/tunnel.h" name="linphone_tunnel_connected">
					<return completetype="bool_t" type="bool_t">
						<description>
							<para>A boolean value telling if the tunnel is connected </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const LinphoneTunnel *" name="tunnel" type="LinphoneTunnel">
							<description>
								

								<para>LinphoneTunnel object </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Check whether the tunnel is connected 
							<description>
								<para>A boolean value telling if the tunnel is connected </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/tunnel.h" name="linphone_tunnel_enable">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneTunnel *" name="tunnel" type="LinphoneTunnel">
							<description>
								

								<para>object </para>
							</description>
							

						</argument>
						<argument completetype="bool_t" name="enabled" type="bool_t">
							<description>
								

								<para>If true enter in tunneled mode, if false exits from tunneled mode. The TunnelManager takes care of refreshing SIP registration when switching on or off the tunneled mode. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Sets whether tunneling of SIP and RTP is required. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/tunnel.h" name="linphone_tunnel_enabled">
					<return completetype="bool_t" type="bool_t">
						<description>
							<para>Returns a boolean indicating whether tunneled operation is enabled. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const LinphoneTunnel *" name="tunnel" type="LinphoneTunnel">
							<description>
								

								<para>Tunnel object </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Check whether tunnel is enabled 
							<description>
								<para>Returns a boolean indicating whether tunneled operation is enabled. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/tunnel.h" name="linphone_tunnel_get_http_proxy">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneTunnel *" name="tunnel" type="LinphoneTunnel">
							<description>
								

								<para>LinphoneTunnel object </para>
							</description>
							

						</argument>
						<argument completetype="const char * *" name="host" type="char">
							<description>
								

								<para>http proxy host </para>
							</description>
							

						</argument>
						<argument completetype="int *" name="port" type="int">
							<description>
								

								<para>http proxy port </para>
							</description>
							

						</argument>
						<argument completetype="const char * *" name="username" type="char">
							<description>
								

								<para>Optional http proxy username if the proxy request authentication. Currently only basic authentication is supported. Use NULL if not needed. </para>
							</description>
							

						</argument>
						<argument completetype="const char * *" name="passwd" type="char">
							<description>
								

								<para>Optional http proxy password. Use NULL if not needed. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Retrieve optional http proxy configuration previously set with 
							<ref>linphone_tunnel_set_http_proxy()</ref>
							. 
						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/tunnel.h" name="linphone_tunnel_reconnect">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneTunnel *" name="tunnel" type="LinphoneTunnel">
							<description>
								

								<para>LinphoneTunnel object </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Force reconnection to the tunnel server. This method is useful when the device switches from wifi to Edge/3G or vice versa. In most cases the tunnel client socket won't be notified promptly that its connection is now zombie, so it is recommended to call this method that will cause the lost connection to be closed and new connection to be issued. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/tunnel.h" name="linphone_tunnel_remove_server">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneTunnel *" name="tunnel" type="LinphoneTunnel">
							<description>
								

								<para>LinphoneTunnel object </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneTunnelConfig *" name="tunnel_config" type="LinphoneTunnelConfig">
							<description>
								

								<para>LinphoneTunnelConfig object </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Remove a tunnel server configuration. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/tunnel.h" name="linphone_tunnel_set_http_proxy">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneTunnel *" name="tunnel" type="LinphoneTunnel">
							<description>
								

								<para>LinphoneTunnel object </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="host" type="char">
							<description>
								

								<para>http proxy host </para>
							</description>
							

						</argument>
						<argument completetype="int" name="port" type="int">
							<description>
								

								<para>http proxy port </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="username" type="char">
							<description>
								

								<para>Optional http proxy username if the proxy request authentication. Currently only basic authentication is supported. Use NULL if not needed. </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="passwd" type="char">
							<description>
								

								<para>Optional http proxy password. Use NULL if not needed. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Set an optional http proxy to go through when connecting to tunnel server. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/tunnel.h" name="linphone_tunnel_set_http_proxy_auth_info">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneTunnel *" name="tunnel" type="LinphoneTunnel">
							<description>
								

								<para>LinphoneTunnel object </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="username" type="char">
							<description>
								

								<para>User name </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="passwd" type="char">
							<description>
								

								<para>Password </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Set authentication info for the http proxy </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
			</instancemethods>
			<properties>
				<property name="activated">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/tunnel.h" name="linphone_tunnel_get_activated">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>TRUE if tunnel is in use, FALSE otherwise. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneTunnel *" name="tunnel" type="LinphoneTunnel">
								<description>
									

									<para>the tunnel </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Returns whether the tunnel is activated. If mode is set to auto, this gives indication whether the automatic detection determined that tunnel was necessary or not. 
								<description>
									<para>TRUE if tunnel is in use, FALSE otherwise. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="auto_detect_enabled">
					<getter deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/tunnel.h" name="linphone_tunnel_auto_detect_enabled">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>TRUE if auto detection is enabled, FALSE otherwise. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneTunnel *" name="tunnel" type="LinphoneTunnel">
								<description>
									

									<para>LinphoneTunnel object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Tell whether tunnel auto detection is enabled. 
								<description>
									<para>TRUE if auto detection is enabled, FALSE otherwise. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="mode">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/tunnel.h" name="linphone_tunnel_get_mode">
						<return completetype="LinphoneTunnelMode" type="LinphoneTunnelMode">
							<description>
								<para>The current LinphoneTunnelMode </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneTunnel *" name="tunnel" type="LinphoneTunnel">
								<description>
									

									<para>LinphoneTunnel object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the tunnel mode 
								<description>
									<para>The current LinphoneTunnelMode </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/tunnel.h" name="linphone_tunnel_set_mode">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneTunnel *" name="tunnel" type="LinphoneTunnel">
								<description>
									

									<para>LinphoneTunnel object </para>
								</description>
								

							</argument>
							<argument completetype="LinphoneTunnelMode" name="mode" type="LinphoneTunnelMode">
								<description>
									

									<para>The desired LinphoneTunnelMode </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the tunnel mode. The tunnel mode can be 'enable', 'disable' or 'auto' If the mode is set to 'auto', the tunnel manager will try to established an RTP session with the tunnel server on the UdpMirrorPort. If the connection fail, the tunnel is automatically activated whereas the tunnel is automatically disabled if the connection succeed. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="servers">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/tunnel.h" name="linphone_tunnel_get_servers">
						<return completetype="const bctbx_list_t *" containedtype="LinphoneTunnelConfig" type="bctbx_list_t">
							<description>
								<para>
									A list of 
									<ref>LinphoneTunnelConfig</ref>
									 objects. 
									<bctbxlist>LinphoneTunnelConfig</bctbxlist>
									  
								</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneTunnel *" name="tunnel" type="LinphoneTunnel">
								<description>
									

									<para>LinphoneTunnel object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get added servers 
								<description>
									<para>
										A list of 
										<ref>LinphoneTunnelConfig</ref>
										 objects. 
										<bctbxlist>LinphoneTunnelConfig</bctbxlist>
										  
									</para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="sip_enabled">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/tunnel.h" name="linphone_tunnel_sip_enabled">
						<return completetype="bool_t" type="bool_t">
							<description>
								<para>A boolean value telling whether SIP packets shall pass through the tunnel </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneTunnel *" name="tunnel" type="LinphoneTunnel">
								<description>
									

									<para>LinphoneTunnel object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Check whether tunnel is set to transport SIP packets 
								<description>
									<para>A boolean value telling whether SIP packets shall pass through the tunnel </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/tunnel.h" name="linphone_tunnel_enable_sip">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneTunnel *" name="tunnel" type="LinphoneTunnel">
								<description>
									

									<para>LinphoneTunnel object </para>
								</description>
								

							</argument>
							<argument completetype="bool_t" name="enable" type="bool_t">
								<description>
									

									<para>If true, SIP packets shall pass through the tunnel </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set whether SIP packets must be directly sent to a UA or pass through the tunnel </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
			</properties>
			<detaileddescription>
				

				<para>Linphone tunnel object. </para>
				        
			</detaileddescription>
			
        
		</class>
		<class cfunctionprefix="linphone_tunnel_config_" deprecated="false" destroyable="true" name="LinphoneTunnelConfig" refcountable="true">
			<classmethods>
				<classmethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/tunnel.h" name="linphone_tunnel_config_new">
					<return completetype="LinphoneTunnelConfig *" type="LinphoneTunnelConfig"/>
					<arguments/>
					<detaileddescription>
						

						<para>Create a new tunnel configuration </para>
						        
					</detaileddescription>
					
        
				</classmethod>
			</classmethods>
			<instancemethods>
				<instancemethod deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/tunnel.h" name="linphone_tunnel_config_destroy">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneTunnelConfig *" name="tunnel" type="LinphoneTunnelConfig">
							<description>
								

								<para>LinphoneTunnelConfig object </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Destroy a tunnel configuration </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/tunnel.h" name="linphone_tunnel_config_ref">
					<return completetype="LinphoneTunnelConfig *" type="LinphoneTunnelConfig">
						<description>
							<para>the same cfg object. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneTunnelConfig *" name="cfg" type="LinphoneTunnelConfig">
							<description>
								

								<para>the LinphoneTunnelConfig object. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Increment the refcount of LinphoneTunnelConfig object. 
							<description>
								<para>the same cfg object. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/tunnel.h" name="linphone_tunnel_config_unref">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneTunnelConfig *" name="cfg" type="LinphoneTunnelConfig">
							<description>
								

								<para>the LinphoneTunnelConfig object. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Decrement the refcount of LinphoneTunnelConfig object. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
			</instancemethods>
			<properties>
				<property name="delay">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/tunnel.h" name="linphone_tunnel_config_get_delay">
						<return completetype="int" type="int">
							<description>
								<para>The UDP packet round trip delay in ms. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneTunnelConfig *" name="tunnel" type="LinphoneTunnelConfig">
								<description>
									

									<para>LinphoneTunnelConfig object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the UDP packet round trip delay in ms for a tunnel configuration. 
								<description>
									<para>The UDP packet round trip delay in ms. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/tunnel.h" name="linphone_tunnel_config_set_delay">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneTunnelConfig *" name="tunnel" type="LinphoneTunnelConfig">
								<description>
									

									<para>LinphoneTunnelConfig object </para>
								</description>
								

							</argument>
							<argument completetype="int" name="delay" type="int">
								<description>
									

									<para>The UDP packet round trip delay in ms considered as acceptable (recommended value is 1000 ms). </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the UDP packet round trip delay in ms for a tunnel configuration. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="host">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/tunnel.h" name="linphone_tunnel_config_get_host">
						<return completetype="const char *" type="char">
							<description>
								<para>The tunnel server IP address or hostname </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneTunnelConfig *" name="tunnel" type="LinphoneTunnelConfig">
								<description>
									

									<para>LinphoneTunnelConfig object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the IP address or hostname of the tunnel server. 
								<description>
									<para>The tunnel server IP address or hostname </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/tunnel.h" name="linphone_tunnel_config_set_host">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneTunnelConfig *" name="tunnel" type="LinphoneTunnelConfig">
								<description>
									

									<para>LinphoneTunnelConfig object </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="host" type="char">
								<description>
									

									<para>The tunnel server IP address or hostname </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the IP address or hostname of the tunnel server. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="port">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/tunnel.h" name="linphone_tunnel_config_get_port">
						<return completetype="int" type="int">
							<description>
								<para>The TLS port of the tunnel server </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneTunnelConfig *" name="tunnel" type="LinphoneTunnelConfig">
								<description>
									

									<para>LinphoneTunnelConfig object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the TLS port of the tunnel server. 
								<description>
									<para>The TLS port of the tunnel server </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/tunnel.h" name="linphone_tunnel_config_set_port">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneTunnelConfig *" name="tunnel" type="LinphoneTunnelConfig">
								<description>
									

									<para>LinphoneTunnelConfig object </para>
								</description>
								

							</argument>
							<argument completetype="int" name="port" type="int">
								<description>
									

									<para>The tunnel server TLS port, recommended value is 443 </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set tls port of server. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="remote_udp_mirror_port">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/tunnel.h" name="linphone_tunnel_config_get_remote_udp_mirror_port">
						<return completetype="int" type="int">
							<description>
								<para>The remote port on the tunnel server side used to test UDP reachability </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneTunnelConfig *" name="tunnel" type="LinphoneTunnelConfig">
								<description>
									

									<para>LinphoneTunnelConfig object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the remote port on the tunnel server side used to test UDP reachability. This is used when the mode is set auto, to detect whether the tunnel has to be enabled or not. 
								<description>
									<para>The remote port on the tunnel server side used to test UDP reachability </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/tunnel.h" name="linphone_tunnel_config_set_remote_udp_mirror_port">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneTunnelConfig *" name="tunnel" type="LinphoneTunnelConfig">
								<description>
									

									<para>LinphoneTunnelConfig object </para>
								</description>
								

							</argument>
							<argument completetype="int" name="remote_udp_mirror_port" type="int">
								<description>
									

									<para>The remote port on the tunnel server side used to test UDP reachability, set to -1 to disable the feature </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the remote port on the tunnel server side used to test UDP reachability. This is used when the mode is set auto, to detect whether the tunnel has to be enabled or not. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="user_data">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/tunnel.h" name="linphone_tunnel_config_get_user_data">
						<return completetype="void *" type="void">
							<description>
								<para>the user data </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneTunnelConfig *" name="cfg" type="LinphoneTunnelConfig">
								<description>
									

									<para>the tunnel config </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Retrieve user data from the tunnel config 
								<description>
									<para>the user data </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/tunnel.h" name="linphone_tunnel_config_set_user_data">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneTunnelConfig *" name="cfg" type="LinphoneTunnelConfig">
								<description>
									

									<para>the tunnel config </para>
								</description>
								

							</argument>
							<argument completetype="void *" name="ud" type="void">
								<description>
									

									<para>the user data </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Store a user data in the tunnel config object </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
			</properties>
			<detaileddescription>
				

				<para>
					Linphone tunnel aims is to bypass IP traffic blocking due to aggressive firewalls which typically only authorize TCP traffic with destination port 443. 
					<linebreak/>
					
 Its principle is tunneling all SIP and/or RTP traffic through a single secure https connection up to a detunnelizer server. 
					<linebreak/>
					
 This set of methods enhance LinphoneCore functionalities in order to provide an easy to use API to 
					<itemizedlist>
						

						<listitem>
							<para>
								provision tunnel servers IP addresses and ports. This functionality is an option not implemented under GPL. Availability can be check at runtime using function 
								<ref>linphone_core_tunnel_available</ref>
								 
							</para>
						</listitem>
						

						<listitem>
							<para>start/stop the tunneling service </para>
						</listitem>
						

						<listitem>
							<para>perform auto-detection whether tunneling is required, based on a test of sending/receiving a flow of UDP packets.</para>
						</listitem>
						

					</itemizedlist>
					
It takes in charge automatically the SIP registration procedure when connecting or disconnecting to a tunnel server. No other action on LinphoneCore is required to enable full operation in tunnel mode.
				</para>
				<para>
					<linebreak/>
					
 Provision is done using object 
					<ref>LinphoneTunnelConfig</ref>
					 created by function 
					<ref>linphone_tunnel_config_new()</ref>
					. Functions 
					<ref>linphone_tunnel_config_set_host</ref>
					 and 
					<ref>linphone_tunnel_config_set_port</ref>
					 allow to point to tunnel server IP/port. Once set, use function 
					<ref>linphone_tunnel_add_server</ref>
					 to provision a tunnel server. 
					<linebreak/>
					
 Finally tunnel mode configuration is achieved by function 
					<ref>linphone_tunnel_set_mode</ref>
					. 
					<linebreak/>
					
 Tunnel connection status can be checked using function 
					<ref>linphone_tunnel_connected</ref>
					.
				</para>
				<para>Bellow pseudo code that can be use to configure, enable, check state and disable tunnel functionality:</para>
				<para>
					<programlisting>
						<codeline>
							<highlight class="normal">
								LinphoneTunnel
								<sp/>
								*tunnel
								<sp/>
								=
								<sp/>
								linphone_core_get_tunnel(linphone_core);
							</highlight>
						</codeline>
						

						<codeline>
							<highlight class="normal">
								LinphoneTunnelConfig
								<sp/>
								*config=linphone_tunnel_config_new();
								<sp/>
								//instantiate
								<sp/>
								tunnel
								<sp/>
								configuration
							</highlight>
						</codeline>
						

						<codeline>
							<highlight class="normal">
								linphone_tunnel_config_set_host(config,
								<sp/>
								&quot;tunnel.linphone.org&quot;);
								<sp/>
								//set
								<sp/>
								tunnel
								<sp/>
								server
								<sp/>
								host
								<sp/>
								address
							</highlight>
						</codeline>
						

						<codeline>
							<highlight class="normal">
								linphone_tunnel_config_set_port(config,
								<sp/>
								443);
								<sp/>
								//set
								<sp/>
								tunnel
								<sp/>
								server
								<sp/>
								port
							</highlight>
						</codeline>
						

						<codeline>
							<highlight class="normal">
								linphone_tunnel_add_server(tunnel,
								<sp/>
								config);
								<sp/>
								//provision
								<sp/>
								tunnel
								<sp/>
								config
							</highlight>
						</codeline>
						

						<codeline>
							<highlight class="normal">
								linphone_tunnel_set_mode(tunnel,
								<sp/>
								LinphoneTunnelModeEnable);
								<sp/>
								//activate
								<sp/>
								the
								<sp/>
								tunnel
								<sp/>
								unconditional
							</highlight>
						</codeline>
						

						<codeline/>
						

						<codeline>
							<highlight class="normal">
								while
								<sp/>
								(!linphone_tunnel_connected(tunnel))
								<sp/>
								{
								<sp/>
								//wait
								<sp/>
								for
								<sp/>
								tunnel
								<sp/>
								to
								<sp/>
								be
								<sp/>
								ready
							</highlight>
						</codeline>
						

						<codeline>
							<highlight class="normal">
								<sp/>
								<sp/>
								<sp/>
								<sp/>
								<sp/>
								<sp/>
								<sp/>
								<sp/>
								linphone_core_iterate(linphone_core);
								<sp/>
								//schedule
								<sp/>
								core
								<sp/>
								main
								<sp/>
								loop
							</highlight>
						</codeline>
						

						<codeline>
							<highlight class="normal">
								<sp/>
								<sp/>
								<sp/>
								<sp/>
								<sp/>
								<sp/>
								<sp/>
								<sp/>
								ms_sleep(100);
								<sp/>
								//wait
								<sp/>
								100ms
							</highlight>
						</codeline>
						

						<codeline>
							<highlight class="normal">}</highlight>
						</codeline>
						

						<codeline/>
						

						<codeline>
							<highlight class="normal">
								LinphoneCall
								<sp/>
								*call
								<sp/>
								=
								<sp/>
								linphone_core_invite(linphone_core,&quot;sip:foo@example.org&quot;);
								<sp/>
								//place
								<sp/>
								an
								<sp/>
								outgoing
								<sp/>
								call
							</highlight>
						</codeline>
						

						<codeline>
							<highlight class="normal">
								linphone_call_ref(call);
								<sp/>
								//acquire
								<sp/>
								a
								<sp/>
								reference
								<sp/>
								on
								<sp/>
								the
								<sp/>
								call
								<sp/>
								to
								<sp/>
								avoid
								<sp/>
								deletion
								<sp/>
								after
								<sp/>
								completion
							</highlight>
						</codeline>
						

						<codeline>
							<highlight class="normal">//...</highlight>
						</codeline>
						

						<codeline>
							<highlight class="normal">linphone_core_terminate_call(linphone_core,call);</highlight>
						</codeline>
						

						<codeline/>
						

						<codeline>
							<highlight class="normal">
								while
								<sp/>
								(linphone_call_get_state(call)
								<sp/>
								!=
								<sp/>
								LinphoneCallReleased)
								<sp/>
								{
								<sp/>
								//wait
								<sp/>
								for
								<sp/>
								call
								<sp/>
								to
								<sp/>
								be
								<sp/>
								in
								<sp/>
								release
								<sp/>
								state
							</highlight>
						</codeline>
						

						<codeline>
							<highlight class="normal">
								<sp/>
								<sp/>
								<sp/>
								<sp/>
								<sp/>
								<sp/>
								<sp/>
								<sp/>
								linphone_core_iterate(linphone_core);
								<sp/>
								//schedule
								<sp/>
								core
								<sp/>
								main
								<sp/>
								loop
							</highlight>
						</codeline>
						

						<codeline>
							<highlight class="normal">
								<sp/>
								<sp/>
								<sp/>
								<sp/>
								<sp/>
								<sp/>
								<sp/>
								<sp/>
								ms_sleep(100);
								<sp/>
								//wait
								<sp/>
								100ms
							</highlight>
						</codeline>
						

						<codeline>
							<highlight class="normal">}</highlight>
						</codeline>
						

						<codeline/>
						

						<codeline>
							<highlight class="normal">
								linphone_tunnel_set_mode(tunnel,
								<sp/>
								LinphoneTunnelModeDisable);
								<sp/>
								//deactivate
								<sp/>
								tunnel
							</highlight>
						</codeline>
						

						<codeline>
							<highlight class="normal">
								linphone_call_unref(call);
								<sp/>
								//release
								<sp/>
								reference
								<sp/>
								on
								<sp/>
								the
								<sp/>
								call
							</highlight>
						</codeline>
						

					</programlisting>
					 
				</para>
				        
			</detaileddescription>
			
        
		</class>
		<class cfunctionprefix="linphone_vcard_" deprecated="false" destroyable="false" name="LinphoneVcard" refcountable="true">
			<classmethods>
				<classmethod deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/vcard.h" name="linphone_vcard_new">
					<return completetype="LinphoneVcard *" type="LinphoneVcard">
						<description>
							<para>a new LinphoneVcard object </para>
						</description>
						

					</return>
					<arguments/>
					<detaileddescription>
						

						<para>
							Creates a LinphoneVcard object that has a pointer to an empty vCard 
							<description>
								<para>a new LinphoneVcard object </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</classmethod>
			</classmethods>
			<instancemethods>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/vcard.h" name="linphone_vcard_add_phone_number">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneVcard *" name="vCard" type="LinphoneVcard">
							<description>
								

								<para>the LinphoneVcard </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="phone" type="char">
							<description>
								

								<para>the phone number to add </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Adds a phone number in the vCard, using the TEL property </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/vcard.h" name="linphone_vcard_add_sip_address">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneVcard *" name="vCard" type="LinphoneVcard">
							<description>
								

								<para>the LinphoneVcard </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="sip_address" type="char">
							<description>
								

								<para>the SIP address to add </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Adds a SIP address in the vCard, using the IMPP property </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/vcard.h" name="linphone_vcard_as_vcard4_string">
					<return completetype="const char *" type="char">
						<description>
							<para>a const char * that represents the vCard </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneVcard *" name="vCard" type="LinphoneVcard">
							<description>
								

								<para>the LinphoneVcard </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Returns the vCard4 representation of the LinphoneVcard. 
							<description>
								<para>a const char * that represents the vCard </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/vcard.h" name="linphone_vcard_edit_main_sip_address">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneVcard *" name="vCard" type="LinphoneVcard">
							<description>
								

								<para>the LinphoneVcard </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="sip_address" type="char">
							<description>
								

								<para>the new SIP address </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Edits the preferred SIP address in the vCard (or the first one), using the IMPP property </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="true" location="/home/francois/projects/linphone/linphone/include/linphone/vcard.h" name="linphone_vcard_free">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneVcard *" name="vCard" type="LinphoneVcard">
							<description>
								

								<para>the LinphoneVcard to destroy </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Deletes a LinphoneVcard object properly </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/vcard.h" name="linphone_vcard_generate_unique_id">
					<return completetype="bool_t" type="bool_t">
						<description>
							<para>TRUE if operation is successful, otherwise FALSE (for example if it already has an unique ID) </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneVcard *" name="vCard" type="LinphoneVcard">
							<description>
								

								<para>the LinphoneVcard </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Generates a random unique id for the vCard. If is required to be able to synchronize the vCard with a CardDAV server 
							<description>
								<para>TRUE if operation is successful, otherwise FALSE (for example if it already has an unique ID) </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/vcard.h" name="linphone_vcard_ref">
					<return completetype="LinphoneVcard *" type="LinphoneVcard"/>
					<arguments>
						<argument completetype="LinphoneVcard *" name="vCard" type="LinphoneVcard"/>
					</arguments>
					<detaileddescription>
						

						<para>
							Take a ref on a 
							<ref>LinphoneVcard</ref>
							. 
						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/vcard.h" name="linphone_vcard_remove_phone_number">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneVcard *" name="vCard" type="LinphoneVcard">
							<description>
								

								<para>the LinphoneVcard </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="phone" type="char">
							<description>
								

								<para>the phone number to remove </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Removes a phone number in the vCard (if it exists), using the TEL property </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/vcard.h" name="linphone_vcard_remove_sip_address">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneVcard *" name="vCard" type="LinphoneVcard">
							<description>
								

								<para>the LinphoneVcard </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="sip_address" type="char">
							<description>
								

								<para>the SIP address to remove </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Removes a SIP address in the vCard (if it exists), using the IMPP property </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/vcard.h" name="linphone_vcard_unref">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneVcard *" name="vCard" type="LinphoneVcard"/>
					</arguments>
					<detaileddescription>
						

						<para>
							Release a 
							<ref>LinphoneVcard</ref>
							. 
						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
			</instancemethods>
			<properties>
				<property name="etag">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/vcard.h" name="linphone_vcard_get_etag">
						<return completetype="const char *" type="char">
							<description>
								<para>the eTag of the vCard in the CardDAV server, otherwise NULL </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneVcard *" name="vCard" type="LinphoneVcard">
								<description>
									

									<para>the LinphoneVcard </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the eTag of the vCard 
								<description>
									<para>the eTag of the vCard in the CardDAV server, otherwise NULL </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/vcard.h" name="linphone_vcard_set_etag">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneVcard *" name="vCard" type="LinphoneVcard">
								<description>
									

									<para>the LinphoneVcard </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="etag" type="char">
								<description>
									

									<para>the eTAG </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Sets the eTAG of the vCard </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="family_name">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/vcard.h" name="linphone_vcard_get_family_name">
						<return completetype="const char *" type="char">
							<description>
								<para>the family name of the vCard, or NULL </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneVcard *" name="vCard" type="LinphoneVcard">
								<description>
									

									<para>the LinphoneVcard </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Returns the family name in the N attribute of the vCard, or NULL if it isn't set yet. 
								<description>
									<para>the family name of the vCard, or NULL </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/vcard.h" name="linphone_vcard_set_family_name">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneVcard *" name="vCard" type="LinphoneVcard">
								<description>
									

									<para>the LinphoneVcard </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="name" type="char">
								<description>
									

									<para>the family name to set for the vCard </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Sets the family name in the N attribute of the vCard. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="full_name">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/vcard.h" name="linphone_vcard_get_full_name">
						<return completetype="const char *" type="char">
							<description>
								<para>the display name of the vCard, or NULL </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneVcard *" name="vCard" type="LinphoneVcard">
								<description>
									

									<para>the LinphoneVcard </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Returns the FN attribute of the vCard, or NULL if it isn't set yet. 
								<description>
									<para>the display name of the vCard, or NULL </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/vcard.h" name="linphone_vcard_set_full_name">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneVcard *" name="vCard" type="LinphoneVcard">
								<description>
									

									<para>the LinphoneVcard </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="name" type="char">
								<description>
									

									<para>the display name to set for the vCard </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Sets the FN attribute of the vCard (which is mandatory). </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="given_name">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/vcard.h" name="linphone_vcard_get_given_name">
						<return completetype="const char *" type="char">
							<description>
								<para>the given name of the vCard, or NULL </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneVcard *" name="vCard" type="LinphoneVcard">
								<description>
									

									<para>the LinphoneVcard </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Returns the given name in the N attribute of the vCard, or NULL if it isn't set yet. 
								<description>
									<para>the given name of the vCard, or NULL </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/vcard.h" name="linphone_vcard_set_given_name">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneVcard *" name="vCard" type="LinphoneVcard">
								<description>
									

									<para>the LinphoneVcard </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="name" type="char">
								<description>
									

									<para>the given name to set for the vCard </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Sets the given name in the N attribute of the vCard. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="organization">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/vcard.h" name="linphone_vcard_get_organization">
						<return completetype="const char *" type="char">
							<description>
								<para>the Organization of the vCard or NULL </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneVcard *" name="vCard" type="LinphoneVcard">
								<description>
									

									<para>the LinphoneVcard </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the Organization of the vCard 
								<description>
									<para>the Organization of the vCard or NULL </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/vcard.h" name="linphone_vcard_set_organization">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneVcard *" name="vCard" type="LinphoneVcard">
								<description>
									

									<para>the LinphoneVcard </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="organization" type="char">
								<description>
									

									<para>the Organization </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Fills the Organization field of the vCard </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="phone_numbers">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/vcard.h" name="linphone_vcard_get_phone_numbers">
						<return completetype="bctbx_list_t *" containedtype="const char *" type="bctbx_list_t">
							<description>
								<para>
									A list of const char * objects. 
									<bctbxlist>const char *</bctbxlist>
									  
								</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneVcard *" name="vCard" type="LinphoneVcard">
								<description>
									

									<para>the LinphoneVcard </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Returns the list of phone numbers (as string) in the vCard (all the TEL attributes) or NULL 
								<description>
									<para>
										A list of const char * objects. 
										<bctbxlist>const char *</bctbxlist>
										  
									</para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="sip_addresses">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/vcard.h" name="linphone_vcard_get_sip_addresses">
						<return completetype="const bctbx_list_t *" containedtype="LinphoneAddress" type="bctbx_list_t">
							<description>
								<para>
									A list of 
									<ref>LinphoneAddress</ref>
									 objects. 
									<bctbxlist>LinphoneAddress</bctbxlist>
									  
								</para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="LinphoneVcard *" name="vCard" type="LinphoneVcard">
								<description>
									

									<para>the LinphoneVcard </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Returns the list of SIP addresses (as LinphoneAddress) in the vCard (all the IMPP attributes that has an URI value starting by &quot;sip:&quot;) or NULL 
								<description>
									<para>
										A list of 
										<ref>LinphoneAddress</ref>
										 objects. 
										<bctbxlist>LinphoneAddress</bctbxlist>
										  
									</para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="uid">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/vcard.h" name="linphone_vcard_get_uid">
						<return completetype="const char *" type="char">
							<description>
								<para>the UID of the vCard, otherwise NULL </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneVcard *" name="vCard" type="LinphoneVcard">
								<description>
									

									<para>the LinphoneVcard </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the UID of the vCard 
								<description>
									<para>the UID of the vCard, otherwise NULL </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/vcard.h" name="linphone_vcard_set_uid">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneVcard *" name="vCard" type="LinphoneVcard">
								<description>
									

									<para>the LinphoneVcard </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="uid" type="char">
								<description>
									

									<para>the unique id </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Sets the unique ID of the vCard </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="url">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/vcard.h" name="linphone_vcard_get_url">
						<return completetype="const char *" type="char">
							<description>
								<para>the URL of the vCard in the CardDAV server, otherwise NULL </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneVcard *" name="vCard" type="LinphoneVcard">
								<description>
									

									<para>the LinphoneVcard </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Gets the URL of the vCard 
								<description>
									<para>the URL of the vCard in the CardDAV server, otherwise NULL </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/vcard.h" name="linphone_vcard_set_url">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneVcard *" name="vCard" type="LinphoneVcard">
								<description>
									

									<para>the LinphoneVcard </para>
								</description>
								

							</argument>
							<argument completetype="const char *" name="url" type="char">
								<description>
									

									<para>the URL </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Sets the URL of the vCard </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
			</properties>
			<detaileddescription>
				

				<para>The LinphoneVcard object. </para>
				        
			</detaileddescription>
			
        
		</class>
		<class cfunctionprefix="linphone_xml_rpc_request_" deprecated="false" destroyable="false" name="LinphoneXmlRpcRequest" refcountable="true">
			<classmethods>
				<classmethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/xmlrpc.h" name="linphone_xml_rpc_request_new">
					<return completetype="LinphoneXmlRpcRequest *" type="LinphoneXmlRpcRequest">
						<description>
							<para>A new LinphoneXmlRpcRequest object. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const char *" name="method" type="char">
							<description>
								

								<para>The XML-RPC method to call. </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneXmlRpcArgType" name="return_type" type="LinphoneXmlRpcArgType">
							<description>
								

								<para>The expected XML-RPC response type. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Create a new LinphoneXmlRpcRequest object. 
							<description>
								<para>A new LinphoneXmlRpcRequest object. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</classmethod>
				<classmethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/xmlrpc.h" name="linphone_xml_rpc_request_new_with_args">
					<return completetype="LinphoneXmlRpcRequest *" type="LinphoneXmlRpcRequest">
						<description>
							<para>A new LinphoneXmlRpcRequest object. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const char *" name="method" type="char">
							<description>
								

								<para>The XML-RPC method to call. </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneXmlRpcArgType" name="return_type" type="LinphoneXmlRpcArgType">
							<description>
								

								<para>The expected XML-RPC response type. </para>
							</description>
							

						</argument>
						<argument completetype="..." name="" type="..."/>
					</arguments>
					<detaileddescription>
						

						<para>
							Create a new LinphoneXmlRpcRequest object giving the arguments to the method call. 
							<description>
								<para>A new LinphoneXmlRpcRequest object. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</classmethod>
			</classmethods>
			<instancemethods>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/xmlrpc.h" name="linphone_xml_rpc_request_add_int_arg">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneXmlRpcRequest *" name="request" type="LinphoneXmlRpcRequest">
							<description>
								

								<para>LinphoneXmlRpcRequest object. </para>
							</description>
							

						</argument>
						<argument completetype="int" name="value" type="int">
							<description>
								

								<para>The integer value of the added argument. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Add an integer argument to an XML-RPC request. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/xmlrpc.h" name="linphone_xml_rpc_request_add_string_arg">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneXmlRpcRequest *" name="request" type="LinphoneXmlRpcRequest">
							<description>
								

								<para>LinphoneXmlRpcRequest object. </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="value" type="char">
							<description>
								

								<para>The string value of the added argument. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Add a string argument to an XML-RPC request. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/xmlrpc.h" name="linphone_xml_rpc_request_ref">
					<return completetype="LinphoneXmlRpcRequest *" type="LinphoneXmlRpcRequest">
						<description>
							<para>The same LinphoneXmlRpcRequest object. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneXmlRpcRequest *" name="request" type="LinphoneXmlRpcRequest">
							<description>
								

								<para>LinphoneXmlRpcRequest object. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Acquire a reference to the XML-RPC request. 
							<description>
								<para>The same LinphoneXmlRpcRequest object. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/xmlrpc.h" name="linphone_xml_rpc_request_unref">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneXmlRpcRequest *" name="request" type="LinphoneXmlRpcRequest">
							<description>
								

								<para>LinphoneXmlRpcRequest object. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Release reference to the XML-RPC request. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
			</instancemethods>
			<properties>
				<property name="callbacks">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/xmlrpc.h" name="linphone_xml_rpc_request_get_callbacks">
						<return completetype="LinphoneXmlRpcRequestCbs *" type="LinphoneXmlRpcRequestCbs">
							<description>
								<para>The LinphoneXmlRpcRequestCbs object associated with the LinphoneXmlRpcRequest. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneXmlRpcRequest *" name="request" type="LinphoneXmlRpcRequest">
								<description>
									

									<para>LinphoneXmlRpcRequest object </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the LinphoneXmlRpcRequestCbs object associated with a LinphoneXmlRpcRequest. 
								<description>
									<para>The LinphoneXmlRpcRequestCbs object associated with the LinphoneXmlRpcRequest. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="content">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/xmlrpc.h" name="linphone_xml_rpc_request_get_content">
						<return completetype="const char *" type="char">
							<description>
								<para>The string representation of the content of the XML-RPC request. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneXmlRpcRequest *" name="request" type="LinphoneXmlRpcRequest">
								<description>
									

									<para>LinphoneXmlRpcRequest object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the content of the XML-RPC request. 
								<description>
									<para>The string representation of the content of the XML-RPC request. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="int_response">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/xmlrpc.h" name="linphone_xml_rpc_request_get_int_response">
						<return completetype="int" type="int">
							<description>
								<para>The integer response to the XML-RPC request. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneXmlRpcRequest *" name="request" type="LinphoneXmlRpcRequest">
								<description>
									

									<para>LinphoneXmlRpcRequest object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the response to an XML-RPC request sent with 
								<ref>linphone_xml_rpc_session_send_request()</ref>
								 and returning an integer response. 
								<description>
									<para>The integer response to the XML-RPC request. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="status">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/xmlrpc.h" name="linphone_xml_rpc_request_get_status">
						<return completetype="LinphoneXmlRpcStatus" type="LinphoneXmlRpcStatus">
							<description>
								<para>The status of the XML-RPC request. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneXmlRpcRequest *" name="request" type="LinphoneXmlRpcRequest">
								<description>
									

									<para>LinphoneXmlRpcRequest object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the status of the XML-RPC request. 
								<description>
									<para>The status of the XML-RPC request. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="string_response">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/xmlrpc.h" name="linphone_xml_rpc_request_get_string_response">
						<return completetype="const char *" type="char">
							<description>
								<para>The string response to the XML-RPC request. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneXmlRpcRequest *" name="request" type="LinphoneXmlRpcRequest">
								<description>
									

									<para>LinphoneXmlRpcRequest object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the response to an XML-RPC request sent with 
								<ref>linphone_xml_rpc_session_send_request()</ref>
								 and returning a string response. 
								<description>
									<para>The string response to the XML-RPC request. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
				</property>
				<property name="user_data">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/xmlrpc.h" name="linphone_xml_rpc_request_get_user_data">
						<return completetype="void *" type="void">
							<description>
								<para>The user pointer associated with the XML-RPC request. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneXmlRpcRequest *" name="request" type="LinphoneXmlRpcRequest">
								<description>
									

									<para>LinphoneXmlRpcRequest object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Retrieve the user pointer associated with the XML-RPC request. 
								<description>
									<para>The user pointer associated with the XML-RPC request. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/xmlrpc.h" name="linphone_xml_rpc_request_set_user_data">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneXmlRpcRequest *" name="request" type="LinphoneXmlRpcRequest">
								<description>
									

									<para>LinphoneXmlRpcRequest object. </para>
								</description>
								

							</argument>
							<argument completetype="void *" name="ud" type="void">
								<description>
									

									<para>The user pointer to associate with the XML-RPC request. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Assign a user pointer to the XML-RPC request. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
			</properties>
			<detaileddescription>
				

				<para>The LinphoneXmlRpcRequest object representing a XML-RPC request to be sent. </para>
				        
			</detaileddescription>
			
        
		</class>
		<class cfunctionprefix="linphone_xml_rpc_request_cbs_" deprecated="false" destroyable="false" name="LinphoneXmlRpcRequestCbs" refcountable="true">
			<events>
				<event deprecated="false" name="LinphoneXmlRpcRequestCbsResponseCb">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneXmlRpcRequest *" name="request" type="LinphoneXmlRpcRequest">
							<description>
								

								<para>LinphoneXmlRpcRequest object </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Callback used to notify the response to an XML-RPC request. </para>
						        
					</detaileddescription>
					
        
				</event>
			</events>
			<instancemethods>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/xmlrpc.h" name="linphone_xml_rpc_request_cbs_ref">
					<return completetype="LinphoneXmlRpcRequestCbs *" type="LinphoneXmlRpcRequestCbs">
						<description>
							<para>The same LinphoneXmlRpcRequestCbs object. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneXmlRpcRequestCbs *" name="cbs" type="LinphoneXmlRpcRequestCbs">
							<description>
								

								<para>LinphoneXmlRpcRequestCbs object. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Acquire a reference to a LinphoneXmlRpcRequestCbs object. 
							<description>
								<para>The same LinphoneXmlRpcRequestCbs object. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/xmlrpc.h" name="linphone_xml_rpc_request_cbs_unref">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneXmlRpcRequestCbs *" name="cbs" type="LinphoneXmlRpcRequestCbs">
							<description>
								

								<para>LinphoneXmlRpcRequestCbs object. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Release a reference to a LinphoneXmlRpcRequestCbs object. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
			</instancemethods>
			<properties>
				<property name="response">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/xmlrpc.h" name="linphone_xml_rpc_request_cbs_get_response">
						<return completetype="LinphoneXmlRpcRequestCbsResponseCb" type="LinphoneXmlRpcRequestCbsResponseCb">
							<description>
								<para>The current response callback. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneXmlRpcRequestCbs *" name="cbs" type="LinphoneXmlRpcRequestCbs">
								<description>
									

									<para>LinphoneXmlRpcRequestCbs object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Get the response callback. 
								<description>
									<para>The current response callback. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/xmlrpc.h" name="linphone_xml_rpc_request_cbs_set_response">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneXmlRpcRequestCbs *" name="cbs" type="LinphoneXmlRpcRequestCbs">
								<description>
									

									<para>LinphoneXmlRpcRequestCbs object. </para>
								</description>
								

							</argument>
							<argument completetype="LinphoneXmlRpcRequestCbsResponseCb" name="cb" type="LinphoneXmlRpcRequestCbsResponseCb">
								<description>
									

									<para>The response callback to be used. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Set the response callback. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
				<property name="user_data">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/xmlrpc.h" name="linphone_xml_rpc_request_cbs_get_user_data">
						<return completetype="void *" type="void">
							<description>
								<para>The user pointer associated with the LinphoneXmlRpcRequestCbs object. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneXmlRpcRequestCbs *" name="cbs" type="LinphoneXmlRpcRequestCbs">
								<description>
									

									<para>LinphoneXmlRpcRequestCbs object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Retrieve the user pointer associated with a LinphoneXmlRpcRequestCbs object. 
								<description>
									<para>The user pointer associated with the LinphoneXmlRpcRequestCbs object. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/xmlrpc.h" name="linphone_xml_rpc_request_cbs_set_user_data">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneXmlRpcRequestCbs *" name="cbs" type="LinphoneXmlRpcRequestCbs">
								<description>
									

									<para>LinphoneXmlRpcRequestCbs object. </para>
								</description>
								

							</argument>
							<argument completetype="void *" name="ud" type="void">
								<description>
									

									<para>The user pointer to associate with the LinphoneXmlRpcRequestCbs object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Assign a user pointer to a LinphoneXmlRpcRequestCbs object. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
			</properties>
			<detaileddescription>
				

				<para>An object to handle the callbacks for handling the LinphoneXmlRpcRequest operations. </para>
				        
			</detaileddescription>
			
        
		</class>
		<class cfunctionprefix="linphone_xml_rpc_session_" deprecated="false" destroyable="false" name="LinphoneXmlRpcSession" refcountable="true">
			<classmethods>
				<classmethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/xmlrpc.h" name="linphone_xml_rpc_session_new">
					<return completetype="LinphoneXmlRpcSession *" type="LinphoneXmlRpcSession">
						<description>
							<para>A new LinphoneXmlRpcSession object. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneCore *" name="core" type="LinphoneCore">
							<description>
								

								<para>The LinphoneCore object used to send the XML-RPC requests. </para>
							</description>
							

						</argument>
						<argument completetype="const char *" name="url" type="char">
							<description>
								

								<para>The URL of the XML-RPC server to send the XML-RPC requests to. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Create a new LinphoneXmlRpcSession object. 
							<description>
								<para>A new LinphoneXmlRpcSession object. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</classmethod>
			</classmethods>
			<instancemethods>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/xmlrpc.h" name="linphone_xml_rpc_session_ref">
					<return completetype="LinphoneXmlRpcSession *" type="LinphoneXmlRpcSession">
						<description>
							<para>The same LinphoneXmlRpcSession object. </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="LinphoneXmlRpcSession *" name="session" type="LinphoneXmlRpcSession">
							<description>
								

								<para>LinphoneXmlRpcSession object. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Acquire a reference to the XML-RPC session. 
							<description>
								<para>The same LinphoneXmlRpcSession object. </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/xmlrpc.h" name="linphone_xml_rpc_session_release">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneXmlRpcSession *" name="session" type="LinphoneXmlRpcSession">
							<description>
								

								<para>LinphoneXmlRpcSession object. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Stop and unref an XML rpc session. Pending requests will be aborted. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/xmlrpc.h" name="linphone_xml_rpc_session_send_request">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneXmlRpcSession *" name="session" type="LinphoneXmlRpcSession">
							<description>
								

								<para>LinphoneXmlRpcSession object. </para>
							</description>
							

						</argument>
						<argument completetype="LinphoneXmlRpcRequest *" name="request" type="LinphoneXmlRpcRequest">
							<description>
								

								<para>The LinphoneXmlRpcRequest to be sent. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>Send an XML-RPC request. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/xmlrpc.h" name="linphone_xml_rpc_session_unref">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LinphoneXmlRpcSession *" name="session" type="LinphoneXmlRpcSession">
							<description>
								

								<para>LinphoneXmlRpcSession object. </para>
							</description>
							

						</argument>
					</arguments>
					<detaileddescription>
						

						<para>
							Release reference to the XML-RPC session. 
							<simplesect kind="warning">
								<para>
									This will not stop pending xml-rpc requests. Use 
									<ref>linphone_xml_rpc_session_release()</ref>
									 instead if this is intended. 
								</para>
							</simplesect>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
			</instancemethods>
			<properties>
				<property name="user_data">
					<getter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/xmlrpc.h" name="linphone_xml_rpc_session_get_user_data">
						<return completetype="void *" type="void">
							<description>
								<para>The user pointer associated with the XML-RPC session. </para>
							</description>
							

						</return>
						<arguments>
							<argument completetype="const LinphoneXmlRpcSession *" name="session" type="LinphoneXmlRpcSession">
								<description>
									

									<para>LinphoneXmlRpcSession object. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>
								Retrieve the user pointer associated with the XML-RPC session. 
								<description>
									<para>The user pointer associated with the XML-RPC session. </para>
								</description>
								

							</para>
							        
						</detaileddescription>
						
        
					</getter>
					<setter deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/xmlrpc.h" name="linphone_xml_rpc_session_set_user_data">
						<return completetype="void" type="void"/>
						<arguments>
							<argument completetype="LinphoneXmlRpcSession *" name="session" type="LinphoneXmlRpcSession">
								<description>
									

									<para>LinphoneXmlRpcSession object. </para>
								</description>
								

							</argument>
							<argument completetype="void *" name="ud" type="void">
								<description>
									

									<para>The user pointer to associate with the XML-RPC session. </para>
								</description>
								

							</argument>
						</arguments>
						<detaileddescription>
							

							<para>Assign a user pointer to the XML-RPC session. </para>
							        
						</detaileddescription>
						
        
					</setter>
				</property>
			</properties>
			<detaileddescription>
				

				<para>The LinphoneXmlRpcSession object used to send XML-RPC requests and handle their responses. </para>
				        
			</detaileddescription>
			
        
		</class>
		<class cfunctionprefix="lp_config_" deprecated="false" destroyable="false" name="LpConfig" refcountable="false">
			<instancemethods>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="lp_config_load_dict_to_section">
					<return completetype="void" type="void"/>
					<arguments>
						<argument completetype="LpConfig *" name="lpconfig" type="LpConfig"/>
						<argument completetype="const char *" name="section" type="char"/>
						<argument completetype="const LinphoneDictionary *" name="dict" type="LinphoneDictionary"/>
					</arguments>
					<detaileddescription>
						

						<para>Loads a dictionary into a section of the lpconfig. If the section doesn't exist it is created. Overwrites existing keys, creates non-existing keys. </para>
						        
					</detaileddescription>
					
        
				</instancemethod>
				<instancemethod deprecated="false" location="/home/francois/projects/linphone/linphone/include/linphone/core.h" name="lp_config_section_to_dict">
					<return completetype="LinphoneDictionary *" type="LinphoneDictionary">
						<description>
							<para>a #LinphoneDictionary with all the keys from a section, or NULL if the section doesn't exist </para>
						</description>
						

					</return>
					<arguments>
						<argument completetype="const LpConfig *" name="lpconfig" type="LpConfig"/>
						<argument completetype="const char *" name="section" type="char"/>
					</arguments>
					<detaileddescription>
						

						<para>
							Converts a config section into a dictionary. 
							<description>
								<para>a #LinphoneDictionary with all the keys from a section, or NULL if the section doesn't exist </para>
							</description>
							

						</para>
						        
					</detaileddescription>
					
        
				</instancemethod>
			</instancemethods>
			<detaileddescription>
				

				<para>Define old struct name for backward compatibility </para>
				        
			</detaileddescription>
			
        
		</class>
	</classes>
</api>
